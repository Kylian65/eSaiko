# CAHIER DES CHARGES TECHNIQUE - MODULE ELASKA

**Version:** 6.0 (Consolidée & Finale)  
**Date:** 2025-05-27  
**Client:** eLaska (Kylian65)  
**Application cible:** Dolibarr v21  

---

## TABLE DES MATIÈRES

1. [INTRODUCTION ET VISION GLOBALE](#1-introduction-et-vision-globale)
   1.1. [Objectifs et périmètre](#11-objectifs-et-périmètre)
   1.2. [Public cible](#12-public-cible)
   1.3. [Intégration avec Dolibarr](#13-intégration-avec-dolibarr)

2. [ARCHITECTURE TECHNIQUE](#2-architecture-technique)
   2.1. [Structure générale](#21-structure-générale)
   2.2. [Organisation des répertoires et fichiers](#22-organisation-des-répertoires-et-fichiers)
   2.3. [Stack technologique](#23-stack-technologique)
   2.4. [Principes architecturaux](#24-principes-architecturaux)
   2.5. [Modèle de données](#25-modèle-de-données)

3. [MODULES FONCTIONNELS CORE](#3-modules-fonctionnels-core)
   3.1. [Module Cœur: Gestion des Tiers 360°](#31-module-cœur-gestion-des-tiers-360)
   3.2. [Module Dossiers Centralisés](#32-module-dossiers-centralisés)
   3.3. [Module Tâches et Suivi Opérationnel](#33-module-tâches-et-suivi-opérationnel)
   3.4. [Module Gestion Documentaire & Coffre-Fort](#34-module-gestion-documentaire--coffre-fort)

4. [MODULES FONCTIONNELS SPÉCIFIQUES](#4-modules-fonctionnels-spécifiques)
   4.1. [Module Accompagnement des Particuliers](#41-module-accompagnement-des-particuliers)
   4.2. [Module Accompagnement des Associations](#42-module-accompagnement-des-associations)
   4.3. [Module Création d'Entreprise](#43-module-création-dentreprise)
   4.4. [Module Conseil & Gestion TPE/PME](#44-module-conseil--gestion-tpepme)
   4.5. [Module Conseil en Gestion de Patrimoine](#45-module-conseil-en-gestion-de-patrimoine)
   4.6. [Module Abonnements Clients](#46-module-abonnements-clients)
   4.7. [Module Recouvrements](#47-module-recouvrements)
   4.8. [Module Prospection & CRM](#48-module-prospection--crm)

5. [PORTAIL CLIENT SPA](#5-portail-client-spa)
   5.1. [Architecture du Portail React](#51-architecture-du-portail-react)
   5.2. [Sections et fonctionnalités](#52-sections-et-fonctionnalités)
   5.3. [Composants React](#53-composants-react)
   5.4. [Communication avec l'API](#54-communication-avec-lapi)
   5.5. [Authentification et sécurité](#55-authentification-et-sécurité)
   5.6. [Gestion des notifications](#56-gestion-des-notifications)

6. [SYSTÈMES TRANSVERSAUX](#6-systèmes-transversaux)
   6.1. [Workflows d'Automatisation](#61-workflows-dautomatisation)
   6.2. [Système de Champs Dynamiques](#62-système-de-champs-dynamiques)
   6.3. [Système de Tags/Étiquettes](#63-système-de-tagsétiquettes)
   6.4. [Gestion des Communications](#64-gestion-des-communications)
   6.5. [Gestion des Consentements RGPD](#65-gestion-des-consentements-rgpd)
   6.6. [Prise de Rendez-vous](#66-prise-de-rendez-vous)
   6.7. [Personnalisation Interface](#67-personnalisation-interface)

7. [SÉCURITÉ](#7-sécurité)
   7.1. [Modèle de sécurité](#71-modèle-de-sécurité)
   7.2. [Chiffrement des données](#72-chiffrement-des-données)
   7.3. [Authentification](#73-authentification)
   7.4. [Gestion des permissions](#74-gestion-des-permissions)
   7.5. [Protection des APIs](#75-protection-des-apis)
   7.6. [Audit et journalisation](#76-audit-et-journalisation)

8. [INTÉGRATIONS EXTERNES](#8-intégrations-externes)
   8.1. [Google Calendar](#81-google-calendar)
   8.2. [Google Drive](#82-google-drive)
   8.3. [Email IMAP/SMTP](#83-email-imapsmtp)
   8.4. [Signature Électronique](#84-signature-électronique)
   8.5. [API publique](#85-api-publique)

9. [BASE DE DONNÉES](#9-base-de-données)
   9.1. [Structure des tables principales](#91-structure-des-tables-principales)
   9.2. [Relations et contraintes](#92-relations-et-contraintes)
   9.3. [Indexation et performances](#93-indexation-et-performances)
   9.4. [Gestion du chiffrement](#94-gestion-du-chiffrement)

10. [UI/UX](#10-uiux)
    10.1. [Principes de design](#101-principes-de-design)
    10.2. [Responsive design](#102-responsive-design)
    10.3. [Système d'icônes](#103-système-dicônes)
    10.4. [Composants UI partagés](#104-composants-ui-partagés)

11. [PERFORMANCES ET OPTIMISATIONS](#11-performances-et-optimisations)
    11.1. [Objectifs de performance](#111-objectifs-de-performance)
    11.2. [Stratégies d'optimisation](#112-stratégies-doptimisation)
    11.3. [Monitoring et alertes](#113-monitoring-et-alertes)

12. [ROADMAP DE DÉVELOPPEMENT](#12-roadmap-de-développement)
    12.1. [Phase 1: Socle Technique & Cœur Métier](#121-phase-1-socle-technique--cœur-métier)
    12.2. [Phase 2: Modules Spécialisés](#122-phase-2-modules-spécialisés)
    12.3. [Phase 3: Intelligence & Optimisation](#123-phase-3-intelligence--optimisation)
    12.4. [Phase 4: Innovation & Évolution](#124-phase-4-innovation--évolution)

13. [SPÉCIFICATIONS TECHNIQUES ADDITIONNELLES](#13-spécifications-techniques-additionnelles)
    13.1. [Exigences système](#131-exigences-système)
    13.2. [Compatibilité navigateurs](#132-compatibilité-navigateurs)
    13.3. [Déploiement](#133-déploiement)
    13.4. [Sauvegarde et récupération](#134-sauvegarde-et-récupération)

14. [ANNEXES](#14-annexes)
    14.1. [Glossaire technique](#141-glossaire-technique)
    14.2. [Références](#142-références)

---

## 1. INTRODUCTION ET VISION GLOBALE

### 1.1. Objectifs et périmètre

Le module eLaska-ESaiko est une solution complète de gestion des services d'accompagnement administratif, financier et de conseil, conçue comme extension du système de gestion Dolibarr. Ce module vise à fournir une plateforme unifiée pour la gestion des relations clients, des dossiers, et des prestations pour quatre catégories principales de clients:

- **Particuliers**: accompagnement administratif, objectifs de vie, gestion de patrimoine
- **Associations**: gestion statutaire, demandes de subventions, obligations réglementaires
- **Créateurs d'entreprises**: parcours de création, aides, formalités
- **TPE/PME**: conseil RH, fiscal, gestion externalisée

Le module unifie toutes les interactions et suivis dans une interface performante et sécurisée, avec un portail client moderne et des outils de pilotage avancés.

### 1.2. Public cible

Le module s'adresse à deux types d'utilisateurs principaux:

- **Utilisateurs internes (Gestionnaires/Conseillers)**: Professionnels utilisant le backoffice Dolibarr enrichi par eLaska-ESaiko pour gérer les dossiers clients, avec des rôles et permissions configurables.

- **Utilisateurs externes (Clients)**: Accèdent à un portail web SPA sécurisé offrant une expérience utilisateur moderne pour suivre leurs dossiers, communiquer, consulter/transmettre des documents et prendre des rendez-vous.

Un troisième type d'utilisateurs potentiel concerne les **Apporteurs d'Affaires**, qui peuvent avoir un accès limité au portail pour suivre leurs leads et commissions.

### 1.3. Intégration avec Dolibarr

Le module s'intègre nativement avec les modules standards Dolibarr suivants:

- **Tiers**: Extension des fiches clients avec typologies spécifiques, champs additionnels, et attributs supplémentaires
- **Projets/Tâches**: Liaison des dossiers eLaska avec les projets Dolibarr pour le suivi de temps
- **Facturation**: Génération automatisée de propositions, commandes et factures depuis les prestations eLaska
- **GED**: Utilisation du système documentaire de Dolibarr, avec extensions pour le coffre-fort numérique
- **Messagerie/Notes**: Enrichissement pour le suivi des communications multi-canal
- **Agenda**: Synchronisation des échéances, rendez-vous et rappels
- **Produits/Services**: Catalogue des prestations eLaska
- **Contrats**: Formalisation des services et abonnements
- **Banque**: Intégration pour le suivi des règlements

## 2. ARCHITECTURE TECHNIQUE

### 2.1. Structure générale

L'architecture du module eLaska-ESaiko est conçue comme une extension modulaire de Dolibarr, avec deux composants principaux:

1. **Backoffice**: Modules PHP intégrés à Dolibarr, enrichis de composants JavaScript/React pour des fonctionnalités avancées
2. **Portail Client**: Application React Single Page Application (SPA) communiquant avec le backoffice via API REST

Cette approche hybride permet d'offrir une expérience utilisateur moderne aux clients tout en tirant parti de l'écosystème Dolibarr pour les gestionnaires.

### 2.2. Organisation des répertoires et fichiers

```
htdocs/custom/elaska/
├── admin/                          # Configuration et paramétrage
│   ├── setup.php                   # Configuration générale
│   ├── dynamicfields.php           # Gestion des champs dynamiques
│   ├── workflows.php               # Configuration des workflows
│   ├── permissions.php             # Gestion des permissions
│   ├── numbering_models.php        # Modèles de numérotation
│   ├── consent_management.php      # Gestion RGPD
│   └── role_dashboard_config.php   # Tableaux de bord par rôle
├── api/                            # API REST pour portail et intégrations
│   ├── index.php                   # Point d'entrée principal
│   ├── clients/                    # Endpoints relatifs aux clients
│   ├── dossiers/                   # Endpoints relatifs aux dossiers
│   ├── documents/                  # Endpoints gestion documentaire
│   ├── rdv/                        # Endpoints prise de rendez-vous
│   ├── patrimoine/                 # Endpoints patrimoine/finance
│   └── auth/                       # Authentification et sécurité
├── class/                          # Classes PHP métier
│   ├── core/                       # Classes principales
│   ├── specialized/                # Classes spécialisées par type client
│   ├── patrimoine/                 # Classes patrimoine/finance
│   └── utils/                      # Classes utilitaires
├── core/                           # Descripteurs et modules
│   ├── modules/                    # Sous-modules
│   ├── triggers/                   # Triggers événementiels
│   ├── boxes/                      # Widgets tableaux de bord
│   └── includes/                   # Fichiers partagés
├── css/                            # Feuilles de style
│   ├── elaska.css                  # Styles généraux
│   ├── elaska-responsive.css       # Adaptations responsive
│   ├── elaska-icons.css            # Font Awesome et icônes
│   └── theme/                      # Variations thématiques
├── img/                            # Images et ressources
├── js/                             # JavaScript et composants React
│   ├── components/                 # Composants React backoffice
│   ├── utils/                      # Utilitaires JavaScript
│   └── lib/                        # Bibliothèques tierces
├── langs/                          # Fichiers de traduction
│   ├── fr_FR/                      # Français
│   └── en_US/                      # Anglais
├── lib/                            # Bibliothèques tierces PHP
├── portail/                        # Application SPA portail client
│   ├── build/                      # Build production (distribué)
│   └── src/                        # Code source React (dev)
├── sql/                            # Scripts SQL
│   ├── llx_elaska_*.sql            # Création tables
│   └── data/                       # Données initiales
├── tpl/                            # Templates backoffice
├── widgets/                        # Widgets spécialisés
└── views/                          # Vues principales backoffice
```

### 2.3. Stack technologique

**Backend:**
- PHP 8.1+ (compatible Dolibarr v21)
- MySQL/MariaDB avec support chiffrement AES-256
- API REST sécurisée par JWT/OAuth2

**Frontend Backoffice:**
- PHP/HTML/CSS (Dolibarr standard)
- JavaScript/jQuery pour fonctionnalités basiques
- Composants React encapsulés pour interfaces complexes:
  - Timelines dossiers
  - Tableaux Kanban
  - Dashboards dynamiques

**Frontend Portail Client:**
- React 18+
- React Router 6+
- React Query/SWR pour gestion d'état
- Axios pour requêtes API
- Styled Components ou Tailwind CSS pour styles

**Outils de build:**
- Vite pour build SPA React
- Webpack pour bundle des composants React backoffice
- Composer pour dépendances PHP

**Dépendances principales:**
- Google API Client pour PHP (Calendar, Drive)
- JWT Firebase PHP pour authentification API
- Font Awesome pour icônes

### 2.4. Principes architecturaux

**Architecture du backoffice:**
- Développement en tant qu'extension modulaire de Dolibarr
- Respect des standards de codage Dolibarr
- Extension des objets natifs plutôt que réplication
- Utilisation de hooks et triggers pour extension non-intrusive
- Architecture MVC où applicable

**Architecture du portail client:**
- SPA React avec routing côté client
- Séparation claire entre UI/UX et logique métier
- Pattern Container/Component pour structure React
- Communication exclusivement via API REST
- Code modulaire regroupé par domaine fonctionnel

**Communication inter-composants:**
- API REST JSON pour toute communication portail <-> backoffice
- JWT pour sécurisation des échanges
- Versioning d'API pour évolution sans rupture

### 2.5. Modèle de données

L'architecture de données repose sur l'extension des tables Dolibarr existantes et la création de tables spécifiques à eLaska-ESaiko.

**Principes généraux:**
- Extension de `llx_societe` pour les informations client spécialisées
- Tables dédiées par entité métier (dossier, timeline, patrimoine, etc.)
- Référence externe systématique vers les objets Dolibarr natifs
- Format de référencement unique `eLSK-{TYPE}-{ANNÉE}-{NUMÉRO}` (configurable)
- Chiffrement sélectif des données sensibles

**Entités principales:**
- Client (extension `llx_societe` + `llx_elaska_client_info`)
- Dossier (`llx_elaska_dossier`)
- Timeline dossier (`llx_elaska_dossier_timeline`)
- Tâche (extension `llx_projet_task` + `llx_elaska_task_info`)
- Prestation/Service (extension `llx_product` + `llx_elaska_prestation`)
- Patrimoine/Finance (`llx_elaska_patrimoine`, `llx_elaska_assurance`, etc.)
- Objectif de vie (`llx_elaska_client_objectif`)
- Intervenant externe (`llx_elaska_intervenant_externe`)
- Opportunity/Lead CRM (`llx_elaska_opportunite`)
- Workflow (`llx_elaska_workflow_rule`)
- Consentement RGPD (`llx_elaska_consent_log`)

Un diagramme détaillé des relations entre entités est fourni en annexe.

## 3. MODULES FONCTIONNELS CORE

### 3.1. Module Cœur: Gestion des Tiers 360°

La gestion des tiers constitue le cœur du module eLaska-ESaiko, étendant les capacités natives de Dolibarr pour offrir une vue à 360° des clients.

**Spécifications techniques:**

1. **Extension du concept de tiers avec typologies spécifiques:**
   - Particuliers (personne physique)
   - Associations (structure juridique associative)
   - Entreprises (TPE/PME, artisans, professions libérales)
   - Créateurs d'entreprises (phase projet/création)
   - Intervenants externes (partenaires professionnels)
   - Organismes locaux/régionaux (administrations, financeurs)
   - Apporteurs d'affaires (sources de leads)

2. **Structure de données:**
   ```php
   // Classe principale d'extension
   class ElaskaClient extends CommonObject {
       public $db;
       public $id;
       public $ref_elaska;
       public $type_elaska;
       public $fk_soc;
       public $attributes = array();
       public $mandats = array();
       public $preferences = array();
       
       // Méthodes principales
       public function __construct($db) { ... }
       public function create($user, $notrigger=false) { ... }
       public function fetch($id, $ref='') { ... }
       public function update($user, $notrigger=false) { ... }
       public function delete($user, $notrigger=false) { ... }
       
       // Fonctionnalités spécifiques
       public function addConsentement($type, $source) { ... }
       public function getObjectifsVie() { ... }
       public function getIntervenantsExternes() { ... }
       // etc.
   }
   ```

3. **Interfaces du Module:**
   - Liste des tiers avec filtres avancés par type
   - Onglet "eLaska Info" dans fiche Dolibarr native
   - Vue dédiée "Fiche Client eLaska" avec sous-onglets spécifiques par type:
     - Particulier: Infos personnelles, Objectifs de vie, Patrimoine
     - Association: Instances statutaires, Subventions
     - Entreprise: Contrats délégués, Obligations
     - Créateur: Parcours création, Aides

4. **Fonctionnalités techniques:**
   - Génération de référence eLaska configurable 
   - Champs dynamiques par type client
   - Système d'alertes et rappels associés
   - Gestion des consentements RGPD
   - Contraintes d'accessibilité et préférences

5. **Intégration:**
   - Synchronisation bidirectionnelle avec `llx_societe`
   - Liaison avec la GED Dolibarr
   - Compatibilité avec les modules sociaux/adhérent
   - Hooks pour plugins tiers

### 3.2. Module Dossiers Centralisés

Ce module constitue l'épine dorsale fonctionnelle du système, centralisant et organisant tous les dossiers client.

**Spécifications techniques:**

1. **Structure de données principale:**
   ```php
   class ElaskaDossier extends CommonObject {
       public $db;
       public $id;
       public $ref_elaska;        // Format "eLSK-DOS-YYYY-NNNNN"
       public $fk_soc;            // Client associé
       public $fk_user_resp;      // Conseiller responsable
       public $type_dossier;      // Classification
       public $libelle;           // Titre
       public $description;
       public $statut;            // Cycle de vie
       public $date_creation;
       public $date_echeance;
       public $confidentialite;
       public $timeline_config;   // JSON configuration
       public $intervenants;      // Intervenants externes JSON
       public $montant_concerne;
       
       // Méthodes principales
       // ...
       
       // Timeline et étapes
       public function getTimeline() { ... }
       public function addEtape($params) { ... }
       public function updateEtapeStatus($etape_id, $status) { ... }
       public function getCurrentEtape() { ... }
       
       // Temps et coûts
       public function calculateTimeSpent() { ... }
       public function calculateCosts() { ... }
   }
   ```

2. **Structure Timeline:**
   ```php
   class ElaskaDossierTimeline extends CommonObject {
       public $db;
       public $id;
       public $fk_dossier;
       public $numero_etape;
       public $libelle_etape;
       public $description_etape;
       public $statut_etape;      // attente/en_cours/terminee/bloquee
       public $date_prevue;
       public $date_realisee;
       public $commentaire;
       public $visible_portail;
       public $dependance_externe;
       public $temps_prevu;
       public $temps_realise;
       public $cout_estime;
       public $cout_realise;
       
       // Méthodes
       // ...
   }
   ```

3. **Composant React Timeline:**
   ```jsx
   // Composant backoffice et portail
   const DossierTimeline = ({ dossierId, editable, onUpdate }) => {
     const { isLoading, data: timeline } = useQuery(
       ['timeline', dossierId],
       () => fetchTimeline(dossierId)
     );
     
     if (isLoading) return <LoadingSpinner />;
     
     return (
       <div className="elaska-timeline">
         {timeline.etapes.map(etape => (
           <TimelineStep
             key={etape.id}
             etape={etape}
             editable={editable}
             onStatusChange={editable ? handleStatusChange : null}
             onCommentAdd={editable ? handleCommentAdd : null}
           />
         ))}
         {editable && (
           <AddTimelineStep dossierId={dossierId} onAdd={handleAddStep} />
         )}
       </div>
     );
   };
   ```

4. **Modèles de Timeline:**
   - Configuration JSON pour types de dossiers standards:
     - Dossier de surendettement
     - Dossier retraite
     - Dossier création d'entreprise
     - Dossier subvention association
     - etc.
   - Interface d'administration pour personnalisation

5. **Fonctionnalités techniques:**
   - Référencement configurable (préfixe, année, compteur)
   - Modèles de dossiers par type client/besoin
   - Système de commentaires internes/externes
   - Suivi temps/coûts par étape
   - Gestion des dépendances inter-étapes
   - Confidentialité par dossier/étape

### 3.3. Module Tâches et Suivi Opérationnel

Ce module gère toutes les actions à réaliser sur les dossiers, avec assignation, suivi et reporting.

**Spécifications techniques:**

1. **Extension des tâches Dolibarr:**
   ```php
   class ElaskaTask extends Task {  // Hérite de projet_task Dolibarr
       public $elaska_type;        // Type spécifique
       public $fk_dossier;         // Lien dossier eLaska
       public $fk_timeline_etape;  // Étape associée
       public $checklist;          // JSON array
       public $priorite_elaska;    // 1-5 avec couleur
       public $temps_estime;
       public $visible_client;     // Visibilité portail
       public $deadline_type;      // flexible/stricte
       
       // Méthodes spécifiques
       public function completeChecklist($item_id) { ... }
       public function setCompleted($temps_passe) { ... }
       public function linkToTimelineStep($etape_id) { ... }
   }
   ```

2. **Vue Kanban React:**
   ```jsx
   const TaskKanban = () => {
     const { data: columns } = useQuery('kanban-columns', fetchKanbanConfig);
     const { data: tasks, isLoading } = useQuery('tasks', fetchTasks);
     
     if (isLoading) return <LoadingSpinner />;
     
     return (
       <div className="elaska-kanban">
         {columns.map(column => (
           <KanbanColumn
             key={column.id}
             title={column.title}
             tasks={tasks.filter(task => task.status === column.status)}
             onTaskMove={handleTaskMove}
           />
         ))}
       </div>
     );
   };
   ```

3. **Composant de saisie temps:**
   ```jsx
   const TimeEntryForm = ({ taskId, dossierRef }) => {
     const [time, setTime] = useState('');
     const [date, setDate] = useState(todayISOString());
     const [description, setDescription] = useState('');
     const [timelineStep, setTimelineStep] = useState(null);
     
     // Fetch timeline steps for the linked dossier
     const { data: timelineSteps } = useQuery(
       ['timeline-steps', dossierRef],
       () => fetchTimelineSteps(dossierRef)
     );
     
     const submitMutation = useMutation(submitTimeEntry, {
       onSuccess: () => {
         toast.success('Temps saisi avec succès');
         // Reset form...
       }
     });
     
     return (
       <form onSubmit={handleSubmit}>
         {/* Form fields */}
         <input 
           type="number"
           min="0.25" 
           step="0.25"
           value={time}
           onChange={e => setTime(e.target.value)}
           required
         />
         
         <select 
           value={timelineStep || ''}
           onChange={e => setTimelineStep(e.target.value)}
         >
           <option value="">-- Étape du dossier --</option>
           {timelineSteps?.map(step => (
             <option key={step.id} value={step.id}>
               {step.numero_etape}. {step.libelle_etape}
             </option>
           ))}
         </select>
         
         <button type="submit" disabled={submitMutation.isLoading}>
           Enregistrer
         </button>
       </form>
     );
   };
   ```

4. **Fonctionnalités techniques:**
   - Vues multiples (liste, kanban, calendrier)
   - Filtrage multi-critères (client, dossier, conseiller, statut)
   - Checklists dynamiques avec suivi d'avancement
   - Suivi temps passé par tâche/étape dossier
   - Notifications et rappels sur échéances
   - Règles d'escalade sur retards

### 3.4. Module Gestion Documentaire & Coffre-Fort

Ce module étend la GED Dolibarr pour répondre aux besoins spécifiques de sécurisation et de partage client.

**Spécifications techniques:**

1. **Extension de la structure documentaire:**
   ```php
   class ElaskaDocument extends CommonObject {
       public $db;
       public $id;
       public $fk_ecm_files;      // Lien document Dolibarr
       public $ref_elaska;
       public $type_document;     // classif. métier
       public $confidentialite;   // 1-3 (normal, sensible, très sensible)
       public $niveau_chiffrement; // 0-2 (aucun, standard, renforcé)
       public $partage_client;    // booléen
       public $coffre_fort;       // booléen (si document CFN)
       public $date_expiration;   // pour documents temporaires
       public $tags = array();    // étiquettes
       
       // Méthodes
       public function encrypt() { ... }
       public function decrypt() { ... }
       public function shareWithClient() { ... }
       public function addToSecureVault() { ... }
   }
   ```

2. **Coffre-Fort Numérique:**
   ```php
   class ElaskaCoffreFort extends CommonObject {
       public $db;
       public $id;
       public $fk_soc;            // Client propriétaire
       public $titre;
       public $description;
       public $niveau_securite;   // 1-3
       public $documents = array(); // IDs documents
       public $master_key_id;     // Clé maître chiffrée
       public $date_creation;
       public $last_access;
       public $access_count;
       
       // Méthodes de sécurité
       public function validateAccess($user) { ... }
       public function logAccess($user) { ... }
       public function addDocument($doc_id) { ... }
   }
   ```

3. **Interface Upload Multiple:**
   ```jsx
   const DocumentUploader = ({ dossierId, clientId }) => {
     const [files, setFiles] = useState([]);
     const [confidentiality, setConfidentiality] = useState(1);
     const [shareWithClient, setShareWithClient] = useState(false);
     const [addToVault, setAddToVault] = useState(false);
     const [tags, setTags] = useState([]);
     
     const uploadMutation = useMutation(uploadDocuments, {
       onSuccess: () => {
         toast.success('Documents téléversés avec succès');
         // Reset form...
       }
     });
     
     return (
       <form onSubmit={handleSubmit}>
         <div className="file-drop-zone">
           <input
             type="file"
             multiple
             onChange={handleFileSelect}
           />
         </div>
         
         <div className="document-settings">
           <SecurityLevelSelector 
             value={confidentiality}
             onChange={setConfidentiality}
           />
           
           <div className="options">
             <label>
               <input
                 type="checkbox"
                 checked={shareWithClient}
                 onChange={e => setShareWithClient(e.target.checked)}
               />
               Partager avec le client
             </label>
             
             <label>
               <input
                 type="checkbox"
                 checked={addToVault}
                 onChange={e => setAddToVault(e.target.checked)}
               />
               Ajouter au coffre-fort
             </label>
           </div>
           
           <TagSelector
             selectedTags={tags}
             onChange={setTags}
           />
         </div>
         
         <button type="submit" disabled={uploadMutation.isLoading}>
           Téléverser
         </button>
       </form>
     );
   };
   ```

4. **Fonctionnalités techniques:**
   - Classement multi-critères (client, dossier, type)
   - Niveaux de confidentialité avec accès contrôlé
   - Chiffrement sélectif ou systématique (option coffre-fort)
   - Versionning et historique des modifications
   - Annotation et commentaires sur documents
   - Prévisualisation adaptée par type (PDF, images, Office)
   - Généralisation signatures électroniques
   - Option d'intégration Google Drive

## 4. MODULES FONCTIONNELS SPÉCIFIQUES

### 4.1. Module Accompagnement des Particuliers

Module spécialisé pour la gestion des besoins spécifiques aux particuliers.

**Spécifications techniques:**

1. **Structure de données - Objectifs de Vie:**
   ```php
   class ElaskaObjectifVie extends CommonObject {
       public $db;
       public $id;
       public $ref_elaska;        // Format "eLSK-OBJ-YYYY-NNN"
       public $fk_soc;            // Client particulier
       public $titre;
       public $description;
       public $categorie;         // Logement/Famille/Retraite/etc.
       public $horizon_temporel;  // Court/Moyen/Long terme
       public $statut;            // Projet/En cours/Réalisé/Abandonné
       public $priorite;          // 1-5
       public $impact_financier;  // Estimation montant
       public $etapes = array();  // Sous-étapes JSON
       public $documents = array(); // Documents liés
       public $commentaires = array(); // Échanges client/conseiller
       
       // Méthodes
       public function progressStatus() { ... }
       public function addComment($user, $message, $visibility) { ... }
       public function linkToDossier($dossier_id) { ... }
   }
   ```

2. **Composant React - Objectifs de Vie:**
   ```jsx
   const ObjectifsVie = ({ clientId }) => {
     const { data: objectifs, isLoading } = useQuery(
       ['objectifs-vie', clientId],
       () => fetchObjectifsVie(clientId)
     );
     
     const addObjectifMutation = useMutation(createObjectifVie, {
       onSuccess: () => {
         queryClient.invalidateQueries(['objectifs-vie', clientId]);
         toast.success('Objectif de vie ajouté');
       }
     });
     
     return (
       <div className="objectifs-vie-container">
         <h2>Mes Objectifs de Vie</h2>
         
         {isLoading ? <LoadingSpinner /> : (
           <div className="objectifs-list">
             {objectifs.map(objectif => (
               <ObjectifCard
                 key={objectif.id}
                 objectif={objectif}
                 onUpdate={handleUpdate}
                 onAddComment={handleAddComment}
               />
             ))}
           </div>
         )}
         
         <AddObjectifForm onSubmit={values => addObjectifMutation.mutate(values)} />
       </div>
     );
   };
   ```

3. **Structures spécifiques pour démarches complexes:**
   ```php
   // Exemple de structure pour dossier Banque de France
   class ElaskaDossierBDF extends ElaskaDossier {
       public $situation_surendettement;
       public $type_procedure;    // PRP/Plan conventionnel
       public $date_depot;
       public $date_recevabilite;
       public $creanciers = array();
       public $montant_total_dettes;
       public $mensualite_proposee;
       public $decision_commission;
       public $date_fin_mesures;
       
       // Méthodes spécialisées
       public function calculateDebtRatio() { ... }
       public function generateCreancesList() { ... }
       public function trackProcedureStatus() { ... }
   }
   ```

4. **Fonctionnalités techniques:**
   - Modèles de dossiers spécifiques: Surendettement, Retraite, MDPH, CAF, etc.
   - Calculateurs et simulateurs adaptés (reste à vivre, droits sociaux)
   - Suivi de l'évolution des objectifs de vie
   - Coffre-Fort Numérique renforcé pour documents sensibles
   - Échéancier de vie administrative (renouvellements, déclarations)

### 4.2. Module Accompagnement des Associations

Module dédié à la gestion des besoins spécifiques des structures associatives.

**Spécifications techniques:**

1. **Structures de données principales:**
   ```php
   // Gestion des instances statutaires
   class ElaskaInstanceAssociative extends CommonObject {
       public $db;
       public $id;
       public $fk_soc;            // Association
       public $type_instance;     // AG/CA/Bureau
       public $date_tenue;
       public $ordre_jour = array();
       public $participants = array();
       public $quorum_atteint;
       public $pv_genere;         // bool
       public $decisions = array();
       public $documents = array();
       
       // Méthodes
       public function generateConvocations() { ... }
       public function generatePV() { ... }
       public function recordDecision($libelle, $vote_pour, $vote_contre) { ... }
   }
   
   // Gestion des demandes de financement
   class ElaskaFinancementAsso extends CommonObject {
       public $db;
       public $id;
       public $ref_elaska;        // Format "eLSK-FIN-YYYY-NNN"
       public $fk_soc;            // Association
       public $fk_soc_financeur;  // Organisme financeur
       public $type_financement;  // Subvention/Appel à projet/Mécénat
       public $montant_demande;
       public $montant_obtenu;
       public $date_depot;
       public $date_reponse;
       public $statut;            // Préparation/Déposé/Accepté/Refusé/Versé
       public $echeances = array();
       public $justificatifs = array();
       
       // Méthodes spécifiques
       public function generateDossierFinancement() { ... }
       public function addJustificatif($doc_id, $type) { ... }
       public function updateStatus($new_status, $comment) { ... }
   }
   ```

2. **Tableau de bord suivi Financements:**
   ```jsx
   const TableauFinancements = ({ associationId }) => {
     const { data: financements, isLoading } = useQuery(
       ['financements', associationId],
       () => fetchFinancements(associationId)
     );
     
     const calculateStats = (data) => {
       return {
         totalDemande: data.reduce((sum, f) => sum + f.montant_demande, 0),
         totalObtenu: data.reduce((sum, f) => sum + (f.montant_obtenu || 0), 0),
         enCours: data.filter(f => ['preparation', 'depose'].includes(f.statut)).length,
         acceptes: data.filter(f => f.statut === 'accepte').length,
         refuses: data.filter(f => f.statut === 'refuse').length,
       };
     };
     
     const stats = !isLoading ? calculateStats(financements) : null;
     
     return (
       <div className="financements-dashboard">
         {!isLoading && stats && (
           <div className="stats-row">
             <StatCard 
               title="Montant total demandé"
               value={formatCurrency(stats.totalDemande)}
             />
             <StatCard 
               title="Montant total obtenu"
               value={formatCurrency(stats.totalObtenu)}
               percentage={stats.totalDemande > 0 ? 
                 Math.round((stats.totalObtenu / stats.totalDemande) * 100) : 0}
             />
             <StatCard 
               title="Dossiers en cours"
               value={stats.enCours}
             />
             <StatCard 
               title="Taux de succès"
               value={`${stats.acceptes}/${stats.acceptes + stats.refuses}`}
               percentage={stats.acceptes + stats.refuses > 0 ? 
                 Math.round((stats.acceptes / (stats.acceptes + stats.refuses)) * 100) : 0}
             />
           </div>
         )}
         
         <DataTable
           data={financements || []}
           columns={[
             { header: 'Référence', accessor: 'ref_elaska' },
             { header: 'Financeur', accessor: 'financeur_nom' },
             { header: 'Type', accessor: 'type_financement' },
             { header: 'Montant', accessor: 'montant_demande', formatter: formatCurrency },
             { header: 'Statut', accessor: 'statut', formatter: formatStatut },
             { header: 'Date dépôt', accessor: 'date_depot', formatter: formatDate },
             { header: 'Actions', accessor: 'id', formatter: (id) => (
               <ActionButtons id={id} onEdit={handleEdit} onView={handleView} />
             )}
           ]}
           isLoading={isLoading}
         />
         
         <AddFinancementButton onClick={handleAddFinancement} />
       </div>
     );
   };
   ```

3. **Fonctionnalités techniques:**
   - Suivi des obligations légales (déclarations préfecture, assurances)
   - Gestion complète des instances statutaires (convocations, PV)
   - Pipeline de demandes de subvention/financement
   - Suivi du collège de membres et des renouvellements
   - Tableaux de bord financiers spécifiques
   - Calendrier des obligations réglementaires

### 4.3. Module Création d'Entreprise

Module dédié aux créateurs d'entreprise en phase de projet et de lancement.

**Spécifications techniques:**

1. **Structure de données principale:**
   ```php
   class ElaskaDossierCreation extends ElaskaDossier {
       public $type_projet;       // Commerce/Artisan/Service/etc.
       public $forme_juridique;   // EURL/SASU/SAS/etc.
       public $stade_avancement;  // Idée/Étude/Formalisation/etc.
       public $financement_prev;  // Montant nécessaire estimé
       public $apport_personnel;
       public $chiffre_prev;      // CA prévisionnel annuel
       public $aides_visees = array(); // Aides visées
       public $date_demarrage_prev;
       public $activites = array(); // Codes APE visés
       
       // Méthodes spécialisées
       public function generateBusinessPlan() { ... }
       public function calculateFinancialViability() { ... }
       public function listCompatibleAides() { ... }
   }
   
   class ElaskaAideCreation extends CommonObject {
       public $db;
       public $id;
       public $fk_dossier_creation;
       public $organisme;
       public $dispositif;
       public $montant_potentiel;
       public $conditions = array();
       public $statut;            // Éligible/Demandé/Obtenu/Refusé
       public $date_demande;
       public $date_reponse;
       public $montant_obtenu;
       
       // Méthodes
       public function checkEligibility($dossier_id) { ... }
       public function prepareDossierDemande() { ... }
       public function trackStatus() { ... }
   }
   ```

2. **Composant Timeline Parcours Création:**
   ```jsx
   const ParcoursCreation = ({ dossierId }) => {
     const { data: parcours, isLoading } = useQuery(
       ['parcours-creation', dossierId],
       () => fetchParcoursCreation(dossierId)
     );
     
     if (isLoading) return <LoadingSpinner />;
     
     // Sections du parcours création (personnalisable)
     const sections = [
       { id: 'etude', label: 'Étude de marché', icon: 'chart-line' },
       { id: 'bp', label: 'Business Plan', icon: 'file-invoice-dollar' },
       { id: 'juridique', label: 'Structure juridique', icon: 'balance-scale' },
       { id: 'financier', label: 'Plan financier', icon: 'money-bill-wave' },
       { id: 'aides', label: 'Aides & financements', icon: 'hand-holding-usd' },
       { id: 'formalites', label: 'Formalités', icon: 'file-signature' },
       { id: 'lancement', label: 'Lancement', icon: 'rocket' },
     ];
     
     return (
       <div className="parcours-creation">
         <ProgressBar 
           value={parcours.completion_percentage} 
           label="Avancement global"
         />
         
         <div className="parcours-sections">
           {sections.map(section => (
             <ParcoursSection
               key={section.id}
               icon={section.icon}
               label={section.label}
               steps={parcours.etapes.filter(e => e.section === section.id)}
               completion={calculateSectionCompletion(
                 parcours.etapes.filter(e => e.section === section.id)
               )}
               activeStep={parcours.etapes.find(
                 e => e.section === section.id && e.statut === 'en_cours'
               )}
               onStepClick={handleStepClick}
             />
           ))}
         </div>
         
         {parcours.aides_identifiees.length > 0 && (
           <AidesCreationList aides={parcours.aides_identifiees} />
         )}
       </div>
     );
   };
   ```

3. **Fonctionnalités techniques:**
   - Modèles de parcours création adaptés par secteur
   - Suivi des démarches administratives de création
   - Gestion des aides à la création (détection, demande, suivi)
   - Outils simplifiés de business plan et prévisionnel
   - Suivi des relations avec financeurs/banques
   - Collection documents constitutifs
   - Tableau de bord de lancement

### 4.4. Module Conseil & Gestion TPE/PME

Module dédié à l'accompagnement des TPE/PME pour leurs démarches et leur gestion.

**Spécifications techniques:**

1. **Structures de données spécifiques:**
   ```php
   // Gestion des contrats fournisseurs délégués
   class ElaskaContratFournisseur extends CommonObject {
       public $db;
       public $id;
       public $ref_elaska;        // Format "eLSK-CFD-YYYY-NNN"
       public $fk_soc_client;     // Entreprise cliente
       public $fk_soc_fournisseur; // Fournisseur
       public $type_contrat;      // Energie/Telecom/Assurance/etc.
       public $reference_contrat;
       public $date_debut;
       public $date_fin;
       public $montant_annuel;
       public $periodicite;       // Mensuel/Trimestriel/Annuel
       public $statut;            // Actif/Résilié/En transfert
       public $conditions_resiliation;
       public $date_alerte_reconduction;
       public $notes_negociation;
       
       // Méthodes
       public function generateResiliationCourrier() { ... }
       public function calculateOptimisationPotentielle() { ... }
       public function initiateSwitchProcedure($new_supplier_id) { ... }
   }
   
   // Suivi obligations RH/fiscales
   class ElaskaObligationEntreprise extends CommonObject {
       public $db;
       public $id;
       public $fk_soc;            // Entreprise
       public $type_obligation;   // DSN/TVA/IS/CFE/etc.
       public $periodicite;       // Mensuelle/Trimestrielle/Annuelle
       public $date_prochaine;
       public $responsable;       // Cabinet/Entreprise
       public $statut_periode;    // À faire/En cours/Complété
       public $historique = array(); // Périodes passées
       public $documents = array();
       
       // Méthodes
       public function generateReminderNotification() { ... }
       public function markCompleted($periode, $date_depot) { ... }
       public function calculateNextDueDate() { ... }
   }
   ```

2. **Tableau de bord Contrats Délégués:**
   ```jsx
   const ContratsDelegueDashboard = ({ clientId }) => {
     const { data: contrats, isLoading } = useQuery(
       ['contrats-delegues', clientId],
       () => fetchContratsDelegues(clientId)
     );
     
     const calculateEconomies = (data) => {
       return data.reduce((sum, c) => sum + (c.economie_realisee || 0), 0);
     };
     
     const groupByType = (data) => {
       return data.reduce((acc, c) => {
         if (!acc[c.type_contrat]) acc[c.type_contrat] = [];
         acc[c.type_contrat].push(c);
         return acc;
       }, {});
     };
     
     // Notifications pour contrats proches reconduction
     const prochainesReconductions = !isLoading ? 
       contrats
         .filter(c => {
           const alertDate = new Date(c.date_alerte_reconduction);
           const today = new Date();
           return alertDate > today && 
                  alertDate <= new Date(today.setDate(today.getDate() + 60));
         })
         .sort((a, b) => 
           new Date(a.date_alerte_reconduction) - new Date(b.date_alerte_reconduction)
         ) : [];
     
     return (
       <div className="contrats-delegues-dashboard">
         {!isLoading && (
           <>
             <div className="stats-summary">
               <StatCard 
                 title="Contrats gérés"
                 value={contrats.length}
                 icon="file-contract"
               />
               <StatCard 
                 title="Économies réalisées"
                 value={formatCurrency(calculateEconomies(contrats))}
                 icon="euro-sign"
                 positive
               />
               <StatCard
                 title="Reconductions à prévoir"
                 value={prochainesReconductions.length}
                 icon="calendar-alt"
                 alert={prochainesReconductions.length > 0}
               />
             </div>
             
             {prochainesReconductions.length > 0 && (
               <AlertBox title="Reconductions à surveiller">
                 {prochainesReconductions.map(c => (
                   <AlertItem
                     key={c.id}
                     title={`${c.fournisseur_nom} - ${c.type_contrat}`}
                     subtitle={`Date limite: ${formatDate(c.date_alerte_reconduction)}`}
                     onClick={() => handleContratClick(c.id)}
                   />
                 ))}
               </AlertBox>
             )}
             
             <ContratCategories
               categories={groupByType(contrats)}
               onCategoryClick={handleCategoryClick}
             />
           </>
         )}
       </div>
     );
   };
   ```

3. **Calendrier Obligations Fiscales/Sociales:**
   ```jsx
   const ObligationsCalendar = ({ clientId, month, year }) => {
     const { data: obligations } = useQuery(
       ['obligations', clientId, month, year],
       () => fetchObligations(clientId, month, year)
     );
     
     const renderCalendarDay = (day) => {
       const dateStr = `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
       const dayObligations = obligations?.filter(o => 
         o.date_prochaine === dateStr
       );
       
       return (
         <div className={`calendar-day ${dayObligations?.length ? 'has-obligations' : ''}`}>
           <span className="day-number">{day}</span>
           {dayObligations?.map(o => (
             <ObligationPill
               key={o.id}
               type={o.type_obligation}
               status={o.statut_periode}
               onClick={() => handleObligationClick(o.id)}
             />
           ))}
         </div>
       );
     };
     
     // Generate calendar grid...
     
     return (
       <div className="obligations-calendar">
         <MonthSelector
           month={month}
           year={year}
           onChange={handleMonthChange}
         />
         
         <div className="calendar-grid">
           {/* Render days of week header */}
           {/* Render calendar days with obligations */}
         </div>
         
         <ObligationLegend />
       </div>
     );
   };
   ```

4. **Fonctionnalités techniques:**
   - Gestion délégation contrats fournisseurs
   - Suivi obligations fiscales, sociales et réglementaires
   - Tableau de bord de pilotage TPE
   - Alertes intelligentes sur échéances fiscales/sociales
   - Comparateurs contrats (énergie, télécom, assurances)
   - Outils de diagnostic optimisation charges
   - Workflow rappels déclaratifs personnalisés

### 4.5. Module Conseil en Gestion de Patrimoine

Module dédié à la gestion patrimoniale des clients particuliers et professionnels.

**Spécifications techniques:**

1. **Structures de données principales:**
   ```php
   // Bilan patrimonial global
   class ElaskaBilanPatrimonial extends CommonObject {
       public $db;
       public $id;
       public $ref_elaska;        // Format "eLSK-PAT-YYYY-NNN"
       public $fk_soc;            // Client (particulier/pro)
       public $date_realisation;
       public $situation_familiale;
       public $revenus_annuels;
       public $charges_fixes;
       public $capacite_epargne;
       public $actifs_immobiliers = array();
       public $actifs_financiers = array();
       public $actifs_professionnels = array();
       public $passifs = array();  // Crédits et dettes
       public $objectifs = array(); // Objectifs patrimoniaux
       public $preconisations = array();
       public $statut;            // Brouillon/Finalisé/Présenté
       
       // Méthodes d'analyse
       public function calculateNetWorth() { ... }
       public function analyzeAllocation() { ... }
       public function identifyOptimisationAxes() { ... }
       public function generateRecommendations() { ... }
   }
   
   // Contrat d'assurance
   class ElaskaContratAssurance extends CommonObject {
       public $db;
       public $id;
       public $ref_elaska;        // Format "eLSK-ASS-YYYY-NNN"
       public $fk_soc_client;
       public $fk_soc_assureur;
       public $type_contrat;      // Vie/IARD/Prévoyance/etc.
       public $reference_contrat;
       public $date_souscription;
       public $date_effet;
       public $date_echeance;
       public $prime_annuelle;
       public $fractionnement;    // Mensuel/Trimestriel/Annuel
       public $capitaux_garantis = array();
       public $beneficiaires = array();
       public $valeur_rachat;     // Pour assurance-vie
       public $supports = array(); // UC, fonds euros, etc.
       public $arbitrages = array();
       public $clause_beneficiaire;
       public $avenants = array();
       
       // Méthodes
       public function calculatePerformance() { ... }
       public function analyseFiscalite() { ... }
       public function prepareArbitrage($from_support, $to_support, $amount) { ... }
   }
   
   // Dossier de crédit
   class ElaskaCredit extends CommonObject {
       public $db;
       public $id;
       public $ref_elaska;        // Format "eLSK-CRE-YYYY-NNN"
       public $fk_soc_client;
       public $fk_soc_preteur;
       public $type_credit;       // Immo/Conso/Pro
       public $objet_financement;
       public $montant_demande;
       public $duree_mois;
       public $taux_propose;
       public $mensualite;
       public $assurance_credit;
       public $garanties = array();
       public $statut;            // Simulation/Demande/Accord/Refus/Débloqué
       public $date_demande;
       public $date_decision;
       public $date_deblocage;
       public $documents = array();
       public $commentaires = array();
       
       // Méthodes
       public function calculateLoanCapacity() { ... }
       public function simulateAlternatives() { ... }
       public function prepareLoanApplication() { ... }
   }
   
   // Gestion des sinistres
   class ElaskaSinistre extends CommonObject {
       public $db;
       public $id;
       public $ref_elaska;        // Format "eLSK-SIN-YYYY-NNN"
       public $fk_soc_client;
       public $fk_contrat_assurance;
       public $date_sinistre;
       public $type_sinistre;
       public $description;
       public $garanties_activees = array();
       public $date_declaration;
       public $montant_reclame;
       public $statut;            // Déclaré/En instruction/Accepté/Refusé/Indemnisé
       public $montant_propose;
       public $montant_final;
       public $date_reglement;
       public $interlocuteurs = array(); // Experts, assureurs
       public $timeline = array(); // Étapes procédure
       public $documents = array();
       
       // Méthodes
       public function declareSinistre() { ... }
       public function addExpertise($expert_nom, $date, $observations) { ... }
       public function contestProposal($motifs, $contre_proposition) { ... }
   }
   ```

2. **Composant Vue Synthétique Patrimoine:**
   ```jsx
   const PatrimoineSynthese = ({ clientId }) => {
     const { data: patrimoine, isLoading } = useQuery(
       ['patrimoine-synthese', clientId],
       () => fetchPatrimoineSynthese(clientId)
     );
     
     if (isLoading) return <LoadingSpinner />;
     
     // Calculer la répartition du patrimoine
     const calculateAllocation = () => {
       const total = patrimoine.actifs.reduce((sum, a) => sum + a.valeur, 0);
       return {
         immobilier: patrimoine.actifs
           .filter(a => a.type === 'immobilier')
           .reduce((sum, a) => sum + a.valeur, 0) / total * 100,
         financier: patrimoine.actifs
           .filter(a => a.type === 'financier')
           .reduce((sum, a) => sum + a.valeur, 0) / total * 100,
         professionnel: patrimoine.actifs
           .filter(a => a.type === 'professionnel')
           .reduce((sum, a) => sum + a.valeur, 0) / total * 100,
         autres: patrimoine.actifs
           .filter(a => a.type === 'autre')
           .reduce((sum, a) => sum + a.valeur, 0) / total * 100,
       };
     };
     
     const allocation = calculateAllocation();
     
     return (
       <div className="patrimoine-synthese">
         <div className="key-figures">
           <KeyFigureCard
             title="Patrimoine Net"
             value={formatCurrency(patrimoine.actif_net)}
             evolution={patrimoine.evolution_annuelle}
           />
           <KeyFigureCard
             title="Revenus Annuels"
             value={formatCurrency(patrimoine.revenus)}
           />
           <KeyFigureCard
             title="Capacité d'épargne"
             value={formatCurrency(patrimoine.capacite_epargne)}
             subtitle={`${patrimoine.taux_epargne.

Je vais terminer et livrer le cahier des charges technique complet.

```jsx
toFixed(1)}%`}
           />
         </div>
         
         <div className="allocation-chart">
           <h3>Répartition du Patrimoine</h3>
           <PieChart
             data={[
               { name: 'Immobilier', value: allocation.immobilier, color: '#4285F4' },
               { name: 'Financier', value: allocation.financier, color: '#34A853' },
               { name: 'Professionnel', value: allocation.professionnel, color: '#FBBC05' },
               { name: 'Autres', value: allocation.autres, color: '#EA4335' },
             ]}
           />
         </div>
         
         <div className="portfolio-summary">
           <h3>Synthèse des Actifs</h3>
           <div className="actifs-grid">
             {patrimoine.actifs.map(actif => (
               <ActifCard
                 key={actif.id}
                 type={actif.type}
                 label={actif.libelle}
                 value={formatCurrency(actif.valeur)}
                 details={actif.details}
                 onClick={() => handleActifClick(actif.id)}
               />
             ))}
           </div>
         </div>
         
         <div className="passifs-summary">
           <h3>Synthèse des Passifs</h3>
           <div className="passifs-grid">
             {patrimoine.passifs.map(passif => (
               <PassifCard
                 key={passif.id}
                 type={passif.type}
                 label={passif.libelle}
                 value={formatCurrency(passif.montant_restant)}
                 progress={100 - (passif.montant_restant / passif.montant_initial * 100)}
                 onClick={() => handlePassifClick(passif.id)}
               />
             ))}
           </div>
         </div>
       </div>
     );
   };
   ```

3. **Composant Tableau de bord Assurances:**
   ```jsx
   const TableauAssurances = ({ clientId }) => {
     const { data: contrats, isLoading } = useQuery(
       ['contrats-assurance', clientId],
       () => fetchContratsAssurance(clientId)
     );
     
     if (isLoading) return <LoadingSpinner />;
     
     // Grouper par type d'assurance
     const groupByType = () => {
       return contrats.reduce((acc, contrat) => {
         if (!acc[contrat.type_contrat]) acc[contrat.type_contrat] = [];
         acc[contrat.type_contrat].push(contrat);
         return acc;
       }, {});
     };
     
     const groupedContrats = groupByType();
     
     return (
       <div className="assurances-dashboard">
         <div className="assurances-stats">
           <StatCard
             title="Total Contrats"
             value={contrats.length}
             icon="shield-alt"
           />
           <StatCard
             title="Primes Annuelles"
             value={formatCurrency(
               contrats.reduce((sum, c) => sum + c.prime_annuelle, 0)
             )}
             icon="euro-sign"
           />
           <StatCard
             title="À Revoir"
             value={contrats.filter(c => c.a_optimiser).length}
             icon="exclamation-triangle"
             alert={contrats.filter(c => c.a_optimiser).length > 0}
           />
         </div>
         
         {Object.keys(groupedContrats).map(type => (
           <div key={type} className="assurance-category">
             <h3>
               <i className={`fas fa-${getAssuranceTypeIcon(type)}`}></i>
               {getAssuranceTypeLabel(type)}
             </h3>
             
             <div className="contracts-grid">
               {groupedContrats[type].map(contrat => (
                 <AssuranceContratCard
                   key={contrat.id}
                   contrat={contrat}
                   onClick={() => handleContratClick(contrat.id)}
                 />
               ))}
             </div>
           </div>
         ))}
         
         <div className="action-buttons">
           <button onClick={handleAddContrat}>
             <i className="fas fa-plus"></i> Ajouter un contrat
           </button>
           <button onClick={handleCompareContrats}>
             <i className="fas fa-balance-scale"></i> Comparer
           </button>
           <button onClick={handleOptimiserContrats}>
             <i className="fas fa-search-dollar"></i> Analyser / Optimiser
           </button>
         </div>
       </div>
     );
   };
   ```

4. **Fonctionnalités techniques:**
   - Modélisation du patrimoine global (actifs, passifs, revenus)
   - Portefeuille de contrats d'assurance multi-compagnies
   - Gestion complète des crédits (simulation, demande, suivi)
   - Suivi des sinistres de A à Z
   - Simulation fiscale et patrimoniale
   - Tableaux de bord dynamiques avec visualisations
   - Workflow d'audit patrimonial
   - Alertes sur rendements et opportunités de renégociation

### 4.6. Module Abonnements Clients

Module dédié à la gestion des contrats d'abonnement aux services d'eLaska-ESaiko.

**Spécifications techniques:**

1. **Structure de données principale:**
   ```php
   class ElaskaAbonnement extends CommonObject {
       public $db;
       public $id;
       public $ref_elaska;        // Format "eLSK-ABO-YYYY-NNN"
       public $fk_soc;            // Client
       public $fk_user_gestionnaire;
       public $libelle;
       public $description;
       public $date_debut;
       public $date_fin;          // Null si tacite reconduction
       public $tacite_reconduction;
       public $periodicite;       // Mensuel/Trimestriel/Annuel
       public $montant_periode;
       public $services_inclus = array(); // Détail services
       public $pack_type;         // Essentiel/Premium/Sur-mesure
       public $heures_incluses;   // Heures de service incluses
       public $heures_consommees; // Suivi conso
       public $documents = array();
       public $statut;            // Brouillon/Actif/Suspendu/Résilié
       public $date_prochain_paiement;
       public $date_dernier_paiement;
       public $mode_paiement;
       public $remise_commerciale;
       
       // Méthodes
       public function renewSubscription($months) { ... }
       public function addHoursConsumed($hours, $dossier_id) { ... }
       public function generateInvoice($period) { ... }
       public function calculateRemainingHours() { ... }
   }
   ```

2. **Composant Suivi Consommation Heures:**
   ```jsx
   const AbonnementConsommation = ({ abonnementId }) => {
     const { data: abonnement, isLoading } = useQuery(
       ['abonnement', abonnementId],
       () => fetchAbonnement(abonnementId)
     );
     
     const { data: consommation, isLoading: loadingConso } = useQuery(
       ['consommation', abonnementId],
       () => fetchConsommationAbonnement(abonnementId)
     );
     
     if (isLoading || loadingConso) return <LoadingSpinner />;
     
     const heuresRestantes = abonnement.heures_incluses - abonnement.heures_consommees;
     const pourcentageConsommation = Math.min(
       (abonnement.heures_consommees / abonnement.heures_incluses) * 100, 
       100
     );
     
     // Calculer consommation par mois sur les 6 derniers mois
     const derniersMois = consommation.historique_mensuel
       .slice(-6)
       .reverse();
     
     return (
       <div className="abonnement-consommation">
         <div className="stats-row">
           <StatCard 
             title="Heures Incluses"
             value={`${abonnement.heures_incluses}h`}
             icon="clock"
           />
           <StatCard 
             title="Heures Consommées"
             value={`${abonnement.heures_consommees.toFixed(1)}h`}
             icon="hourglass-half"
           />
           <StatCard 
             title="Heures Restantes"
             value={`${heuresRestantes.toFixed(1)}h`}
             icon="hourglass-end"
             alert={heuresRestantes < 5}
           />
         </div>
         
         <div className="progress-container">
           <ProgressBar 
             percentage={pourcentageConsommation} 
             label="Consommation"
             color={getColorByPercentage(pourcentageConsommation)}
           />
         </div>
         
         <div className="consumption-chart">
           <h3>Évolution de la consommation</h3>
           <BarChart
             data={derniersMois.map(m => ({
               month: formatMonthYear(m.mois),
               value: m.heures_consommees
             }))}
             xKey="month"
             yKey="value"
             color="#4285F4"
             unit="h"
           />
         </div>
         
         <div className="consumption-breakdown">
           <h3>Répartition par service</h3>
           <TableauRepartition data={consommation.repartition_services} />
         </div>
         
         {heuresRestantes < 5 && (
           <AlertBox title="Attention">
             Votre forfait d'heures est presque épuisé. 
             <button onClick={() => handleComplement()}>
               Commander un complément d'heures
             </button>
           </AlertBox>
         )}
       </div>
     );
   };
   ```

3. **Logique de facturation automatique:**
   ```php
   class ElaskaAbonnementBilling {
       private $db;
       
       public function __construct($db) {
           $this->db = $db;
       }
       
       /**
        * Génère les factures d'abonnement pour la période donnée
        * @param string $period Format YYYY-MM
        */
       public function generateMonthlyInvoices($period) {
           // Récupérer les abonnements actifs avec échéance dans la période
           $sql = "SELECT rowid FROM llx_elaska_abonnement 
                   WHERE statut = 'actif' 
                   AND DATE_FORMAT(date_prochain_paiement, '%Y-%m') = '".$period."'";
           $result = $this->db->query($sql);
           
           $processed = 0;
           $errors = 0;
           
           if ($result) {
               $num = $this->db->num_rows($result);
               $i = 0;
               
               while ($i < $num) {
                   $obj = $this->db->fetch_object($result);
                   try {
                       $abonnement = new ElaskaAbonnement($this->db);
                       $abonnement->fetch($obj->rowid);
                       
                       // Générer la facture
                       $invoice_id = $abonnement->generateInvoice($period);
                       
                       // Mettre à jour la date du prochain paiement
                       $abonnement->updateNextPaymentDate();
                       
                       $processed++;
                   } catch (Exception $e) {
                       $errors++;
                       // Log error
                   }
                   $i++;
               }
           }
           
           return [
               'processed' => $processed,
               'errors' => $errors
           ];
       }
       
       /**
        * Vérifie les abonnements en fin de période et gère les renouvellements
        */
       public function handleSubscriptionRenewals() {
           // Récupérer les abonnements qui arrivent à échéance dans 30 jours
           $date = dol_now() + (30 * 24 * 3600);
           $expiry_date = dol_print_date($date, '%Y-%m-%d');
           
           $sql = "SELECT rowid FROM llx_elaska_abonnement 
                   WHERE date_fin = '".$expiry_date."'";
           
           $result = $this->db->query($sql);
           
           if ($result) {
               $num = $this->db->num_rows($result);
               $i = 0;
               
               while ($i < $num) {
                   $obj = $this->db->fetch_object($result);
                   $abonnement = new ElaskaAbonnement($this->db);
                   $abonnement->fetch($obj->rowid);
                   
                   // Envoyer notification de fin d'abonnement
                   $this->sendRenewalNotification($abonnement);
                   
                   // Si tacite reconduction, planifier le renouvellement
                   if ($abonnement->tacite_reconduction) {
                       // Créer une tâche de renouvellement pour le jour d'expiration
                       $this->scheduleRenewalTask($abonnement);
                   }
                   
                   $i++;
               }
           }
       }
       
       // Autres méthodes utilitaires...
   }
   ```

4. **Fonctionnalités techniques:**
   - Modèles d'abonnements packagés et sur-mesure
   - Gestion des périodicités et tacite reconduction
   - Suivi des heures incluses/consommées avec alertes
   - Génération automatique des factures périodiques
   - Gestion des renouvellements et fins de contrat
   - Tableaux de bord de consommation et rentabilité
   - Facturation des dépassements d'heures
   - Reporting client sur utilisation des services

### 4.7. Module Recouvrements

Module dédié à la gestion des dossiers de recouvrement de créances pour les clients.

**Spécifications techniques:**

1. **Structure de données principale:**
   ```php
   class ElaskaRecouvrement extends CommonObject {
       public $db;
       public $id;
       public $ref_elaska;        // Format "eLSK-REC-YYYY-NNN"
       public $fk_soc_client;     // Client qui nous mandate
       public $type_creance;      // Commercial/Locatif/Personnel
       public $fk_soc_debiteur;   // Débiteur (tiers)
       public $montant_initial;
       public $montant_frais;
       public $montant_total;     // Initial + frais
       public $montant_recouvre;  // Sommes récupérées
       public $date_creance;
       public $date_echeance;
       public $justificatifs = array(); // Factures, contrats
       public $demarches = array();  // Actions entreprises
       public $statut;            // Ouvert/Mise en demeure/Contentieux/Recouvré/Abandonné
       public $probabilite;       // 1-5 étoiles
       public $commission_cabinet; // % ou montant fixe
       public $commentaires = array();
       
       // Méthodes
       public function calculateRemainingAmount() { ... }
       public function addPayment($date, $amount, $mode) { ... }
       public function generateLegalLetter($type) { ... }
       public function addProcedureStep($type, $date, $comment) { ... }
   }
   
   class ElaskaDemarcheRecouvrement extends CommonObject {
       public $db;
       public $id;
       public $fk_recouvrement;
       public $type_demarche;     // Relance/LRAR/Huissier/Contentieux
       public $date;
       public $description;
       public $cout;
       public $reponse_obtenue;
       public $document_genere;   // ID document
       public $statut;            // Planifiée/Effectuée/Échec
       public $resultat;
       
       // Méthodes
       public function executeAction() { ... }
       public function scheduleNextAction() { ... }
       public function recordResponse($response_text, $success) { ... }
   }
   ```

2. **Composant Tableau de Bord Recouvrements:**
   ```jsx
   const RecouvrementsDashboard = ({ clientId }) => {
     const { data: recouvrements, isLoading } = useQuery(
       ['recouvrements', clientId],
       () => fetchRecouvrements(clientId)
     );
     
     if (isLoading) return <LoadingSpinner />;
     
     const calculateStats = () => {
       const total = recouvrements.reduce((sum, r) => sum + r.montant_total, 0);
       const recouvre = recouvrements.reduce((sum, r) => sum + r.montant_recouvre, 0);
       const enCours = recouvrements.filter(r => 
         ['ouvert', 'mise_en_demeure', 'contentieux'].includes(r.statut)
       ).length;
       const succes = recouvrements.filter(r => r.statut === 'recouvre').length;
       const tauxReussite = recouvrements.length > 0 ? 
         (succes / recouvrements.length) * 100 : 0;
       const tauxRecouvrement = total > 0 ? (recouvre / total) * 100 : 0;
       
       return { total, recouvre, enCours, succes, tauxReussite, tauxRecouvrement };
     };
     
     const stats = calculateStats();
     
     const groupByStatus = () => {
       return recouvrements.reduce((acc, rec) => {
         if (!acc[rec.statut]) acc[rec.statut] = [];
         acc[rec.statut].push(rec);
         return acc;
       }, {});
     };
     
     const groupedRecouvrements = groupByStatus();
     const statusOrder = ['ouvert', 'mise_en_demeure', 'contentieux', 'recouvre', 'abandonne'];
     
     return (
       <div className="recouvrements-dashboard">
         <div className="stats-row">
           <StatCard 
             title="Montant Total"
             value={formatCurrency(stats.total)}
             icon="file-invoice-dollar"
           />
           <StatCard 
             title="Montant Recouvré"
             value={formatCurrency(stats.recouvre)}
             percentage={stats.tauxRecouvrement}
             icon="hand-holding-usd"
             positive
           />
           <StatCard 
             title="Dossiers en Cours"
             value={stats.enCours}
             icon="spinner"
           />
           <StatCard 
             title="Taux de Réussite"
             value={`${stats.tauxReussite.toFixed(1)}%`}
             icon="trophy"
           />
         </div>
         
         <RecouvrementsPieChart
           totalAmount={stats.total}
           recoveredAmount={stats.recouvre}
         />
         
         {statusOrder.map(status => {
           if (!groupedRecouvrements[status] || groupedRecouvrements[status].length === 0) return null;
           return (
             <div key={status} className="recouvrement-status-section">
               <h3>{getRecouvrementStatusLabel(status)}</h3>
               <div className="recouvrements-grid">
                 {groupedRecouvrements[status].map(rec => (
                   <RecouvrementCard
                     key={rec.id}
                     recouvrement={rec}
                     onClick={() => handleRecouvrementClick(rec.id)}
                   />
                 ))}
               </div>
             </div>
           );
         })}
         
         <div className="action-buttons">
           <button onClick={handleAddRecouvrement}>
             <i className="fas fa-plus"></i> Nouveau dossier
           </button>
           <button onClick={handleBulkActions}>
             <i className="fas fa-tasks"></i> Actions groupées
           </button>
         </div>
       </div>
     );
   };
   ```

3. **Générateur de documents juridiques:**
   ```php
   class ElaskaRecouvrementDocument {
       private $db;
       private $recouvrement;
       private $templates = array(
           'relance_simple' => 'templates/recouvrements/relance_simple.docx',
           'mise_en_demeure' => 'templates/recouvrements/mise_en_demeure.docx',
           'commandement' => 'templates/recouvrements/commandement.docx',
           'injonction' => 'templates/recouvrements/injonction.docx',
       );
       
       public function __construct($db, $recouvrement) {
           $this->db = $db;
           $this->recouvrement = $recouvrement;
       }
       
       /**
        * Génère un document juridique basé sur le type et les données du recouvrement
        * @param string $doc_type Type de document à générer
        * @return int ID du document généré
        */
       public function generateDocument($doc_type) {
           // Vérifier que le type est supporté
           if (!array_key_exists($doc_type, $this->templates)) {
               throw new Exception('Type de document non supporté: ' . $doc_type);
           }
           
           // Récupérer les données nécessaires
           $client = new Societe($this->db);
           $client->fetch($this->recouvrement->fk_soc_client);
           
           $debiteur = new Societe($this->db);
           $debiteur->fetch($this->recouvrement->fk_soc_debiteur);
           
           // Préparer les variables de remplacement
           $vars = array(
               '{DATE}' => dol_print_date(dol_now(), 'day'),
               '{CLIENT_NOM}' => $client->name,
               '{CLIENT_ADRESSE}' => $client->address,
               '{CLIENT_CP}' => $client->zip,
               '{CLIENT_VILLE}' => $client->town,
               '{DEBITEUR_NOM}' => $debiteur->name,
               '{DEBITEUR_ADRESSE}' => $debiteur->address,
               '{DEBITEUR_CP}' => $debiteur->zip,
               '{DEBITEUR_VILLE}' => $debiteur->town,
               '{MONTANT}' => price($this->recouvrement->montant_total),
               '{MONTANT_LETTRE}' => $this->numberToWords($this->recouvrement->montant_total),
               '{DATE_CREANCE}' => dol_print_date($this->recouvrement->date_creance, 'day'),
               '{DATE_ECHEANCE}' => dol_print_date($this->recouvrement->date_echeance, 'day'),
               '{REF_CREANCE}' => $this->recouvrement->ref_elaska,
               // Etc.
           );
           
           // Générer le document
           return $this->processTemplate(
               $this->templates[$doc_type], 
               'RECOUVREMENT_' . strtoupper($doc_type) . '_' . $this->recouvrement->ref_elaska, 
               $vars
           );
       }
       
       /**
        * Traite un template pour remplacer les variables et générer le document final
        * @return int ID du document généré dans la GED
        */
       private function processTemplate($template_path, $output_name, $vars) {
           // Implémentation avec librairie de traitement docx
           // ...
       }
       
       /**
        * Convertit un nombre en lettres (pour montants juridiques)
        */
       private function numberToWords($number) {
           // Implémentation de l'algorithme de conversion
           // ...
       }
   }
   ```

4. **Fonctionnalités techniques:**
   - Workflow de recouvrement configurable
   - Modèles de documents juridiques prêts à l'emploi
   - Suivi des échéanciers de paiement
   - Calcul automatique des intérêts de retard
   - Génération de courriers LRAR
   - Gestion des commissions de recouvrement
   - Tableau de bord de performance des recouvrements
   - Alertes sur délais de prescription

### 4.8. Module Prospection & CRM

Module dédié à la gestion des prospects, leads et opportunités commerciales.

**Spécifications techniques:**

1. **Structure de données principale:**
   ```php
   class ElaskaOpportunite extends CommonObject {
       public $db;
       public $id;
       public $ref_elaska;        // Format "eLSK-OPP-YYYY-NNN"
       public $titre;
       public $fk_soc_prospect;   // Lien prospect (tiers)
       public $fk_user_responsable;
       public $source;            // Web/Téléphone/Salon/Apporteur/etc.
       public $fk_soc_apporteur;  // Si source = Apporteur
       public $type_besoin;       // Admin/Patrimoine/Fiscalité/etc.
       public $description;
       public $montant_estime;
       public $probabilite;       // 0-100%
       public $etape;             // Qualification/Proposition/Négociation/Gagné/Perdu
       public $date_creation;
       public $date_cloture_prevue;
       public $date_cloture_reelle;
       public $commentaires = array();
       public $interactions = array();
       public $tags = array();
       public $documents = array();
       
       // Méthodes
       public function moveToNextStage() { ... }
       public function calculateScore() { ... }
       public function convertToClient() { ... }
       public function getConversionRate() { ... }
   }
   
   class ElaskaInteractionCRM extends CommonObject {
       public $db;
       public $id;
       public $fk_opportunite;
       public $type;              // Email/Appel/RDV/etc.
       public $date;
       public $duree;             // En minutes (pour RDV/Appel)
       public $description;
       public $resultat;
       public $suite_a_donner;
       public $fk_user_createur;
       public $documents = array();
       
       // Méthodes
       public function scheduleFollowUp($date, $type) { ... }
       public function linkToCalendar() { ... }
       public function sendRecap() { ... }
   }
   
   class ElaskaApporteurAffaires extends CommonObject {
       public $db;
       public $id;
       public $fk_soc;            // Lien tiers apporteur
       public $contrat_cadre;     // Référence contrat
       public $date_debut;
       public $date_fin;
       public $statut;            // Actif/Inactif
       public $taux_commission;   // % de commission standard
       public $commissions_variables = array(); // Commission par type d'offre
       public $montant_verse;     // Total commissions versées
       public $montant_a_verser;  // Commissions à payer
       public $leads = array();   // Opportunités apportées
       public $conversions = array(); // Opportunités converties
       
       // Méthodes
       public function calculateCommission($opportunity_id) { ... }
       public function generateCommissionReport() { ... }
       public function processPayment($amount, $period) { ... }
   }
   ```

2. **Composant Pipeline CRM:**
   ```jsx
   const OpportunitiesPipeline = ({ userId = null }) => {
     // Si userId est fourni, filtre pour ce commercial, sinon toutes les opportunités
     const { data: opportunities, isLoading } = useQuery(
       ['opportunities', userId],
       () => fetchOpportunities(userId)
     );
     
     if (isLoading) return <LoadingSpinner />;
     
     // Définir les étapes du pipeline
     const stages = [
       { id: 'qualification', label: 'Qualification', icon: 'filter' },
       { id: 'proposition', label: 'Proposition', icon: 'file-contract' },
       { id: 'negotiation', label: 'Négociation', icon: 'handshake' },
       { id: 'won', label: 'Gagné', icon: 'trophy' },
       { id: 'lost', label: 'Perdu', icon: 'times-circle' }
     ];
     
     // Trier les opportunités par étape
     const opportunitiesByStage = stages.reduce((acc, stage) => {
       acc[stage.id] = opportunities.filter(opp => opp.etape === stage.id);
       return acc;
     }, {});
     
     // Calculer les statistiques par étape
     const calculateStageStats = (stageId) => {
       const stageOpportunities = opportunitiesByStage[stageId];
       return {
         count: stageOpportunities.length,
         value: stageOpportunities.reduce((sum, opp) => 
           sum + (opp.montant_estime * opp.probabilite / 100), 0)
       };
     };
     
     // Calculer les conversions entre étapes
     const calculateConversionRates = () => {
       // Logique de calcul des taux de conversion
       // ...
     };
     
     const conversionRates = calculateConversionRates();
     
     return (
       <div className="opportunities-pipeline">
         <div className="pipeline-header">
           <h2>Pipeline Commercial</h2>
           <div className="pipeline-filters">
             <UserSelector
               selectedUser={userId}
               onChange={handleUserChange}
             />
             <DateRangeSelector
               onChange={handleDateRangeChange}
             />
           </div>
         </div>
         
         <div className="pipeline-stats">
           <StatCard 
             title="Opportunités actives"
             value={opportunities.filter(o => !['won', 'lost'].includes(o.etape)).length}
             icon="bolt"
           />
           <StatCard 
             title="Valeur potentielle"
             value={formatCurrency(
               opportunities
                 .filter(o => !['won', 'lost'].includes(o.etape))
                 .reduce((sum, opp) => sum + (opp.montant_estime * opp.probabilite / 100), 0)
             )}
             icon="chart-line"
           />
           <StatCard 
             title="Taux de conversion"
             value={`${calculateOverallConversionRate()}%`}
             icon="percentage"
           />
         </div>
         
         <div className="pipeline-container">
           {stages.map((stage, index) => (
             <React.Fragment key={stage.id}>
               {index > 0 && (
                 <div className="pipeline-connector">
                   <div className="connector-stats">
                     {conversionRates[index - 1] && (
                       <span>{conversionRates[index - 1]}%</span>
                     )}
                   </div>
                   <div className="connector-line"></div>
                 </div>
               )}
               
               <div className="pipeline-stage">
                 <div className="stage-header">
                   <i className={`fas fa-${stage.icon}`}></i>
                   <h3>{stage.label}</h3>
                   <div className="stage-stats">
                     <span>{calculateStageStats(stage.id).count}</span>
                     <span>{formatCurrency(calculateStageStats(stage.id).value)}</span>
                   </div>
                 </div>
                 
                 <div className="stage-items">
                   {opportunitiesByStage[stage.id].map(opp => (
                     <OpportunityCard
                       key={opp.id}
                       opportunity={opp}
                       onDragStart={handleDragStart}
                       onClick={() => handleOpportunityClick(opp.id)}
                     />
                   ))}
                   
                   {stage.id !== 'won' && stage.id !== 'lost' && (
                     <AddOpportunityButton 
                       stage={stage.id} 
                       onClick={() => handleAddOpportunity(stage.id)}
                     />
                   )}
                 </div>
               </div>
             </React.Fragment>
           ))}
         </div>
       </div>
     );
   };
   ```

3. **Tableau de bord Performance Apporteurs:**
   ```jsx
   const ApporteursDashboard = () => {
     const { data: apporteurs, isLoading } = useQuery(
       'apporteurs',
       fetchApporteurs
     );
     
     if (isLoading) return <LoadingSpinner />;
     
     // Calculer les statistiques globales
     const calculateGlobalStats = () => {
       const totalLeads = apporteurs.reduce((sum, a) => sum + a.leads.length, 0);
       const totalConversions = apporteurs.reduce((sum, a) => sum + a.conversions.length, 0);
       const totalCommissions = apporteurs.reduce((sum, a) => sum + a.montant_verse + a.montant_a_verser, 0);
       const averageConversionRate = totalLeads > 0 ? 
         (totalConversions / totalLeads) * 100 : 0;
       
       return {
         totalLeads,
         totalConversions,
         totalCommissions,
         averageConversionRate
       };
     };
     
     const globalStats = calculateGlobalStats();
     
     // Calculer le classement des apporteurs par performance
     const apporteursRanking = [...apporteurs].sort((a, b) => {
       const convRateA = a.leads.length > 0 ? 
         (a.conversions.length / a.leads.length) * 100 : 0;
       const convRateB = b.leads.length > 0 ? 
         (b.conversions.length / b.leads.length) * 100 : 0;
       return convRateB - convRateA;
     }).slice(0, 5);  // Top 5
     
     return (
       <div className="apporteurs-dashboard">
         <div className="stats-row">
           <StatCard 
             title="Leads Apportés"
             value={globalStats.totalLeads}
             icon="users"
           />
           <StatCard 
             title="Taux de Conversion"
             value={`${globalStats.averageConversionRate.toFixed(1)}%`}
             icon="chart-pie"
           />
           <StatCard 
             title="Commissions"
             value={formatCurrency(globalStats.totalCommissions)}
             icon="money-bill-wave"
           />
         </div>
         
         <div className="dashboard-row">
           <div className="top-apporteurs">
             <h3>Top 5 Apporteurs</h3>
             <table className="data-table">
               <thead>
                 <tr>
                   <th>Apporteur</th>
                   <th>Leads</th>
                   <th>Conversions</th>
                   <th>Taux</th>
                   <th>Commissions</th>
                 </tr>
               </thead>
               <tbody>
                 {apporteursRanking.map(apporteur => {
                   const convRate = apporteur.leads.length > 0 ? 
                     (apporteur.conversions.length / apporteur.leads.length) * 100 : 0;
                   
                   return (
                     <tr key={apporteur.id} onClick={() => handleApporteurClick(apporteur.id)}>
                       <td>{apporteur.nom}</td>
                       <td>{apporteur.leads.length}</td>
                       <td>{apporteur.conversions.length}</td>
                       <td>{`${convRate.toFixed(1)}%`}</td>
                       <td>{formatCurrency(apporteur.montant_verse + apporteur.montant_a_verser)}</td>
                     </tr>
                   );
                 })}
               </tbody>
             </table>
           </div>
           
           <div className="commissions-chart">
             <h3>Commissions par Mois</h3>
             <BarChart
               data={getCommissionsByMonth()}
               xKey="month"
               yKey="amount"
             />
           </div>
         </div>
         
         <div className="dashboard-row">
           <div className="leads-by-source">
             <h3>Leads par Source</h3>
             <PieChart
               data={getLeadsBySource()}
             />
           </div>
           
           <div className="pending-commissions">
             <h3>Commissions à Verser</h3>
             <table className="data-table">
               <thead>
                 <tr>
                   <th>Apporteur</th>
                   <th>Montant</th>
                   <th>Actions</th>
                 </tr>
               </thead>
               <tbody>
                 {apporteurs
                   .filter(a => a.montant_a_verser > 0)
                   .sort((a, b) => b.montant_a_verser - a.montant_a_verser)
                   .map(apporteur => (
                     <tr key={apporteur.id}>
                       <td>{apporteur.nom}</td>
                       <td>{formatCurrency(apporteur.montant_a_verser)}</td>
                       <td>
                         <button 
                           onClick={() => handleProcessPayment(apporteur.id)}
                           className="btn-sm"
                         >
                           <i className="fas fa-money-bill-wave"></i> Payer
                         </button>
                       </td>
                     </tr>
                   ))}
               </tbody>
             </table>
           </div>
         </div>
       </div>
     );
   };
   ```

4. **Fonctionnalités techniques:**
   - Pipeline commercial visuel et interactif
   - Scoring des leads basé sur critères configurables
   - Workflow de conversion prospect → client
   - Gestion des interactions multi-canal
   - Suivi des apporteurs d'affaires et calcul des commissions
   - Portail limité pour apporteurs (suivi leads/commissions)
   - Rapports de performance commerciale
   - Intégration formulaires web pour capture leads

## 5. PORTAIL CLIENT SPA

### 5.1. Architecture du Portail React

Le portail client est développé comme une Single Page Application (SPA) React, hébergée sur le même serveur web que Dolibarr mais fonctionnant de manière indépendante et communiquant via API REST.

**Spécifications techniques:**

1. **Structure du projet React:**
   ```
   portail/
   ├── public/                      # Ressources statiques
   │   ├── index.html               # Point d'entrée HTML
   │   ├── favicon.ico              # Favicon
   │   └── assets/                  # Images, fonts, etc.
   ├── src/                         # Code source
   │   ├── App.jsx                  # Composant racine
   │   ├── index.jsx                # Point d'entrée JS
   │   ├── components/              # Composants réutilisables
   │   │   ├── common/              # Composants génériques
   │   │   ├── layout/              # Composants de mise en page
   │   │   └── domain/              # Composants spécifiques domaine
   │   ├── pages/                   # Conteneurs de pages
   │   ├── hooks/                   # Hooks personnalisés
   │   ├── services/                # Services API et utilitaires
   │   │   ├── api.js               # Configuration Axios
   │   │   ├── auth.js              # Gestion authentification
   │   │   └── endpoints/           # Endpoints API par domaine
   │   ├── context/                 # Contextes React
   │   ├── utils/                   # Fonctions utilitaires
   │   ├── styles/                  # Styles globaux
   │   └── constants/               # Constantes
   ├── package.json                 # Dépendances
   ├── vite.config.js               # Configuration Vite
   └── .eslintrc.js                 # Configuration ESLint
   ```

2. **Configuration du build:**
   ```js
   // vite.config.js
   import { defineConfig } from 'vite';
   import react from '@vitejs/plugin-react';
   import path from 'path';
   
   export default defineConfig({
     plugins: [react()],
     resolve: {
       alias: {
         '@': path.resolve(__dirname, './src'),
         '@components': path.resolve(__dirname, './src/components'),
         '@pages': path.resolve(__dirname, './src/pages'),
         '@hooks': path.resolve(__dirname, './src/hooks'),
         '@services': path.resolve(__dirname, './src/services'),
         '@utils': path.resolve(__dirname, './src/utils'),
         '@styles': path.resolve(__dirname, './src/styles'),
         '@context': path.resolve(__dirname, './src/context'),
       },
     },
     build: {
       outDir: 'build',
       sourcemap: process.env.NODE_ENV !== 'production',
       minify: process.env.NODE_ENV === 'production',
     },
     server: {
       proxy: {
         '/api': {
           target: 'http://localhost/dolibarr',
           changeOrigin: true,
           rewrite: (path) => path.replace(/^\/api/, '/htdocs/custom/elaska/api')
         }
       }
     }
   });
   ```

3. **Routage SPA:**
   ```jsx
   // src/App.jsx
   import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
   import { QueryClient, QueryClientProvider } from 'react-query';
   import { Suspense, lazy } from 'react';
   import { AuthProvider, useAuth } from '@context/AuthContext';
   import Layout from '@components/layout/Layout';
   import LoadingScreen from '@components/common/LoadingScreen';
   
   // Lazy-loaded pages
   const Login = lazy(() => import('@pages/Login'));
   const Dashboard = lazy(() => import('@pages/Dashboard'));
   const Dossiers = lazy(() => import('@pages/Dossiers'));
   const DossierDetail = lazy(() => import('@pages/DossierDetail'));
   const Documents = lazy(() => import('@pages/Documents'));
   const CoffreFort = lazy(() => import('@pages/CoffreFort'));
   const Messagerie = lazy(() => import('@pages/Messagerie'));
   const Echeances = lazy(() => import('@pages/Echeances'));
   const RDV = lazy(() => import('@pages/RDV'));
   const Profil = lazy(() => import('@pages/Profil'));
   const ObjectifsVie = lazy(() => import('@pages/ObjectifsVie'));
   const Patrimoine = lazy(() => import('@pages/Patrimoine'));
   const Assurances = lazy(() => import('@pages/Assurances'));
   const Credits = lazy(() => import('@pages/Credits'));
   
   // Pages associatives
   const Subventions = lazy(() => import('@pages/association/Subventions'));
   const Instances = lazy(() => import('@pages/association/Instances'));
   
   // Pages entreprises
   const ContratsGeres = lazy(() => import('@pages/entreprise/ContratsGeres'));
   const ObligationsFiscales = lazy(() => import('@pages/entreprise/ObligationsFiscales'));
   
   // Page créateurs
   const ParcoursCreation = lazy(() => import('@pages/createur/ParcoursCreation'));
   const AidesCreation = lazy(() => import('@pages/createur/AidesCreation'));
   
   const queryClient = new QueryClient({
     defaultOptions: {
       queries: {
         refetchOnWindowFocus: false,
         retry: 1,
         staleTime: 5 * 60 * 1000, // 5 minutes
       },
     },
   });
   
   // Route protégée
   const PrivateRoute = ({ children }) => {
     const { isAuthenticated, loading } = useAuth();
     
     if (loading) return <LoadingScreen />;
     
     return isAuthenticated ? children : <Navigate to="/login" />;
   };
   
   // Gestion des routes adaptées au type de client
   const ClientSpecificRoute = ({ children, requiredTypes }) => {
     const { user, loading } = useAuth();
     
     if (loading) return <LoadingScreen />;
     
     if (!user || !requiredTypes.includes(user.type_client)) {
       return <Navigate to="/dashboard" />;
     }
     
     return children;
   };
   
   const App = () => {
     return (
       <QueryClientProvider client={queryClient}>
         <AuthProvider>
           <BrowserRouter basename="/portail">
             <Suspense fallback={<LoadingScreen />}>
               <Routes>
                 <Route path="/login" element={<Login />} />
                 
                 <Route 
                   path="/" 
                   element={
                     <PrivateRoute>
                       <Layout />
                     </PrivateRoute>
                   }
                 >
                   <Route index element={<Navigate to="/dashboard" />} />
                   <Route path="dashboard" element={<Dashboard />} />
                   <Route path="dossiers" element={<Dossiers />} />
                   <Route path="dossiers/:id" element={<DossierDetail />} />
                   <Route path="documents" element={<Documents />} />
                   <Route path="coffre-fort" element={<CoffreFort />} />
                   <Route path="messagerie" element={<Messagerie />} />
                   <Route path="echeances" element={<Echeances />} />
                   <Route path="rdv" element={<RDV />} />
                   <Route path="profil" element={<Profil />} />
                   
                   {/* Routes spécifiques aux particuliers */}
                   <Route 
                     path="objectifs-vie" 
                     element={
                       <ClientSpecificRoute requiredTypes={['particulier']}>
                         <ObjectifsVie />
                       </ClientSpecificRoute>
                     } 
                   />
                   <Route 
                     path="patrimoine" 
                     element={
                       <ClientSpecificRoute requiredTypes={['particulier']}>
                         <Patrimoine />
                       </ClientSpecificRoute>
                     } 
                   />
                   <Route 
                     path="assurances" 
                     element={
                       <ClientSpecificRoute requiredTypes={['particulier', 'entreprise']}>
                         <Assurances />
                       </ClientSpecificRoute>
                     } 
                   />
                   <Route path="credits" element={<Credits />} />
                   
                   {/* Routes spécifiques aux associations */}
                   <Route 
                     path="subventions" 
                     element={
                       <ClientSpecificRoute requiredTypes={['association']}>
                         <Subventions />
                       </ClientSpecificRoute>
                     } 
                   />
                   <Route 
                     path="instances" 
                     element={
                       <ClientSpecificRoute requiredTypes={['association']}>
                         <Instances />
                       </ClientSpecificRoute>
                     } 
                   />
                   
                   {/* Routes spécifiques aux entreprises */}
                   <Route 
                     path="contrats-geres" 
                     element={
                       <ClientSpecificRoute requiredTypes={['entreprise']}>
                         <ContratsGeres />
                       </ClientSpecificRoute>
                     } 
                   />
                   <Route 
                     path="obligations-fiscales" 
                     element={
                       <ClientSpecificRoute requiredTypes={['entreprise']}>
                         <ObligationsFiscales />
                       </ClientSpecificRoute>
                     } 
                   />
                   
                   {/* Routes spécifiques aux créateurs */}
                   <Route 
                     path="parcours-creation" 
                     element={
                       <ClientSpecificRoute requiredTypes={['createur']}>
                         <ParcoursCreation />
                       </ClientSpecificRoute>
                     } 
                   />
                   <Route 
                     path="aides-creation" 
                     element={
                       <ClientSpecificRoute requiredTypes={['createur']}>
                         <AidesCreation />
                       </ClientSpecificRoute>
                     } 
                   />
                 </Route>
               </Routes>
             </Suspense>
           </BrowserRouter>
         </AuthProvider>
       </QueryClientProvider>
     );
   };
   
   export default App;
   ```

4. **Gestion d'état avec React Query:**
   ```jsx
   // src/hooks/useClient.js
   import { useQuery, useMutation, useQueryClient } from 'react-query';
   import { getClientData, updateClientData } from '@services/endpoints/clients';
   
   export const useClientData = (clientId) => {
     return useQuery(
       ['client', clientId],
       () => getClientData(clientId),
       {
         enabled: !!clientId,
         staleTime: 5 * 60 * 1000, // 5 minutes
       }
     );
   };
   
   export const useUpdateClient = () => {
     const queryClient = useQueryClient();
     
     return useMutation(
       updateClientData,
       {
         onSuccess: (data, variables) => {
           queryClient.invalidateQueries(['client', variables.id]);
           // Afficher notification succès
         },
         onError: (error) => {
           // Gérer erreur et afficher notification
           console.error('Error updating client:', error);
         }
       }
     );
   };
   ```

5. **Structure dynamique du menu:**
   ```jsx
   // src/components/layout/Sidebar.jsx
   import { useAuth } from '@context/AuthContext';
   import { NavLink } from 'react-router-dom';
   
   const Sidebar = () => {
     const { user } = useAuth();
     
     // Menu commun pour tous les types de clients
     const commonMenu = [
       { path: '/dashboard', label: 'Tableau de bord', icon: 'home' },
       { path: '/dossiers', label: 'Mes dossiers', icon: 'folder-open' },
       { path: '/documents', label: 'Mes documents', icon: 'file-alt' },
       { path: '/messagerie', label: 'Messagerie', icon: 'envelope' },
       { path: '/echeances', label: 'Échéances & RDV', icon: 'calendar-alt' },
     ];
     
     // Menus spécifiques par type de client
     const specificMenus = {
       particulier: [
         { path: '/coffre-fort', label: 'Coffre-fort numérique', icon: 'lock' },
         { path: '/objectifs-vie', label: 'Mes objectifs de vie', icon: 'bullseye' },
         { path: '/patrimoine', label: 'Mon patrimoine', icon: 'chart-pie' },
         { path: '/assurances', label: 'Mes assurances', icon: 'shield-alt' },
         { path: '/credits', label: 'Mes crédits', icon: 'money-bill' },
       ],
       association: [
         { path: '/subventions', label: 'Suivi des subventions', icon: 'hand-holding-usd' },
         { path: '/instances', label: 'Instances statutaires', icon: 'users' },
       ],
       entreprise: [
         { path: '/contrats-geres', label: 'Contrats délégués', icon: 'file-contract' },
         { path: '/obligations-fiscales', label: 'Obligations fiscales', icon: 'balance-scale' },
         { path: '/assurances', label: 'Assurances professionnelles', icon: 'shield-alt' },
       ],
       createur: [
         { path: '/parcours-creation', label: 'Mon parcours création', icon: 'road' },
         { path: '/aides-creation', label: 'Aides à la création', icon: 'hands-helping' },
       ],
     };
     
     // Déterminer les éléments de menu à afficher selon le type du client
     const menuItems = [
       ...commonMenu,
       ...(user && specificMenus[user.type_client] ? specificMenus[user.type_client] : []),
     ];
     
     return (
       <div className="sidebar">
         <div className="logo-container">
           <img src="/portail/assets/logo.png" alt="eLaska" />
         </div>
         
         <nav className="sidebar-nav">
           <ul>
             {menuItems.map((item) => (
               <li key={item.path}>
                 <NavLink 
                   to={item.path} 
                   className={({ isActive }) => isActive ? 'active' : ''}
                 >
                   <i className={`fas fa-${item.icon}`}></i>
                   <span>{item.label}</span>
                 </NavLink>
               </li>
             ))}
           </ul>
         </nav>
         
         <div className="sidebar-footer">
           <NavLink to="/profil" className="profile-link">
             <i className="fas fa-user-circle"></i>
             <span>Mon profil</span>
           </NavLink>
           <button onClick={handleLogout} className="logout-button">
             <i className="fas fa-sign-out-alt"></i>
             <span>Déconnexion</span>
           </button>
         </div>
       </div>
     );
   };
   
   export default Sidebar;
   ```

### 5.2. Sections et fonctionnalités

Le portail client propose des sections et fonctionnalités adaptées à chaque type de client, avec un socle commun et des modules spécialisés.

**Spécifications techniques:**

1. **Tableau de bord adaptatif:**
   ```jsx
   // src/pages/Dashboard.jsx
   import { useAuth } from '@context/AuthContext';
   import { useQuery } from 'react-query';
   import { fetchDashboardData } from '@services/endpoints/dashboard';
   
   // Widgets spécifiques
   import DossiersActifsWidget from '@components/domain/dashboard/DossiersActifsWidget';
   import MessagesNonLusWidget from '@components/domain/dashboard/MessagesNonLusWidget';
   import EcheancesWidget from '@components/domain/dashboard/EcheancesWidget';
   import DocumentsRecentsWidget from '@components/domain/dashboard/DocumentsRecentsWidget';
   import ProchainsRdvWidget from '@components/domain/dashboard/ProchainsRdvWidget';
   
   // Widgets spécifiques Particulier
   import ObjectifsVieWidget from '@components/domain/dashboard/ObjectifsVieWidget';
   import PatrimoineWidget from '@components/domain/dashboard/PatrimoineWidget';
   
   // Widgets spécifiques Association
   import SubventionsWidget from '@components/domain/dashboard/SubventionsWidget';
   import InstancesWidget from '@components/domain/dashboard/InstancesWidget';
   
   // Widgets spécifiques Entreprise
   import ContratsWidget from '@components/domain/dashboard/ContratsWidget';
   import ObligationsWidget from '@components/domain/dashboard/ObligationsWidget';
   
   // Widgets spécifiques Créateur
   import ParcoursCreationWidget from '@components/domain/dashboard/ParcoursCreationWidget';
   import AidesCreationWidget from '@components/domain/dashboard/AidesCreationWidget';
   
   const Dashboard = () => {
     const { user } = useAuth();
     const clientId = user?.id;
     const clientType = user?.type_client;
     
     const { data, isLoading } = useQuery(
       ['dashboard', clientId],
       () => fetchDashboardData(clientId),
       { enabled: !!clientId }
     );
     
     if (isLoading) return <PageLoader />;
     
     // Widgets communs pour tous les types de clients
     const commonWidgets = (
       <>
         <DossiersActifsWidget dossiers={data.dossiers} />
         <EcheancesWidget echeances={data.echeances} />
         <MessagesNonLusWidget messages={data.messages} />
         <DocumentsRecentsWidget documents={data.documents} />
         <ProchainsRdvWidget rdv={data.rdv} />
       </>
     );
     
     // Widgets spécifiques selon le type de client
     const renderSpecificWidgets = () => {
       switch(clientType) {
         case 'particulier':
           return (
             <>
               <ObjectifsVieWidget objectifs={data.objectifs} />
               <PatrimoineWidget patrimoine={data.patrimoine} />
             </>
           );
         case 'association':
           return (
             <>
               <SubventionsWidget subventions={data.subventions} />
               <InstancesWidget instances={data.instances} />
             </>
           );
         case 'entreprise':
           return (
             <>
               <ContratsWidget contrats={data.contrats} />
               <ObligationsWidget obligations={data.obligations} />
             </>
           );
         case 'createur':
           return (
             <>
               <ParcoursCreationWidget parcours={data.parcours} />
               <AidesCreationWidget aides={data.aides} />
             </>
           );
         default:
           return null;
       }
     };
     
     return (
       <div className="dashboard-page">
         <header className="page-header">
           <h1>Tableau de bord</h1>
           <LastConnection date={data.last_connection} />
         </header>
         
         <section className="welcome-section">
           <WelcomePanel 
             userName={user?.name}
             conseillerName={data.conseiller?.name}
             conseillerPhoto={data.conseiller?.photo}
           />
           <AlertPanel alerts={data.alerts} />
         </section>
         
         <section className="widgets-grid">
           {commonWidgets}
           {renderSpecificWidgets()}
         </section>
       </div>
     );
   };
   
   export default Dashboard;
   ```

2. **Timeline de dossier interactive:**
   ```jsx
   // src/components/domain/dossier/DossierTimeline.jsx
   import { useState, useEffect } from 'react';
   import { useQuery } from 'react-query';
   import { fetchDossierTimeline } from '@services/endpoints/dossiers';
   import TimelineStep from '@components/domain/dossier/TimelineStep';
   import TimelineStepDetail from '@components/domain/dossier/TimelineStepDetail';
   
   const DossierTimeline = ({ dossierId }) => {
     const [selectedStepId, setSelectedStepId] = useState(null);
     
     const { data: timeline, isLoading, error } = useQuery(
       ['dossier-timeline', dossierId],
       () => fetchDossierTimeline(dossierId),
       { enabled: !!dossierId }
     );
     
     useEffect(() => {
       // Sélectionner automatiquement l'étape en cours
       if (timeline && !selectedStepId) {
         const currentStep = timeline.etapes.find(e => e.statut === 'en_cours');
         if (currentStep) {
           setSelectedStepId(currentStep.id);
         } else {
           // Sinon dernière étape ou première
           const lastCompletedStep = [...timeline.etapes]
             .reverse()
             .find(e => e.statut === 'terminee');
           
           setSelectedStepId(lastCompletedStep?.id || timeline.etapes[0]?.id);
         }
       }
     }, [timeline, selectedStepId]);
     
     if (isLoading) return <TimelineSkeleton />;
     if (error) return <ErrorMessage error={error} />;
     
     const getSelectedStep = () => {
       return timeline?.etapes.find(e => e.id === selectedStepId);
     };
     
     const handleStepClick = (stepId) => {
       setSelectedStepId(stepId);
     };
     
     return (
       <div className="dossier-timeline-container">
         <div className="timeline-header">
           <h3>Suivi de votre dossier</h3>
           <span className="dossier-ref">{timeline?.ref_dossier}</span>
         </div>
         
         <div className="timeline-content">
           <div className="timeline-steps">
             {timeline?.etapes.map(etape => (
               <TimelineStep
                 key={etape.id}
                 step={etape}
                 isSelected={etape.id === selectedStepId}
                 onClick={() => handleStepClick(etape.id)}
               />
             ))}
           </div>
           
           <div className="timeline
```jsx
-step-detail">
             {selectedStepId && (
               <TimelineStepDetail 
                 step={getSelectedStep()}
                 dossierType={timeline?.type_dossier}
               />
             )}
           </div>
         </div>
         
         <div className="timeline-footer">
           <div className="timeline-legend">
             <div className="legend-item">
               <span className="status-indicator completed"></span>
               <span>Terminé</span>
             </div>
             <div className="legend-item">
               <span className="status-indicator in-progress"></span>
               <span>En cours</span>
             </div>
             <div className="legend-item">
               <span className="status-indicator pending"></span>
               <span>À venir</span>
             </div>
           </div>
         </div>
       </div>
     );
   };
   
   export default DossierTimeline;
```

3. **Coffre-fort numérique sécurisé:**
   ```jsx
   // src/pages/CoffreFort.jsx
   import { useState } from 'react';
   import { useQuery, useMutation, useQueryClient } from 'react-query';
   import { fetchSecureDocuments, uploadSecureDocument } from '@services/endpoints/documents';
   import { useAuth } from '@context/AuthContext';
   import SecureAccessCode from '@components/domain/coffre-fort/SecureAccessCode';
   import SecureDocumentList from '@components/domain/coffre-fort/SecureDocumentList';
   import SecureDocumentUpload from '@components/domain/coffre-fort/SecureDocumentUpload';
   import DocumentViewer from '@components/domain/documents/DocumentViewer';
   
   const CoffreFort = () => {
     const { user } = useAuth();
     const [isVaultUnlocked, setIsVaultUnlocked] = useState(false);
     const [selectedDocId, setSelectedDocId] = useState(null);
     const queryClient = useQueryClient();
     
     // Récupération des documents du coffre-fort
     const { data: secureDocuments, isLoading } = useQuery(
       ['secure-documents', user?.id],
       () => fetchSecureDocuments(user?.id),
       { 
         enabled: !!user?.id && isVaultUnlocked,
         staleTime: 5 * 60 * 1000, // 5 minutes
         cacheTime: 0 // No cache for secure documents
       }
     );
     
     // Mutation pour upload de document
     const uploadMutation = useMutation(uploadSecureDocument, {
       onSuccess: () => {
         queryClient.invalidateQueries(['secure-documents', user?.id]);
       }
     });
     
     const handleUnlockVault = (success) => {
       setIsVaultUnlocked(success);
     };
     
     const handleDocumentSelect = (docId) => {
       setSelectedDocId(docId);
     };
     
     const handleCloseViewer = () => {
       setSelectedDocId(null);
     };
     
     const handleUpload = (formData) => {
       uploadMutation.mutate({
         clientId: user?.id,
         formData
       });
     };
     
     if (!isVaultUnlocked) {
       return (
         <div className="coffre-fort-page">
           <header className="page-header">
             <h1>Coffre-Fort Numérique Sécurisé</h1>
           </header>
           
           <div className="secure-access-container">
             <div className="secure-access-info">
               <div className="icon-container">
                 <i className="fas fa-lock fa-3x"></i>
               </div>
               <h2>Accès sécurisé</h2>
               <p>
                 Ce coffre-fort contient vos documents sensibles protégés par chiffrement 
                 renforcé. Veuillez saisir votre code d'accès pour y accéder.
               </p>
             </div>
             
             <SecureAccessCode onUnlock={handleUnlockVault} />
           </div>
         </div>
       );
     }
     
     return (
       <div className="coffre-fort-page">
         <header className="page-header">
           <h1>Coffre-Fort Numérique Sécurisé</h1>
           <div className="header-actions">
             <button 
               className="secure-lock-button"
               onClick={() => setIsVaultUnlocked(false)}
             >
               <i className="fas fa-lock"></i> Verrouiller
             </button>
           </div>
         </header>
         
         <div className="secure-vault-content">
           <div className="secure-documents-section">
             <h2>Documents sécurisés</h2>
             <p className="security-note">
               <i className="fas fa-shield-alt"></i>
               Ces documents sont chiffrés avec AES-256 et ne sont accessibles qu'à vous 
               et votre conseiller.
             </p>
             
             <SecureDocumentList 
               documents={secureDocuments || []}
               isLoading={isLoading}
               onSelectDocument={handleDocumentSelect}
             />
           </div>
           
           <div className="upload-section">
             <h3>Ajouter un document sécurisé</h3>
             <SecureDocumentUpload 
               onUpload={handleUpload} 
               isUploading={uploadMutation.isLoading}
             />
           </div>
         </div>
         
         {selectedDocId && (
           <DocumentViewer 
             documentId={selectedDocId}
             isSecureDocument={true}
             onClose={handleCloseViewer}
           />
         )}
       </div>
     );
   };
   
   export default CoffreFort;
   ```

4. **Module Objectifs de Vie (spécifique Particuliers):**
   ```jsx
   // src/pages/ObjectifsVie.jsx
   import { useState } from 'react';
   import { useQuery, useMutation, useQueryClient } from 'react-query';
   import { fetchObjectifsVie, createObjectifVie, updateObjectifVie } from '@services/endpoints/objectifs-vie';
   import { useAuth } from '@context/AuthContext';
   import ObjectifVieCard from '@components/domain/objectifs-vie/ObjectifVieCard';
   import ObjectifVieForm from '@components/domain/objectifs-vie/ObjectifVieForm';
   import ObjectifVieCategories from '@components/domain/objectifs-vie/ObjectifVieCategories';
   
   const ObjectifsVie = () => {
     const { user } = useAuth();
     const [activeCategory, setActiveCategory] = useState('tous');
     const [isFormOpen, setIsFormOpen] = useState(false);
     const [editingObjectif, setEditingObjectif] = useState(null);
     const queryClient = useQueryClient();
     
     const { data: objectifs, isLoading } = useQuery(
       ['objectifs-vie', user?.id],
       () => fetchObjectifsVie(user?.id),
       { enabled: !!user?.id }
     );
     
     const createMutation = useMutation(createObjectifVie, {
       onSuccess: () => {
         queryClient.invalidateQueries(['objectifs-vie', user?.id]);
         setIsFormOpen(false);
       }
     });
     
     const updateMutation = useMutation(updateObjectifVie, {
       onSuccess: () => {
         queryClient.invalidateQueries(['objectifs-vie', user?.id]);
         setIsFormOpen(false);
         setEditingObjectif(null);
       }
     });
     
     const handleCreateObjectif = (objectifData) => {
       createMutation.mutate({
         clientId: user?.id,
         ...objectifData
       });
     };
     
     const handleUpdateObjectif = (objectifData) => {
       updateMutation.mutate({
         ...objectifData,
         id: editingObjectif.id
       });
     };
     
     const handleEditObjectif = (objectif) => {
       setEditingObjectif(objectif);
       setIsFormOpen(true);
     };
     
     const handleCancelForm = () => {
       setIsFormOpen(false);
       setEditingObjectif(null);
     };
     
     const filterObjectifs = () => {
       if (!objectifs) return [];
       if (activeCategory === 'tous') return objectifs;
       return objectifs.filter(obj => obj.categorie === activeCategory);
     };
     
     const filteredObjectifs = filterObjectifs();
     
     return (
       <div className="objectifs-vie-page">
         <header className="page-header">
           <h1>Mes Objectifs de Vie & Projets</h1>
           <div className="header-actions">
             <button 
               className="primary-button"
               onClick={() => setIsFormOpen(true)}
               disabled={isFormOpen}
             >
               <i className="fas fa-plus"></i> Nouvel objectif
             </button>
           </div>
         </header>
         
         <ObjectifVieCategories 
           activeCategory={activeCategory}
           onCategoryChange={setActiveCategory}
           objectifs={objectifs || []}
         />
         
         {isLoading ? (
           <LoadingSkeleton count={3} />
         ) : (
           <div className="objectifs-grid">
             {filteredObjectifs.length === 0 ? (
               <EmptyState 
                 icon="bullseye"
                 title="Aucun objectif de vie pour le moment"
                 description="Définissez vos objectifs de vie pour échanger avec votre conseiller sur vos projets importants."
                 actionLabel="Créer mon premier objectif"
                 onAction={() => setIsFormOpen(true)}
               />
             ) : (
               filteredObjectifs.map(objectif => (
                 <ObjectifVieCard 
                   key={objectif.id}
                   objectif={objectif}
                   onEdit={() => handleEditObjectif(objectif)}
                 />
               ))
             )}
           </div>
         )}
         
         {isFormOpen && (
           <Modal onClose={handleCancelForm}>
             <ObjectifVieForm 
               initialValues={editingObjectif} 
               onSubmit={editingObjectif ? handleUpdateObjectif : handleCreateObjectif}
               onCancel={handleCancelForm}
               isSubmitting={createMutation.isLoading || updateMutation.isLoading}
             />
           </Modal>
         )}
       </div>
     );
   };
   
   export default ObjectifsVie;
   ```

5. **Module Subventions (spécifique Associations):**
   ```jsx
   // src/pages/association/Subventions.jsx
   import { useState } from 'react';
   import { useQuery } from 'react-query';
   import { fetchSubventions } from '@services/endpoints/subventions';
   import { useAuth } from '@context/AuthContext';
   import SubventionCard from '@components/domain/association/SubventionCard';
   import SubventionDetails from '@components/domain/association/SubventionDetails';
   import SubventionStats from '@components/domain/association/SubventionStats';
   import SubventionFilters from '@components/domain/association/SubventionFilters';
   
   const Subventions = () => {
     const { user } = useAuth();
     const [selectedSubvention, setSelectedSubvention] = useState(null);
     const [filters, setFilters] = useState({
       status: 'all',
       year: new Date().getFullYear(),
     });
     
     const { data: subventions, isLoading } = useQuery(
       ['subventions', user?.id, filters],
       () => fetchSubventions(user?.id, filters),
       { enabled: !!user?.id }
     );
     
     const handleSubventionSelect = (subvention) => {
       setSelectedSubvention(subvention);
     };
     
     const handleFilterChange = (newFilters) => {
       setFilters(prev => ({ ...prev, ...newFilters }));
     };
     
     const handleCloseDetails = () => {
       setSelectedSubvention(null);
     };
     
     return (
       <div className="subventions-page">
         <header className="page-header">
           <h1>Suivi des Subventions & Financements</h1>
         </header>
         
         {!selectedSubvention ? (
           <>
             <SubventionStats subventions={subventions || []} />
             
             <div className="filters-container">
               <SubventionFilters
                 filters={filters}
                 onChange={handleFilterChange}
               />
             </div>
             
             <div className="subventions-list">
               {isLoading ? (
                 <LoadingSkeleton count={3} />
               ) : subventions?.length === 0 ? (
                 <EmptyState 
                   icon="hand-holding-usd"
                   title="Aucune subvention pour le moment"
                   description="Votre conseiller vous informera quand de nouveaux dossiers de financement seront créés."
                 />
               ) : (
                 subventions.map(subvention => (
                   <SubventionCard 
                     key={subvention.id}
                     subvention={subvention}
                     onClick={() => handleSubventionSelect(subvention)}
                   />
                 ))
               )}
             </div>
           </>
         ) : (
           <SubventionDetails 
             subvention={selectedSubvention}
             onBack={handleCloseDetails}
           />
         )}
       </div>
     );
   };
   
   export default Subventions;
   ```

6. **Module Parcours Création (spécifique Créateurs):**
   ```jsx
   // src/pages/createur/ParcoursCreation.jsx
   import { useQuery } from 'react-query';
   import { fetchParcoursCreation } from '@services/endpoints/parcours-creation';
   import { useAuth } from '@context/AuthContext';
   import ParcoursCreationProgress from '@components/domain/createur/ParcoursCreationProgress';
   import ParcoursCreationSteps from '@components/domain/createur/ParcoursCreationSteps';
   import ParcoursCreationPlan from '@components/domain/createur/ParcoursCreationPlan';
   import ParcoursCreationTimeline from '@components/domain/createur/ParcoursCreationTimeline';
   
   const ParcoursCreation = () => {
     const { user } = useAuth();
     
     const { data: parcours, isLoading } = useQuery(
       ['parcours-creation', user?.id],
       () => fetchParcoursCreation(user?.id),
       { enabled: !!user?.id }
     );
     
     if (isLoading) return <PageLoader />;
     
     return (
       <div className="parcours-creation-page">
         <header className="page-header">
           <h1>Mon Parcours Création</h1>
           <div className="header-info">
             <div className="project-info">
               <span className="label">Projet :</span>
               <span className="value">{parcours?.titre_projet}</span>
             </div>
             <div className="date-info">
               <span className="label">Date de lancement prévue :</span>
               <span className="value">{formatDate(parcours?.date_lancement_prevue)}</span>
             </div>
           </div>
         </header>
         
         <div className="parcours-content">
           <ParcoursCreationProgress 
             completion={parcours?.completion_percentage}
             stadeActuel={parcours?.stade_avancement}
           />
           
           <div className="parcours-main-content">
             <div className="left-column">
               <ParcoursCreationSteps 
                 etapes={parcours?.etapes}
                 currentStepId={parcours?.etape_courante?.id}
               />
             </div>
             
             <div className="right-column">
               <ParcoursCreationPlan
                 forme={parcours?.forme_juridique}
                 activites={parcours?.activites}
                 financement={parcours?.financement_prev}
                 apport={parcours?.apport_personnel}
                 chiffrePrev={parcours?.chiffre_prev}
               />
               
               {parcours?.aides_identifiees?.length > 0 && (
                 <div className="aides-section">
                   <h3>Aides identifiées pour votre projet</h3>
                   <div className="aides-list">
                     {parcours.aides_identifiees.map(aide => (
                       <div key={aide.id} className="aide-item">
                         <div className="aide-header">
                           <h4>{aide.dispositif}</h4>
                           <span className="montant">{formatCurrency(aide.montant_potentiel)}</span>
                         </div>
                         <div className="aide-details">
                           <p>{aide.organisme}</p>
                           <span className={`aide-status ${aide.statut.toLowerCase()}`}>
                             {formatAideStatus(aide.statut)}
                           </span>
                         </div>
                       </div>
                     ))}
                   </div>
                   <a href="/aides-creation" className="more-link">
                     Voir toutes les aides <i className="fas fa-arrow-right"></i>
                   </a>
                 </div>
               )}
             </div>
           </div>
           
           <div className="parcours-timeline-section">
             <h3>Historique de votre parcours</h3>
             <ParcoursCreationTimeline events={parcours?.historique} />
           </div>
         </div>
       </div>
     );
   };
   
   export default ParcoursCreation;
   ```

### 5.3. Composants React

Le portail client utilise une architecture de composants React réutilisables et composables pour assurer la cohérence de l'interface et optimiser le développement.

**Spécifications techniques:**

1. **Structure des composants:**
   - Composants communs (boutons, inputs, modales...)
   - Composants de mise en page (layout, sidebars, headers...)
   - Composants domaine (spécifiques à une fonctionnalité métier)
   - Pages (assemblage de composants pour une vue complète)
   - HOCs (Higher-Order Components pour logiques partagées)
   - Hooks personnalisés (logique réutilisable)

2. **Exemple de composant réutilisable:**
   ```jsx
   // src/components/common/StatusBadge.jsx
   import PropTypes from 'prop-types';
   
   /**
    * Badge de statut multi-usage avec variations visuelles
    */
   const StatusBadge = ({ 
     status,
     customLabel,
     size = 'medium', 
     withIcon = true, 
     pulse = false 
   }) => {
     // Configuration des types de statuts
     const statusConfig = {
       // Statuts génériques
       success: { label: 'Succès', icon: 'check-circle', color: 'success' },
       warning: { label: 'Attention', icon: 'exclamation-triangle', color: 'warning' },
       danger: { label: 'Erreur', icon: 'times-circle', color: 'danger' },
       info: { label: 'Information', icon: 'info-circle', color: 'info' },
       
       // Statuts spécifiques aux dossiers
       actif: { label: 'Actif', icon: 'play-circle', color: 'success' },
       termine: { label: 'Terminé', icon: 'check-circle', color: 'neutral' },
       en_attente: { label: 'En attente', icon: 'clock', color: 'warning' },
       en_cours: { label: 'En cours', icon: 'spinner', color: 'info', spin: true },
       bloque: { label: 'Bloqué', icon: 'exclamation-circle', color: 'danger' },
       
       // Statuts spécifiques aux paiements
       paye: { label: 'Payé', icon: 'check-circle', color: 'success' },
       partiel: { label: 'Partiel', icon: 'adjust', color: 'warning' },
       impaye: { label: 'Impayé', icon: 'times-circle', color: 'danger' },
       
       // Statuts spécifiques aux financements
       accepte: { label: 'Accepté', icon: 'check-circle', color: 'success' },
       refuse: { label: 'Refusé', icon: 'times-circle', color: 'danger' },
       depose: { label: 'Déposé', icon: 'paper-plane', color: 'info' },
       preparation: { label: 'En préparation', icon: 'pencil-alt', color: 'warning' },
       verse: { label: 'Versé', icon: 'money-bill-wave', color: 'success' },
       
       // Fallback pour statut inconnu
       default: { label: 'Non défini', icon: 'circle', color: 'neutral' }
     };
     
     // Sélectionner la configuration de statut
     const config = statusConfig[status] || statusConfig.default;
     
     // Classes CSS dynamiques
     const sizeClass = `status-badge--${size}`;
     const colorClass = `status-badge--${config.color}`;
     const pulseClass = pulse ? 'status-badge--pulse' : '';
     
     return (
       <span className={`status-badge ${colorClass} ${sizeClass} ${pulseClass}`}>
         {withIcon && (
           <i className={`fas fa-${config.icon} ${config.spin ? 'fa-spin' : ''}`}></i>
         )}
         <span className="status-badge__label">{customLabel || config.label}</span>
       </span>
     );
   };
   
   StatusBadge.propTypes = {
     status: PropTypes.string.isRequired,
     customLabel: PropTypes.string,
     size: PropTypes.oneOf(['small', 'medium', 'large']),
     withIcon: PropTypes.bool,
     pulse: PropTypes.bool
   };
   
   export default StatusBadge;
   ```

3. **Hook personnalisé pour logique de business:**
   ```jsx
   // src/hooks/useDocumentActions.js
   import { useMutation, useQueryClient } from 'react-query';
   import { downloadDocument, deleteDocument, shareDocument } from '@services/endpoints/documents';
   import { useAuth } from '@context/AuthContext';
   import { useToast } from '@hooks/useToast';
   
   /**
    * Hook pour gérer les actions sur les documents
    */
   export const useDocumentActions = () => {
     const { user } = useAuth();
     const queryClient = useQueryClient();
     const toast = useToast();
     
     // Téléchargement de document
     const downloadMutation = useMutation(downloadDocument, {
       onSuccess: (response) => {
         // Créer un lien de téléchargement temporaire à partir du blob
         const url = window.URL.createObjectURL(new Blob([response.data]));
         const link = document.createElement('a');
         link.href = url;
         link.setAttribute('download', response.fileName || 'document');
         document.body.appendChild(link);
         link.click();
         link.remove();
         
         toast.success('Document téléchargé avec succès');
       },
       onError: (error) => {
         console.error('Erreur téléchargement:', error);
         toast.error('Erreur lors du téléchargement du document');
       }
     });
     
     // Suppression de document
     const deleteMutation = useMutation(deleteDocument, {
       onSuccess: () => {
         queryClient.invalidateQueries(['documents', user?.id]);
         toast.success('Document supprimé avec succès');
       },
       onError: (error) => {
         console.error('Erreur suppression:', error);
         toast.error('Erreur lors de la suppression du document');
       }
     });
     
     // Partage de document
     const shareMutation = useMutation(shareDocument, {
       onSuccess: () => {
         toast.success('Document partagé avec succès');
       },
       onError: (error) => {
         console.error('Erreur partage:', error);
         toast.error('Erreur lors du partage du document');
       }
     });
     
     return {
       downloadDocument: (documentId) => downloadMutation.mutate({ documentId }),
       deleteDocument: (documentId) => deleteMutation.mutate({ documentId }),
       shareDocument: (documentId, recipientEmail) => shareMutation.mutate({ 
         documentId, 
         recipientEmail,
         clientId: user?.id
       }),
       isDownloading: downloadMutation.isLoading,
       isDeleting: deleteMutation.isLoading,
       isSharing: shareMutation.isLoading
     };
   };
   ```

4. **Composant de formulaire avancé:**
   ```jsx
   // src/components/domain/objectifs-vie/ObjectifVieForm.jsx
   import { useForm, Controller } from 'react-hook-form';
   import { yupResolver } from '@hookform/resolvers/yup';
   import * as yup from 'yup';
   import DatePicker from '@components/common/DatePicker';
   import TextArea from '@components/common/TextArea';
   import Select from '@components/common/Select';
   
   // Schéma de validation
   const schema = yup.object({
     titre: yup.string().required('Le titre est obligatoire').max(100),
     description: yup.string().required('La description est obligatoire'),
     categorie: yup.string().required('La catégorie est obligatoire'),
     horizon_temporel: yup.string().required('L\'horizon temporel est obligatoire'),
     priorite: yup.number().required('La priorité est obligatoire').min(1).max(5),
     impact_financier: yup.number().nullable().transform((v) => (isNaN(v) ? null : v)),
     date_objectif: yup.date().nullable()
   });
   
   const ObjectifVieForm = ({ initialValues, onSubmit, onCancel, isSubmitting }) => {
     // Options pour les sélecteurs
     const categorieOptions = [
       { value: 'logement', label: 'Logement' },
       { value: 'famille', label: 'Famille' },
       { value: 'retraite', label: 'Retraite' },
       { value: 'patrimoine', label: 'Patrimoine' },
       { value: 'fiscalite', label: 'Fiscalité' },
       { value: 'autre', label: 'Autre' }
     ];
     
     const horizonOptions = [
       { value: 'court', label: 'Court terme (< 2 ans)' },
       { value: 'moyen', label: 'Moyen terme (2-5 ans)' },
       { value: 'long', label: 'Long terme (> 5 ans)' }
     ];
     
     const prioriteOptions = [
       { value: 1, label: '1 - Faible priorité' },
       { value: 2, label: '2 - Priorité modérée' },
       { value: 3, label: '3 - Priorité moyenne' },
       { value: 4, label: '4 - Priorité élevée' },
       { value: 5, label: '5 - Priorité très élevée' }
     ];
     
     // Initialisation du formulaire avec React Hook Form
     const { 
       control, 
       handleSubmit, 
       formState: { errors } 
     } = useForm({
       resolver: yupResolver(schema),
       defaultValues: initialValues || {
         titre: '',
         description: '',
         categorie: '',
         horizon_temporel: '',
         priorite: 3,
         impact_financier: null,
         date_objectif: null
       }
     });
     
     const onFormSubmit = (data) => {
       onSubmit(data);
     };
     
     return (
       <div className="objectif-vie-form">
         <h2>{initialValues ? 'Modifier l\'objectif' : 'Nouvel objectif de vie'}</h2>
         
         <form onSubmit={handleSubmit(onFormSubmit)}>
           <div className="form-group">
             <label htmlFor="titre">Titre de l'objectif</label>
             <Controller
               name="titre"
               control={control}
               render={({ field }) => (
                 <input
                   id="titre"
                   type="text"
                   placeholder="Ex: Acquérir une résidence principale"
                   {...field}
                 />
               )}
             />
             {errors.titre && <div className="error-message">{errors.titre.message}</div>}
           </div>
           
           <div className="form-group">
             <label htmlFor="description">Description</label>
             <Controller
               name="description"
               control={control}
               render={({ field }) => (
                 <TextArea
                   id="description"
                   placeholder="Décrivez votre objectif en détail..."
                   rows={4}
                   {...field}
                 />
               )}
             />
             {errors.description && <div className="error-message">{errors.description.message}</div>}
           </div>
           
           <div className="form-row">
             <div className="form-group">
               <label htmlFor="categorie">Catégorie</label>
               <Controller
                 name="categorie"
                 control={control}
                 render={({ field }) => (
                   <Select
                     id="categorie"
                     options={categorieOptions}
                     value={field.value}
                     onChange={field.onChange}
                   />
                 )}
               />
               {errors.categorie && <div className="error-message">{errors.categorie.message}</div>}
             </div>
             
             <div className="form-group">
               <label htmlFor="horizon_temporel">Horizon temporel</label>
               <Controller
                 name="horizon_temporel"
                 control={control}
                 render={({ field }) => (
                   <Select
                     id="horizon_temporel"
                     options={horizonOptions}
                     value={field.value}
                     onChange={field.onChange}
                   />
                 )}
               />
               {errors.horizon_temporel && <div className="error-message">{errors.horizon_temporel.message}</div>}
             </div>
           </div>
           
           <div className="form-row">
             <div className="form-group">
               <label htmlFor="priorite">Priorité</label>
               <Controller
                 name="priorite"
                 control={control}
                 render={({ field }) => (
                   <Select
                     id="priorite"
                     options={prioriteOptions}
                     value={field.value}
                     onChange={field.onChange}
                   />
                 )}
               />
               {errors.priorite && <div className="error-message">{errors.priorite.message}</div>}
             </div>
             
             <div className="form-group">
               <label htmlFor="impact_financier">Impact financier estimé (€)</label>
               <Controller
                 name="impact_financier"
                 control={control}
                 render={({ field }) => (
                   <input
                     id="impact_financier"
                     type="number"
                     placeholder="Montant en euros"
                     {...field}
                     onChange={e => field.onChange(e.target.value === '' ? null : Number(e.target.value))}
                   />
                 )}
               />
               {errors.impact_financier && <div className="error-message">{errors.impact_financier.message}</div>}
             </div>
           </div>
           
           <div className="form-group">
             <label htmlFor="date_objectif">Date d'objectif (facultative)</label>
             <Controller
               name="date_objectif"
               control={control}
               render={({ field }) => (
                 <DatePicker
                   id="date_objectif"
                   selectedDate={field.value}
                   onChange={field.onChange}
                   placeholderText="Sélectionnez une date cible (facultatif)"
                 />
               )}
             />
           </div>
           
           <div className="form-actions">
             <button type="button" className="secondary-button" onClick={onCancel} disabled={isSubmitting}>
               Annuler
             </button>
             <button type="submit" className="primary-button" disabled={isSubmitting}>
               {isSubmitting ? (
                 <>
                   <i className="fas fa-spinner fa-spin"></i> En cours...
                 </>
               ) : initialValues ? (
                 'Mettre à jour'
               ) : (
                 'Créer l\'objectif'
               )}
             </button>
           </div>
         </form>
       </div>
     );
   };
   
   export default ObjectifVieForm;
   ```

### 5.4. Communication avec l'API

La communication entre le portail client React et le backend PHP se fait via une API REST sécurisée.

**Spécifications techniques:**

1. **Configuration Axios:**
   ```jsx
   // src/services/api.js
   import axios from 'axios';
   
   // Création d'une instance Axios avec configuration de base
   const api = axios.create({
     baseURL: '/api',  // Sera dirigé via le proxy Vite en dev
     headers: {
       'Content-Type': 'application/json',
     },
     timeout: 10000, // 10 secondes
   });
   
   // Intercepteur de requêtes pour ajouter token d'authentification
   api.interceptors.request.use(
     (config) => {
       const token = localStorage.getItem('auth_token');
       if (token) {
         config.headers['Authorization'] = `Bearer ${token}`;
       }
       return config;
     },
     (error) => Promise.reject(error)
   );
   
   // Intercepteur de réponses pour gestion d'erreurs centralisée
   api.interceptors.response.use(
     (response) => response,
     (error) => {
       const { response } = error;
       
       // Gérer les erreurs d'authentification
       if (response && response.status === 401) {
         // Redirection vers login si token expiré/invalide
         localStorage.removeItem('auth_token');
         window.location.href = '/portail/login';
       }
       
       // Logger les erreurs en développement
       if (process.env.NODE_ENV !== 'production') {
         console.error('API Error:', error);
       }
       
       return Promise.reject(error);
     }
   );
   
   export default api;
   ```

2. **Organisation des endpoints par domaine:**
   ```jsx
   // src/services/endpoints/dossiers.js
   import api from '../api';
   
   /**
    * Récupère la liste des dossiers du client
    * @param {number} clientId - ID du client
    * @param {object} filters - Filtres optionnels
    */
   export const fetchDossiers = async (clientId, filters = {}) => {
     const response = await api.get(`/dossiers`, {
       params: {
         client_id: clientId,
         ...filters
       }
     });
     return response.data;
   };
   
   /**
    * Récupère les détails d'un dossier
    * @param {number} dossierId - ID du dossier
    */
   export const fetchDossierDetails = async (dossierId) => {
     const response = await api.get(`/dossiers/${dossierId}`);
     return response.data;
   };
   
   /**
    * Récupère la timeline d'un dossier
    * @param {number} dossierId - ID du dossier
    */
   export const fetchDossierTimeline = async (dossierId) => {
     const response = await api.get(`/dossiers/${dossierId}/timeline`);
     return response.data;
   };
   
   /**
    * Récupère les documents associés à un dossier
    * @param {number} dossierId - ID du dossier
    */
   export const fetchDossierDocuments = async (dossierId) => {
     const response = await api.get(`/dossiers/${dossierId}/documents`);
     return response.data;
   };
   
   /**
    * Récupère les communications liées à un dossier
    * @param {number} dossierId - ID du dossier
    */
   export const fetchDossierCommunications = async (dossierId) => {
     const response = await api.get(`/dossiers/${dossierId}/communications`);
     return response.data;
   };
   ```

3. **Gestion de l'authentification:**
   ```jsx
   // src/services/auth.js
   import api from './api';
   
   /**
    * Authentification utilisateur portail
    * @param {string} username - Nom d'utilisateur
    * @param {string} password - Mot de passe
    */
   export const login = async (username, password) => {
     const response = await api.post('/auth/login', {
       username,
       password
     });
     
     const { token, user } = response.data;
     
     // Stocker token dans localStorage
     localStorage.setItem('auth_token', token);
     
     return user;
   };
   
   /**
    * Déconnexion utilisateur
    */
   export const logout = async () => {
     try {
       await api.post('/auth/logout');
     } catch (error) {
       console.error('Logout error:', error);
     } finally {
       localStorage.removeItem('auth_token');
     }
   };
   
   /**
    * Vérifie si le token est valide et récupère les infos utilisateur
    */
   export const checkAuth = async () => {
     try {
       const token = localStorage.getItem('auth_token');
       if (!token) return null;
       
       const response = await api.get('/auth/user');
       return response.data;
     } catch (error) {
       localStorage.removeItem('auth_token');
       return null;
     }
   };
   
   /**
    * Demande réinitialisation mot de passe
    * @param {string} email - Adresse e-mail utilisateur
    */
   export const requestPasswordReset = async (email) => {
     const response = await api.post('/auth/reset-password-request', { email });
     return response.data;
   };
   
   /**
    * Réinitialise le mot de passe avec token
    * @param {string} token - Token de réinitialisation
    * @param {string} newPassword - Nouveau mot de passe
    */
   export const resetPassword = async (token, newPassword) => {
     const response = await api.post('/auth/reset-password', {
       token,
       new_password: newPassword
     });
     return response.data;
   };
   ```

4. **Gestion des uploads de fichiers:**
   ```jsx
   // src/services/endpoints/documents.js
   import api from '../api';
   
   /**
    * Upload d'un document
    * @param {object} params - Paramètres
    * @param {number} params.clientId - ID du client
    * @param {FormData} params.formData - FormData contenant le fichier et métadonnées
    */
   export const uploadDocument = async ({ clientId, formData }) => {
     // Création d'une instance spécifique pour gérer le multipart/form-data
     const response = await api.post(`/documents/upload`, formData, {
       headers: {
         'Content-Type': 'multipart/form-data'
       },
       params: { client_id: clientId }
     });
     return response.data;
   };
   
   /**
    * Upload d'un document sécurisé (coffre-fort)
    */
   export const uploadSecureDocument = async ({ clientId, formData }) => {
     const response = await api.post(`/documents/secure/upload`, formData, {
       headers: {
         'Content-Type': 'multipart/form-data'
       },
       params: { client_id: clientId }
     });
     return response.data;
   };
   
   /**
    * Téléchargement d'un document
    * @param {object} params - Paramètres
    * @param {number} params.documentId - ID du document
    */
   export const downloadDocument = async ({ documentId }) => {
     const response = await api.get(`/documents/${documentId}/download`, {
       responseType: 'blob'
     });
     
     // Extraction du nom de fichier depuis l'en-tête Content-Disposition
     const contentDisposition = response.headers['content-disposition'];
     let fileName = 'document';
     
     if (contentDisposition) {
       const fileNameMatch = contentDisposition.match(/filename="(.+)"/);
       if (fileNameMatch?.length === 2) {
         fileName = fileNameMatch[1];
       }
     }
     
     return {
       data: response.data,
       fileName
     };
   };
   
   /**
    * Téléchargement d'un document sécurisé (coffre-fort)
    */
   export const downloadSecureDocument = async ({ documentId, accessCode }) => {
     const response = await api.post(`/documents/secure/${documentId}/download`, 
       { access_code: accessCode },
       { responseType: 'blob' }
     );
     
     // Extraction du nom de fichier
     const contentDisposition = response.headers['content-disposition'];
     let fileName = 'secure-document';
     
     if (contentDisposition) {
       const fileNameMatch = contentDisposition.match(/filename="(.+)"/);
       if (fileNameMatch?.length === 2) {
         fileName = fileNameMatch[1];
       }
     }
     
     return {
       data: response.data,
       fileName
     };
   };
   
   // Autres méthodes pour gestion documents...
   ```

### 5.5. Authentification et sécurité

Le portail client utilise un système d'authentification robuste avec JWT et gestion sécurisée des sessions.

**Spécifications techniques:**

1. **Context d'authentification React:**
   ```jsx
   // src/context/AuthContext.jsx
   import { createContext, useContext, useState, useEffect } from 'react';
   import { checkAuth, login, logout } from '@services/auth';
   
   const AuthContext = createContext(null);
   
   export const AuthProvider = ({ children }) => {
     const [user, setUser] = useState(null);
     const [loading, setLoading] = useState(true);
     const [error, setError] = useState(null);
     
     // Vérifier l'authentification au chargement
     useEffect(() => {
       const verifyAuth = async () => {
         try {
           setLoading(true);
           const userData = await checkAuth();
           setUser(userData);
         } catch (err) {
           console.error('Auth verification failed:', err);
           setUser(null);
         } finally {
           setLoading(false);
         }
       };
       
       verifyAuth();
     }, []);
     
     // Fonction de connexion
     const handleLogin = async (username, password) => {
       try {
         setLoading(true);
         setError(null);
         const userData = await login(username, password);
         setUser(userData);
         return userData;
       } catch (err) {
         setError(err.response?.data?.message || 'Échec de connexion');
         throw err;
       } finally {
         setLoading(false);
       }
     };
     
     // Fonction de déconnexion
     const handleLogout = async () => {
       try {
         await logout();
       } finally {
         setUser(null);
       }
     };
     
     // Valeur du contexte
     const value = {
       user,
       isAuthenticated: !!user,
       login: handleLogin,
       logout: handleLogout,
       loading,
       error
     };
     
     return (
       <AuthContext.Provider value={value}>
         {children}
       </AuthContext.Provider>
     );
   };
   
   // Hook pour utiliser le contexte d'authentification
   export const useAuth = () => {
     const context = useContext(AuthContext);
     if (!context) {
       throw new Error('useAuth must be used within an AuthProvider');
     }
     return context;
   };
   ```

2. **Page de connexion:**
   ```jsx
   // src/pages/Login.jsx
   import { useState } from 'react';
   import { useNavigate, Link } from 'react-router-dom';
   import { useAuth } from '@context/AuthContext';
   import { requestPasswordReset } from '@services/auth';
   
   const Login = () => {
     const [username, setUsername] = useState('');
     const [password, setPassword] = useState('');
     const [showPasswordReset, setShowPasswordReset] = useState(false);
     const [resetEmail, setResetEmail] = useState('');
     const [resetSent, setResetSent] = useState(false);
     const { login, loading, error } = useAuth();
     const navigate = useNavigate();
     
     const handleSubmit = async (e) => {
       e.preventDefault();
       try {
         await login(username, password);
         navigate('/dashboard');
       } catch (err) {
         // Error handled by AuthContext
       }
     };
     
     const handlePasswordResetRequest = async (e) => {
       e.preventDefault();
       try {
         await requestPasswordReset(resetEmail);
         setResetSent(true);
       } catch (err) {
         // Handle error
       }
     };
     
     return (
       <div className="login-page">
         <div className="login-container">
           <div className="login-logo">
             <img src="/portail/assets/logo.png" alt="eLaska" />
           </div>
           
           {!showPasswordReset ? (
             <>
               <h1>Connexion à votre espace client</h1>
               
               <form onSubmit={handleSubmit} className="login-form">
                 {error && (
                   <div className="error-message">
                     <i className="fas fa-exclamation-circle"></i>
                     {error}
                   </div>
                 )}
                 
                 <div className="form-group">
                   <label htmlFor="username">Identifiant</label>
                   <div className="input-icon-wrapper">
                     <i className="fas fa-user"></i>
                     <input
                       id="username"
                       type="text"
                       value={username}
                       onChange={(e) => setUsername(e.target.value)}
                       required
                       autoFocus
                     />
                   </div>
                 </div>
                 
                 <div className="form-group">
                   <label htmlFor="password">Mot de passe</label>
                   <div className="input-icon-wrapper">
                     <i className="fas fa-lock"></i>
                     <input
                       id="password"
                       type="password"
                       value={password}
                       onChange={(e) => setPassword(e.target.value)}
                       required
                     />
                   </div>
                 </div>
                 
                 <button 
                   type="submit" 
                   className="login-button" 
                   disabled={loading}
                 >
                   {loading ? (
                     <>
                       <i className="fas fa-spinner fa-spin"></i>
                       <span>Connexion en cours...</span>
                     </>
                   ) : (
                     <>
                       <i className="fas fa-sign-in-alt"></i>
                       <span>Se connecter</span>
                     </>
                   )}
                 </button>
                 
                 <div className="form-help">
                   <a 
                     href="#" 
                     onClick={(e) => {
                       e.preventDefault();
                       setShowPasswordReset(true);
                     }}
                   >
                     Mot de passe oublié ?
                   </a>
                 </div>
               </form>
             </>
           ) : (
             <>
               <h1>Réinitialisation du mot de passe</h1>
               
               {resetSent ? (
                 <div className="success-message">
                   <i className="fas fa-check-circle"></i>
                   <p>
                     Si l'adresse email <strong>{resetEmail}</strong> est associée 
                     à un compte, vous recevrez un email contenant les instructions 
                     pour réinitialiser votre mot de passe.
                   </p>
                   <button 
                     className="secondary-button" 
                     onClick={() => setShowPasswordReset(false)}
                   >
                     Retour à la connexion
                   </button>
                 </div>
               ) : (
                 <form onSubmit={handlePasswordResetRequest} className="login-form">
                   <div className="form-group">
                     <label htmlFor="reset-email">Adresse email</label>
                     <div className="input-icon-wrapper">
                       <i className="fas fa-envelope"></i>
                       <input
                         id="reset-email"
                         type="email"
                         value={resetEmail}
                         onChange={(e) => setResetEmail(e.target.value)}
                         required
                         autoFocus
                       />
                     </div>
                   </div>
                   
                   <button type="submit" className="login-button">
                     <i className="fas fa-paper-plane"></i>
                     <span>Envoyer les instructions</span>
                   </button>
                   
                   <div className="form-help">
                     <a 
                       href="#" 
                       onClick={(e) => {
                         e.preventDefault();
                         setShowPasswordReset(false);
                       }}
                     >
                       Retour à la connexion
                     </a>
                   </div>
                 </form>
               )}
             </>
           )}
           
           <div className="login-footer">
             <p>
               En vous connectant, vous acceptez nos <Link to="/mentions-legales">conditions d'utilisation</Link> et 
               notre <Link to="/confidentialite">politique de confidentialité</Link>.
             </p>
             <p className="contact-support">
               Besoin d'aide ? Contactez le support au 01 23 45 67 89
             </p>
           </div>
         </div>
       </div>
     );
   };
   
   export default Login;
   ```

3. **Accès au Coffre-Fort sécurisé:**
   ```jsx
   // src/components/domain/coffre-fort/SecureAccessCode.jsx
   import { useState } from 'react';
   import { validateSecureAccess } from '@services/endpoints/coffre-fort';
   
   const SecureAccessCode = ({ onUnlock }) => {
     const [accessCode, setAccessCode] = useState(['', '', '', '', '', '']);
     const [loading, setLoading] = useState(false);
     const [error, setError] = useState(null);
     const [attempts, setAttempts] = useState(0);
     
     // Référence aux inputs pour focus auto
     const inputRefs = Array(6).fill(0).map(() => useRef(null));
     
     const handleInputChange = (index, value) => {
       // Accepter uniquement les chiffres
       if (value !== '' && !/^\d+$/.test(value)) {
         return;
       }
       
       const newAccessCode = [...accessCode];
       newAccessCode[index] = value;
       setAccessCode(newAccessCode);
       
       // Gestion focus automatique
       if (value !== '') {
         // Focus sur l'input suivant si ce n'est pas le dernier
         if (index < 5) {
           inputRefs[index + 1].current.focus();
         }
       }
     };
     
     const handleKeyDown = (index, e) => {
       // Sur backspace, focus précédent si input vide
       if (e.key === 'Backspace' && accessCode[index] === '' && index > 0) {
         inputRefs[index - 1].current.focus();
       }
     };
     
     const handleSubmit = async (e) => {
       e.preventDefault();
       setError(null);
       
       const code = accessCode.join('');
       if (code.length !== 6) {
         setError('Veuillez saisir le code complet à 6 chiffres');
         return;
       }
       
       try {
         setLoading(true);
         const success = await validateSecureAccess(code);
         
         if (success) {
           onUnlock(true);
         } else {
           setAttempts(prev => prev + 1);
           setError('Code d\'accès invalide. Veuillez réessayer.');
           setAccessCode(['', '', '', '', '', '']);
           inputRefs[0].current.focus();
           
           // Bloquer après 3 tentatives
           if (attempts >= 2) {
             setError('Trop de tentatives incorrectes. Compte temporairement bloqué.');
             setTimeout(() => {
               window.location.href = '/portail/dashboard';
             }, 3000);
           }
         }
       } catch (err) {
         setError('Une erreur est survenue. Veuillez réessayer ultérieurement.');
       } finally {
         setLoading(false);
       }
     };
     
     return (
       <div className="secure-access-code">
         <form onSubmit={handleSubmit}>
           {error && (
             <div className="error-message">
               <i className="fas fa-exclamation-triangle"></i>
               {error}
             </div>
           )}
           
           <div className="code-inputs">
             {accessCode.map((digit, index) => (
               <input
                 key={index}
                 ref={inputRefs[index]}
                 type="text"
                 inputMode="numeric"
                 maxLength={1}
                 value={digit}
                 onChange={(e) => handleInputChange(index, e.target.value)}
                 onKeyDown={(e) => handleKeyDown(index, e)}
                 disabled={loading}
                 autoFocus={index === 0}
               />
             ))}
           </div>
           
           <button 
             type="submit" 
             className="primary-button"
             disabled={loading || accessCode.some(digit => digit === '')}
           >
             {loading ? (
               <>
                 <i className="fas fa-spinner fa-spin"></i>
                 Vérification...
               </>
             ) : (
               'Accéder au coffre-fort'
             )}
           </button>
           
           <p className="code-help">
             <i className="fas fa-info-circle"></i>
             Ce code vous a été communiqué par votre conseiller lors de la configuration 
             de votre coffre-fort numérique.
           </p>
         </form>
       </div>
     );
   };
   
   export default SecureAccessCode;
   ```

### 5.6. Gestion des notifications

Le portail client intègre un système de notifications en temps réel pour informer l'utilisateur des mises à jour importantes.

**Spécifications techniques:**

1. **Système de notifications React:**
   ```jsx
   // src/context/NotificationContext.jsx
   import { createContext, useContext, useReducer, useEffect } from 'react';
   import { fetchUserNotifications, markNotificationRead } from '@services/endpoints/notifications';
   import { useAuth } from '@context/AuthContext';
   
   // Types d'actions
   const FETCH_NOTIFICATIONS = 'FETCH_NOTIFICATIONS';
   const ADD_NOTIFICATION = 'ADD_NOTIFICATION';
   const MARK_READ = 'MARK_READ';
   const MARK_ALL_READ = 'MARK_ALL_READ';
   const DELETE_NOTIFICATION = 'DELETE_NOTIFICATION';
   
   // Reducer pour gérer l'état des notifications
   const notificationReducer = (state, action) => {
     switch (action.type) {
       case FETCH_NOTIFICATIONS:
         return {
           ...state,
           items: action.payload,
           unread: action.payload.filter(item => !item.read).length
         };
       case ADD_NOTIFICATION:
         return {
           ...state,
           items: [action.payload, ...state.items],
           unread: state.unread + 1
         };
       case MARK_READ:
         return {
           ...state,
           items: state.items.map(item =>
             item.id === action.payload ? { ...item, read: true } : item
           ),
           unread: Math.max(0, state.unread - 1)
         };
       case MARK_ALL_READ:
         return {
           ...state,
           items: state.items.map(item => ({ ...item, read: true })),
           unread: 0
         };
       case DELETE_NOTIFICATION:
         return {
           ...state,
           items: state.items.filter(item => item.id !== action.payload),
           unread: state.items.find(item => item.id === action.payload && !item.read) 
             ? state.unread - 1 
             : state.unread
         };
       default:
         return state;
     }
   };
   
   // Création du contexte
   const NotificationContext = createContext();
   
   export const NotificationProvider = ({ children }) => {
     const { user, isAuthenticated } = useAuth();
     const [state, dispatch] = useReducer(notificationReducer, {
       items: [],
       unread: 0
     });
     
     // Charger les notifications au chargement
     useEffect(() => {
       if (isAuthenticated) {
         const loadNotifications = async () => {
           try {
             const notifications = await fetchUserNotifications();
             dispatch({ type: FETCH_NOTIFICATIONS, payload: notifications });
           } catch (error) {
             console.error('Error loading notifications:', error);
           }
         };
         
         loadNotifications();
         
         // Configurer WebSocket/SSE pour notifications en temps réel
         if (user?.id) {
           const eventSource = new EventSource(`/api/notifications/stream?client_id=${user.id}`);
           
           eventSource.onmessage = (event) => {
             const notification = JSON.parse(event.data);
             dispatch({ type: ADD_NOTIFICATION, payload: notification });
           };
           
           return () => {
             eventSource.close();
           };
         }
       }
     }, [isAuthenticated, user?.id]);
     
     // Actions
     const addNotification = (notification) => {
       dispatch({ type: ADD_NOTIFICATION, payload: notification });
     };
     
     const markAsRead = async (notificationId) => {
       try {
         await markNotificationRead(notificationId);
         dispatch({ type: MARK_READ, payload: notificationId });
       } catch (error) {
         console.error('Error marking notification as read:', error);
       }
     };
     
     const markAllAsRead = async () => {
       try {
         await markNotificationRead('all');
         dispatch({ type: MARK_ALL_READ });
       } catch (error) {
         console.error('Error marking all notifications as read:', error);
       }
     };
     
     const deleteNotification = async (notificationId) => {
       try {
         // API call to delete notification
         dispatch({ type: DELETE_NOTIFICATION, payload: notificationId });
       } catch (error) {
         console.error('Error deleting notification:', error);
       }
     };
     
     return (
       <NotificationContext.Provider value={{
         notifications: state.items,
         unreadCount: state.unread,
         addNotification,
         markAsRead,
         markAllAsRead,
         deleteNotification
       }}>
         {children}
       </NotificationContext.Provider>
     );
   };
   
   // Hook pour utiliser le contexte
   export const useNotifications = () => useContext(NotificationContext);
   ```

2. **Composant indicateur de notification:**
   ```jsx
   // src/components/layout/NotificationIndicator.jsx
   import { useNotifications } from '@context/NotificationContext';
   import { useState, useRef, useEffect } from 'react';
   import NotificationItem from './NotificationItem';
   
   const NotificationIndicator = () => {
     const { notifications, unreadCount, markAsRead, markAllAsRead } = useNotifications();
     const [isOpen, setIsOpen] = useState(false);
     const notificationRef = useRef(null);
     
     // Fermer le menu quand on clique en dehors
     useEffect(() => {
       const handleClickOutside = (event) => {
         if (notificationRef.current && !notificationRef.current.contains(event.target)) {
           setIsOpen(false);
         }
       };
       
       if (isOpen) {
         document.addEventListener('mousedown', handleClickOutside);
       }
       
       return () => {
         document.removeEventListener('mousedown', handleClickOutside);
       };
     }, [isOpen]);
     
     const toggleNotifications = () => {
       setIsOpen(!isOpen);
     };
     
     const handleMarkAsRead = (notificationId) => {
       markAsRead(notificationId);
     };
     
     const handleMarkAllAsRead = () => {
       markAllAsRead();
     };
     
     return (
       <div className="notification-indicator" ref={notificationRef}>
         <button 
           className="notification-button" 
           onClick={toggleNotifications}
           aria-label="Notifications"
         >
           <i className="fas fa-bell"></i>
           {unreadCount > 0 && (
             <span className="notification-badge">{unreadCount}</span>
           )}
         </button>
         
         {isOpen && (
           <div className="notifications-dropdown">
             <div className="notifications-

```jsx
          <div className="notifications-header">
            <h3>Notifications</h3>
            {unreadCount > 0 && (
              <button className="mark-all-read" onClick={handleMarkAllAsRead}>
                Tout marquer comme lu
              </button>
            )}
          </div>
           
          <div className="notifications-content">
            {notifications.length === 0 ? (
              <div className="empty-notifications">
                <i className="fas fa-bell-slash"></i>
                <p>Aucune notification</p>
              </div>
            ) : (
              <ul className="notifications-list">
                {notifications.map(notification => (
                  <NotificationItem
                    key={notification.id}
                    notification={notification}
                    onRead={handleMarkAsRead}
                  />
                ))}
              </ul>
            )}
          </div>
           
          <div className="notifications-footer">
            <a href="/portail/notifications">Voir toutes les notifications</a>
          </div>
        </div>
      )}
    </div>
  );
};

export default NotificationIndicator;
```

3. **Composant d'item de notification:**
   ```jsx
   // src/components/layout/NotificationItem.jsx
   import { Link } from 'react-router-dom';
   import { formatDistanceToNow } from 'date-fns';
   import { fr } from 'date-fns/locale';
   
   const NotificationItem = ({ notification, onRead }) => {
     const getNotificationIcon = (type) => {
       const iconMap = {
         'dossier_update': 'folder-open',
         'document_added': 'file-alt',
         'message_received': 'envelope',
         'rdv_scheduled': 'calendar-check',
         'task_assigned': 'tasks',
         'payment_received': 'money-bill-wave',
         'default': 'bell'
       };
       return iconMap[type] || iconMap.default;
     };
     
     const handleClick = () => {
       if (!notification.read) {
         onRead(notification.id);
       }
     };
     
     return (
       <li 
         className={`notification-item ${notification.read ? '' : 'unread'}`}
         onClick={handleClick}
       >
         <Link to={notification.link}>
           <div className="notification-icon">
             <i className={`fas fa-${getNotificationIcon(notification.type)}`}></i>
           </div>
           <div className="notification-content">
             <div className="notification-title">{notification.title}</div>
             <div className="notification-message">{notification.message}</div>
             <div className="notification-time">
               {formatDistanceToNow(new Date(notification.created_at), { 
                 addSuffix: true, 
                 locale: fr 
               })}
             </div>
           </div>
           {!notification.read && <div className="unread-indicator"></div>}
         </Link>
       </li>
     );
   };
   
   export default NotificationItem;
   ```

## 6. SYSTÈMES TRANSVERSAUX

### 6.1. Workflows d'Automatisation

Le module eLaska-ESaiko intègre un moteur de workflows permettant d'automatiser des tâches basées sur des déclencheurs et des conditions configurables.

**Spécifications techniques:**

1. **Architecture du moteur de workflow:**
   ```php
   /**
    * Classe principale du moteur de workflow
    */
   class ElaskaWorkflowEngine {
       private $db;
       private $rules = array();
       private $eventTypes = array(
           'dossier_status_change',  // Changement de statut d'un dossier
           'document_upload',        // Upload d'un document
           'client_creation',        // Création d'un client
           'rdv_scheduled',          // RDV programmé
           'timeline_step_change',   // Changement d'étape dans timeline
           'deadline_approaching',   // Échéance proche
           'task_completed',         // Tâche terminée
           'payment_received',       // Paiement reçu
           'objectif_vie_created',   // Objectif de vie créé
           // etc.
       );
       
       /**
        * Constructor
        */
       public function __construct($db) {
           $this->db = $db;
           $this->loadRules();
       }
       
       /**
        * Charge les règles de workflow depuis la BDD
        */
       private function loadRules() {
           $sql = "SELECT * FROM llx_elaska_workflow_rule WHERE actif = 1";
           $resql = $this->db->query($sql);
           
           if ($resql) {
               $num = $this->db->num_rows($resql);
               $i = 0;
               
               while ($i < $num) {
                   $obj = $this->db->fetch_object($resql);
                   $this->rules[] = array(
                       'id' => $obj->rowid,
                       'name' => $obj->nom_regle,
                       'trigger' => $obj->declencheur_type,
                       'conditions' => json_decode($obj->declencheur_condition, true),
                       'action' => $obj->action_type,
                       'action_params' => json_decode($obj->action_parametres, true),
                       'active' => $obj->actif
                   );
                   $i++;
               }
           }
       }
       
       /**
        * Traite un événement et exécute les règles correspondantes
        *
        * @param string $eventType Type d'événement
        * @param array $eventData Données de l'événement
        * @return array Résultat des actions exécutées
        */
       public function processEvent($eventType, $eventData) {
           if (!in_array($eventType, $this->eventTypes)) {
               return array('error' => 'Type d\'événement non supporté');
           }
           
           $actionsExecuted = array();
           
           // Parcourir les règles pour trouver celles qui correspondent à cet événement
           foreach ($this->rules as $rule) {
               if ($rule['trigger'] == $eventType && $this->checkConditions($rule['conditions'], $eventData)) {
                   // Exécuter l'action
                   $actionResult = $this->executeAction($rule['action'], $rule['action_params'], $eventData);
                   
                   // Enregistrer le résultat
                   $actionsExecuted[] = array(
                       'rule_id' => $rule['id'],
                       'rule_name' => $rule['name'],
                       'action' => $rule['action'],
                       'result' => $actionResult
                   );
                   
                   // Enregistrer dans l'historique
                   $this->logWorkflowExecution($rule['id'], $eventType, $eventData, $actionResult);
               }
           }
           
           return $actionsExecuted;
       }
       
       /**
        * Vérifie si les conditions d'une règle sont remplies
        *
        * @param array $conditions Conditions à vérifier
        * @param array $eventData Données de l'événement
        * @return bool Vrai si les conditions sont remplies
        */
       private function checkConditions($conditions, $eventData) {
           // Si pas de conditions, la règle s'applique
           if (empty($conditions)) {
               return true;
           }
           
           $allConditionsMet = true;
           
           // Vérifier chaque condition
           foreach ($conditions as $field => $condition) {
               // Extraire la valeur à comparer
               $fieldValue = $this->extractValue($field, $eventData);
               
               // Type de comparaison
               $operator = $condition['operator'] ?? '==';
               $compareValue = $condition['value'];
               
               // Effectuer la comparaison
               switch ($operator) {
                   case '==':
                       $conditionMet = ($fieldValue == $compareValue);
                       break;
                   case '!=':
                       $conditionMet = ($fieldValue != $compareValue);
                       break;
                   case '>':
                       $conditionMet = ($fieldValue > $compareValue);
                       break;
                   case '<':
                       $conditionMet = ($fieldValue < $compareValue);
                       break;
                   case '>=':
                       $conditionMet = ($fieldValue >= $compareValue);
                       break;
                   case '<=':
                       $conditionMet = ($fieldValue <= $compareValue);
                       break;
                   case 'contains':
                       $conditionMet = (stripos($fieldValue, $compareValue) !== false);
                       break;
                   case 'in':
                       $conditionMet = in_array($fieldValue, (array)$compareValue);
                       break;
                   default:
                       $conditionMet = false;
               }
               
               // Si une condition n'est pas remplie, on s'arrête
               if (!$conditionMet) {
                   $allConditionsMet = false;
                   break;
               }
           }
           
           return $allConditionsMet;
       }
       
       /**
        * Exécute une action en fonction de son type
        *
        * @param string $actionType Type d'action
        * @param array $actionParams Paramètres de l'action
        * @param array $eventData Données de l'événement
        * @return mixed Résultat de l'action
        */
       private function executeAction($actionType, $actionParams, $eventData) {
           switch ($actionType) {
               case 'create_task':
                   return $this->createTask($actionParams, $eventData);
               case 'send_notification':
                   return $this->sendNotification($actionParams, $eventData);
               case 'update_status':
                   return $this->updateStatus($actionParams, $eventData);
               case 'create_document':
                   return $this->createDocument($actionParams, $eventData);
               case 'add_calendar_event':
                   return $this->addCalendarEvent($actionParams, $eventData);
               case 'assign_to_user':
                   return $this->assignToUser($actionParams, $eventData);
               default:
                   return array('error' => 'Type d\'action non supporté');
           }
       }
       
       /**
        * Crée une tâche automatiquement
        */
       private function createTask($params, $eventData) {
           try {
               require_once DOL_DOCUMENT_ROOT . '/projet/class/task.class.php';
               
               $task = new Task($this->db);
               
               // Paramètres de base
               $task->label = $this->replaceVariables($params['title'], $eventData);
               $task->description = $this->replaceVariables($params['description'] ?? '', $eventData);
               
               // Assignation
               if (isset($params['assigned_to'])) {
                   if ($params['assigned_to'] == 'auto_conseiller_referent' && isset($eventData['fk_user_responsable'])) {
                       $task->fk_user_creat = $eventData['fk_user_responsable'];
                   } else {
                       $task->fk_user_creat = $params['assigned_to'];
                   }
               }
               
               // Date d'échéance
               if (isset($params['due_date'])) {
                   if (strpos($params['due_date'], '+') === 0) {
                       // Format "+X days", "+1 month", etc.
                       $task->date_deadline = dol_time_plus_duree(dol_now(), substr($params['due_date'], 1));
                   } else {
                       // Date spécifique
                       $task->date_deadline = strtotime($params['due_date']);
                   }
               }
               
               // Lier au projet/dossier
               if (isset($eventData['fk_dossier'])) {
                   // Récupérer le projet associé au dossier
                   $dossierId = $eventData['fk_dossier'];
                   // Code pour récupérer le projet lié au dossier...
                   $task->fk_project = $projectId;
               }
               
               // Autres paramètres
               $task->progress = 0;
               $task->priority = $params['priority'] ?? 0;
               
               // Créer la tâche
               $taskId = $task->create($user);
               
               if ($taskId > 0) {
                   // Succès
                   return array(
                       'success' => true,
                       'task_id' => $taskId,
                       'message' => 'Tâche créée avec succès'
                   );
               } else {
                   // Échec
                   return array(
                       'success' => false,
                       'error' => $task->error
                   );
               }
           } catch (Exception $e) {
               return array(
                   'success' => false,
                   'error' => $e->getMessage()
               );
           }
       }
       
       /**
        * Envoie une notification
        */
       private function sendNotification($params, $eventData) {
           // Code pour envoyer notification...
       }
       
       /**
        * Remplace les variables dans un texte par leurs valeurs
        */
       private function replaceVariables($text, $eventData) {
           // Remplacement des variables avec le format {{variable}}
           preg_match_all('/\{\{([^}]+)\}\}/', $text, $matches);
           
           if (isset($matches[1])) {
               foreach ($matches[1] as $match) {
                   $value = $this->extractValue($match, $eventData);
                   $text = str_replace('{{' . $match . '}}', $value, $text);
               }
           }
           
           return $text;
       }
       
       /**
        * Extrait une valeur à partir d'un chemin dans les données
        */
       private function extractValue($path, $data) {
           $segments = explode('.', $path);
           $current = $data;
           
           foreach ($segments as $segment) {
               if (isset($current[$segment])) {
                   $current = $current[$segment];
               } else {
                   return null;
               }
           }
           
           return $current;
       }
       
       /**
        * Enregistre l'exécution d'une règle de workflow
        */
       private function logWorkflowExecution($ruleId, $eventType, $eventData, $result) {
           // Code pour enregistrer dans log...
       }
   }
   ```

2. **Interface d'administration des workflows:**
   ```php
   /**
    * Page d'administration des règles de workflow
    */
   
   // Entêtes Dolibarr
   require '../main.inc.php';
   require_once DOL_DOCUMENT_ROOT.'/core/lib/admin.lib.php';
   require_once '../class/utils/elaskaworkflow.class.php';
   
   // Permissions et init
   $langs->loadLangs(array("admin", "elaska@elaska"));
   
   if (!$user->admin && !$user->rights->elaska->workflow->configure) {
       accessforbidden();
   }
   
   $action = GETPOST('action', 'alpha');
   
   // Instancier le moteur de workflow
   $workflowEngine = new ElaskaWorkflowEngine($db);
   
   // Actions
   if ($action == 'add') {
       // Traitement de l'ajout d'une règle
   } elseif ($action == 'edit') {
       // Traitement de l'édition d'une règle
   } elseif ($action == 'delete') {
       // Traitement de la suppression d'une règle
   } elseif ($action == 'toggle') {
       // Activation/désactivation d'une règle
   }
   
   // Charge la liste des règles
   $rules = $workflowEngine->listRules();
   
   // Affichage page
   $title = $langs->trans("ElaskaWorkflowSetup");
   
   llxHeader('', $title);
   
   print load_fiche_titre($title, '', 'title_setup');
   
   // Liens d'actions
   print '<div class="tabsAction">';
   print '<a class="butAction" href="'.DOL_URL_ROOT.'/custom/elaska/admin/workflows.php?action=new">'.$langs->trans("AddRule").'</a>';
   print '</div>';
   
   // Tableau des règles
   print '<table class="noborder centpercent">';
   print '<tr class="liste_titre">';
   print '<td>'.$langs->trans("RuleName").'</td>';
   print '<td>'.$langs->trans("TriggerEvent").'</td>';
   print '<td>'.$langs->trans("ActionType").'</td>';
   print '<td>'.$langs->trans("Status").'</td>';
   print '<td></td>';
   print '</tr>';
   
   foreach ($rules as $rule) {
       print '<tr class="oddeven">';
       print '<td>'.$rule['name'].'</td>';
       print '<td>'.$workflowEngine->getTriggerLabel($rule['trigger']).'</td>';
       print '<td>'.$workflowEngine->getActionTypeLabel($rule['action']).'</td>';
       print '<td>'.($rule['active'] ? $langs->trans("Enabled") : $langs->trans("Disabled")).'</td>';
       print '<td class="right">';
       print '<a href="'.DOL_URL_ROOT.'/custom/elaska/admin/workflows.php?action=edit&id='.$rule['id'].'">'.img_edit().'</a>';
       print '&nbsp;';
       print '<a href="'.DOL_URL_ROOT.'/custom/elaska/admin/workflows.php?action=toggle&id='.$rule['id'].'">'.($rule['active'] ? img_picto($langs->trans("Disable"), 'switch_on') : img_picto($langs->trans("Enable"), 'switch_off')).'</a>';
       print '&nbsp;';
       print '<a href="'.DOL_URL_ROOT.'/custom/elaska/admin/workflows.php?action=delete&id='.$rule['id'].'">'.img_delete().'</a>';
       print '</td>';
       print '</tr>';
   }
   
   print '</table>';
   
   // Formulaire d'ajout/édition (affiché si action=new ou action=edit)
   if ($action == 'new' || $action == 'edit') {
       // Code du formulaire d'édition de règle...
   }
   
   llxFooter();
   ```

3. **Déclencheurs pour événements système:**
   ```php
   /**
    * Classe de triggers pour la gestion des événements du workflow
    */
   class ElaskaWorkflowTriggers extends DolibarrTriggers
   {
       protected $db;
       private $workflowEngine;
       
       /**
        * Constructor
        */
       public function __construct($db)
       {
           $this->db = $db;
           $this->name = 'elaska_workflow';
           $this->family = 'elaska';
           $this->description = "Triggers for Elaska workflow engine";
           $this->version = '1.0.0';
           
           // Initialiser le moteur de workflow
           require_once DOL_DOCUMENT_ROOT . '/custom/elaska/class/utils/elaskaworkflow.class.php';
           $this->workflowEngine = new ElaskaWorkflowEngine($db);
       }
       
       /**
        * Function called when a Dolibarr business event is done.
        *
        * @param string       $action     Event action code
        * @param Object       $object     Object
        * @param User         $user       Object user
        * @param Translate    $langs      Object langs
        * @param Conf         $conf       Object conf
        * @return int                     <0 if KO, 0 if no triggered ran, >0 if OK
        */
       public function runTrigger($action, $object, User $user, Translate $langs, Conf $conf)
       {
           $result = 0;
           
           // Mapping des événements Dolibarr vers événements workflow
           switch ($action) {
               // Dossier eLaska
               case 'ELASKA_DOSSIER_CREATE':
                   $eventData = $this->prepareDossierData($object);
                   $result = $this->processWorkflowEvent('dossier_creation', $eventData);
                   break;
                   
               case 'ELASKA_DOSSIER_MODIFY':
                   // Vérifier si c'est un changement de statut
                   if ($object->oldstatus !== $object->status) {
                       $eventData = $this->prepareDossierData($object);
                       $eventData['old_status'] = $object->oldstatus;
                       $result = $this->processWorkflowEvent('dossier_status_change', $eventData);
                   }
                   break;
                   
               // Timeline dossier
               case 'ELASKA_TIMELINE_ETAPE_MODIFY':
                   if ($object->oldstatus !== $object->statut_etape) {
                       $eventData = $this->prepareTimelineData($object);
                       $result = $this->processWorkflowEvent('timeline_step_change', $eventData);
                   }
                   break;
                   
               // Documents
               case 'ELASKA_DOCUMENT_CREATE':
                   $eventData = $this->prepareDocumentData($object);
                   $result = $this->processWorkflowEvent('document_upload', $eventData);
                   break;
                   
               // Rendez-vous
               case 'ELASKA_RDV_CREATE':
                   $eventData = $this->prepareRdvData($object);
                   $result = $this->processWorkflowEvent('rdv_scheduled', $eventData);
                   break;
                   
               // Tâches
               case 'TASK_MODIFY':
                   if ($object->progress == 100 && $object->oldprogress < 100) {
                       $eventData = $this->prepareTaskData($object);
                       $result = $this->processWorkflowEvent('task_completed', $eventData);
                   }
                   break;
                   
               // Clients
               case 'ELASKA_CLIENT_CREATE':
                   $eventData = $this->prepareClientData($object);
                   $result = $this->processWorkflowEvent('client_creation', $eventData);
                   break;
                   
               // Objectifs de vie
               case 'ELASKA_OBJECTIF_CREATE':
                   $eventData = $this->prepareObjectifData($object);
                   $result = $this->processWorkflowEvent('objectif_vie_created', $eventData);
                   break;
                   
               // Autres événements...
           }
           
           return $result;
       }
       
       /**
        * Prépare les données d'un dossier pour le workflow
        */
       private function prepareDossierData($object)
       {
           return array(
               'fk_dossier' => $object->id,
               'ref_elaska' => $object->ref_elaska,
               'fk_soc' => $object->fk_soc,
               'fk_user_responsable' => $object->fk_user_responsable,
               'type_dossier' => $object->type_dossier,
               'libelle' => $object->libelle,
               'statut' => $object->statut,
               'date_creation' => $object->date_creation,
               'date_echeance' => $object->date_echeance
           );
       }
       
       // Autres méthodes de préparation des données...
       
       /**
        * Traite un événement avec le moteur de workflow
        */
       private function processWorkflowEvent($eventType, $eventData)
       {
           $results = $this->workflowEngine->processEvent($eventType, $eventData);
           
           // Si au moins une action a été exécutée
           if (!empty($results)) {
               return 1;
           }
           
           return 0;
       }
   }
   ```

### 6.2. Système de Champs Dynamiques

Le module eLaska-ESaiko implémente un système de champs dynamiques pour permettre la personnalisation des entités sans modification de la structure de base.

**Spécifications techniques:**

1. **Structure de données:**
   ```php
   /**
    * Gestion des champs dynamiques
    */
   class ElaskaDynamicFields
   {
       private $db;
       
       /**
        * Constructor
        */
       public function __construct($db)
       {
           $this->db = $db;
       }
       
       /**
        * Ajoute une définition de champ dynamique
        *
        * @param string $entity_type Type d'entité (client, dossier, etc.)
        * @param array $field_def Définition du champ
        * @return int ID du champ ou <0 si erreur
        */
       public function addFieldDefinition($entity_type, $field_def)
       {
           // Vérification des données requises
           if (empty($field_def['name']) || empty($field_def['label']) || empty($field_def['type'])) {
               return -1;
           }
           
           // Valider le type de champ
           $allowed_types = array('text', 'textarea', 'number', 'date', 'datetime', 'select', 'radio', 'checkbox', 'email', 'phone', 'url');
           if (!in_array($field_def['type'], $allowed_types)) {
               return -2;
           }
           
           // Générer un code technique unique
           $code = preg_replace('/[^a-z0-9_]/i', '_', strtolower($field_def['name']));
           $code = 'df_' . $entity_type . '_' . $code;
           
           // Vérifier l'unicité du code
           $sql = "SELECT COUNT(*) as count FROM llx_elaska_dynamic_field_def WHERE code = '".$this->db->escape($code)."'";
           $resql = $this->db->query($sql);
           if ($resql) {
               $obj = $this->db->fetch_object($resql);
               if ($obj->count > 0) {
                   return -3; // Code déjà utilisé
               }
           } else {
               return -4; // Erreur SQL
           }
           
           // Préparer les options supplémentaires en JSON
           $options = array();
           
           // Options pour select, radio, checkbox
           if (in_array($field_def['type'], array('select', 'radio', 'checkbox')) && !empty($field_def['options'])) {
               $options['values'] = $field_def['options'];
           }
           
           // Règles de validation
           if (!empty($field_def['required'])) {
               $options['required'] = true;
           }
           
           if (!empty($field_def['min'])) {
               $options['min'] = $field_def['min'];
           }
           
           if (!empty($field_def['max'])) {
               $options['max'] = $field_def['max'];
           }
           
           if (!empty($field_def['regexp'])) {
               $options['regexp'] = $field_def['regexp'];
           }
           
           // Conditions d'affichage
           if (!empty($field_def['display_condition'])) {
               $options['display_condition'] = $field_def['display_condition'];
           }
           
           // Autres paramètres
           $options['placeholder'] = $field_def['placeholder'] ?? '';
           $options['help'] = $field_def['help'] ?? '';
           $options['default'] = $field_def['default'] ?? null;
           
           // Convertir en JSON
           $options_json = json_encode($options);
           
           // Insérer dans la base
           $sql = "INSERT INTO llx_elaska_dynamic_field_def (";
           $sql.= " entity_type,";
           $sql.= " code,";
           $sql.= " label,";
           $sql.= " type,";
           $sql.= " position,";
           $sql.= " options,";
           $sql.= " active";
           $sql.= ") VALUES (";
           $sql.= " '".$this->db->escape($entity_type)."',";
           $sql.= " '".$this->db->escape($code)."',";
           $sql.= " '".$this->db->escape($field_def['label'])."',";
           $sql.= " '".$this->db->escape($field_def['type'])."',";
           $sql.= " ".(int)($field_def['position'] ?? 0).",";
           $sql.= " '".$this->db->escape($options_json)."',";
           $sql.= " 1";
           $sql.= ")";
           
           $resql = $this->db->query($sql);
           if ($resql) {
               return $this->db->last_insert_id('llx_elaska_dynamic_field_def');
           } else {
               return -5;
           }
       }
       
       /**
        * Récupère les définitions de champs pour un type d'entité
        *
        * @param string $entity_type Type d'entité
        * @param bool $active_only Ne récupérer que les champs actifs
        * @return array Liste des définitions de champs
        */
       public function getFieldDefinitions($entity_type, $active_only = true)
       {
           $fields = array();
           
           $sql = "SELECT * FROM llx_elaska_dynamic_field_def WHERE entity_type = '".$this->db->escape($entity_type)."'";
           if ($active_only) {
               $sql .= " AND active = 1";
           }
           $sql .= " ORDER BY position ASC";
           
           $resql = $this->db->query($sql);
           if ($resql) {
               $num = $this->db->num_rows($resql);
               $i = 0;
               
               while ($i < $num) {
                   $obj = $this->db->fetch_object($resql);
                   
                   $field = array(
                       'id' => $obj->rowid,
                       'entity_type' => $obj->entity_type,
                       'code' => $obj->code,
                       'label' => $obj->label,
                       'type' => $obj->type,
                       'position' => $obj->position,
                       'options' => json_decode($obj->options, true),
                       'active' => $obj->active
                   );
                   
                   $fields[] = $field;
                   $i++;
               }
           }
           
           return $fields;
       }
       
       /**
        * Enregistre les valeurs des champs dynamiques pour une entité
        *
        * @param string $entity_type Type d'entité
        * @param int $entity_id ID de l'entité
        * @param array $values Valeurs des champs (code => valeur)
        * @return int 1 si OK, <0 si erreur
        */
       public function saveValues($entity_type, $entity_id, $values)
       {
           // Récupérer les définitions de champs
           $fieldDefs = $this->getFieldDefinitions($entity_type);
           
           // Tableau pour convertir code => id
           $fieldsById = array();
           foreach ($fieldDefs as $field) {
               $fieldsById[$field['code']] = $field;
           }
           
           // Supprimer les anciennes valeurs
           $sql = "DELETE FROM llx_elaska_dynamic_field_value";
           $sql.= " WHERE entity_type = '".$this->db->escape($entity_type)."'";
           $sql.= " AND entity_id = ".(int)$entity_id;
           $resql = $this->db->query($sql);
           
           // Insérer les nouvelles valeurs
           foreach ($values as $code => $value) {
               // Vérifier que le champ existe
               if (!isset($fieldsById[$code])) {
                   continue;
               }
               
               // Traitement selon le type de champ
               $field = $fieldsById[$code];
               $valueToSave = $value;
               
               // Conversion pour certains types
               if ($field['type'] == 'checkbox' && is_array($value)) {
                   $valueToSave = json_encode($value);
               } elseif ($field['type'] == 'date' && $value) {
                   $valueToSave = $this->db->idate($value);
               } elseif ($field['type'] == 'datetime' && $value) {
                   $valueToSave = $this->db->idate($value);
               }
               
               // Insertion
               $sql = "INSERT INTO llx_elaska_dynamic_field_value (";
               $sql.= " entity_type,";
               $sql.= " entity_id,";
               $sql.= " field_id,";
               $sql.= " value";
               $sql.= ") VALUES (";
               $sql.= " '".$this->db->escape($entity_type)."',";
               $sql.= " ".(int)$entity_id.",";
               $sql.= " ".(int)$field['id'].",";
               $sql.= " '".$this->db->escape($valueToSave)."'";
               $sql.= ")";
               
               $resql = $this->db->query($sql);
               if (!$resql) {
                   return -1;
               }
           }
           
           return 1;
       }
       
       /**
        * Récupère les valeurs des champs dynamiques pour une entité
        *
        * @param string $entity_type Type d'entité
        * @param int $entity_id ID de l'entité
        * @return array Valeurs des champs (code => valeur)
        */
       public function getValues($entity_type, $entity_id)
       {
           $values = array();
           
           // Récupérer les définitions de champs
           $fieldDefs = $this->getFieldDefinitions($entity_type);
           
           // Tableau pour convertir id => code
           $fieldCodes = array();
           $fieldTypes = array();
           foreach ($fieldDefs as $field) {
               $fieldCodes[$field['id']] = $field['code'];
               $fieldTypes[$field['id']] = $field['type'];
           }
           
           // Récupérer les valeurs
           $sql = "SELECT * FROM llx_elaska_dynamic_field_value";
           $sql.= " WHERE entity_type = '".$this->db->escape($entity_type)."'";
           $sql.= " AND entity_id = ".(int)$entity_id;
           
           $resql = $this->db->query($sql);
           if ($resql) {
               $num = $this->db->num_rows($resql);
               $i = 0;
               
               while ($i < $num) {
                   $obj = $this->db->fetch_object($resql);
                   
                   // Ignorer les champs dont la définition n'existe plus
                   if (!isset($fieldCodes[$obj->field_id])) {
                       $i++;
                       continue;
                   }
                   
                   // Récupérer le code du champ
                   $code = $fieldCodes[$obj->field_id];
                   $type = $fieldTypes[$obj->field_id];
                   
                   // Conversion selon le type
                   $value = $obj->value;
                   
                   if ($type == 'checkbox') {
                       $value = json_decode($value, true);
                   } elseif ($type == 'number') {
                       $value = floatval($value);
                   } elseif ($type == 'date' || $type == 'datetime') {
                       $value = $this->db->jdate($value);
                   }
                   
                   $values[$code] = $value;
                   $i++;
               }
           }
           
           return $values;
       }
       
       /**
        * Génère le HTML pour l'affichage/édition des champs dynamiques
        *
        * @param string $entity_type Type d'entité
        * @param array $values Valeurs actuelles (code => valeur)
        * @param bool $edit Mode édition ou affichage
        * @return string HTML
        */
       public function generateHTML($entity_type, $values = array(), $edit = true)
       {
           // Récupérer les définitions de champs
           $fieldDefs = $this->getFieldDefinitions($entity_type);
           
           $html = '<div class="dynamic-fields">' . "\n";
           
           foreach ($fieldDefs as $field) {
               $code = $field['code'];
               $label = $field['label'];
               $type = $field['type'];
               $options = $field['options'];
               
               // Valeur actuelle
               $value = isset($values[$code]) ? $values[$code] : ($options['default'] ?? '');
               
               // Condition d'affichage
               $display_condition = '';
               if (!empty($options['display_condition'])) {
                   $display_condition = ' data-condition="' . htmlspecialchars($options['display_condition']) . '"';
               }
               
               $html .= '<div class="form-group dynamic-field" data-field="' . $code . '"' . $display_condition . '>' . "\n";
               $html .= '  <label for="' . $code . '">' . $label;
               
               if (!empty($options['required'])) {
                   $html .= ' <span class="required">*</span>';
               }
               
               $html .= '</label>' . "\n";
               
               // Génération du champ selon son type
               if ($edit) {
                   switch ($type) {
                       case 'text':
                       case 'email':
                       case 'phone':
                       case 'url':
                           $html .= $this->generateInputField($code, $type, $value, $options);
                           break;
                       case 'textarea':
                           $html .= $this->generateTextareaField($code, $value, $options);
                           break;
                       case 'number':
                           $html .= $this->generateNumberField($code, $value, $options);
                           break;
                       case 'date':
                       case 'datetime':
                           $html .= $this->generateDateField($code, $type, $value, $options);
                           break;
                       case 'select':
                           $html .= $this->generateSelectField($code, $value, $options);
                           break;
                       case 'radio':
                           $html .= $this->generateRadioField($code, $value, $options);
                           break;
                       case 'checkbox':
                           $html .= $this->generateCheckboxField($code, $value, $options);
                           break;
                   }
               } else {
                   // Affichage simple en mode lecture
                   $html .= $this->generateDisplayValue($type, $value, $options);
               }
               
               // Aide
               if (!empty($options['help'])) {
                   $html .= '  <div class="help-block">' . $options['help'] . '</div>' . "\n";
               }
               
               $html .= '</div>' . "\n";
           }
           
           $html .= '</div>' . "\n";
           
           // Ajouter le JS pour les conditions d'affichage
           if ($edit) {
               $html .= '<script>
               $(document).ready(function() {
                   // Fonction pour évaluer les conditions d\'affichage
                   function evaluateConditions() {
                       $(".dynamic-field[data-condition]").each(function() {
                           var $field = $(this);
                           var condition = $field.data("condition");
                           var show = eval(condition);
                           $field.toggle(show);
                       });
                   }
                   
                   // Déclencher l\'évaluation au chargement
                   evaluateConditions();
                   
                   // Déclencher l\'évaluation au changement des champs
                   $(".dynamic-field input, .dynamic-field select, .dynamic-field textarea").on("change", function() {
                       evaluateConditions();
                   });
               });
               </script>';
           }
           
           return $html;
       }
       
       // Méthodes privées pour générer les différents types de champs
       private function generateInputField($code, $type, $value, $options)
       {
           // Code de génération d'un champ input...
       }
       
       // Autres méthodes de génération...
   }
   ```

2. **Page d'administration des champs dynamiques:**
   ```php
   /**
    * Page d'administration des champs dynamiques
    */
   
   // Entêtes Dolibarr
   require '../main.inc.php';
   require_once DOL_DOCUMENT_ROOT.'/core/lib/admin.lib.php';
   require_once '../class/utils/elaskadynamicfields.class.php';
   
   // Permissions et init
   $langs->loadLangs(array("admin", "elaska@elaska"));
   
   if (!$user->admin && !$user->rights->elaska->config->dynamicfields) {
       accessforbidden();
   }
   
   $action = GETPOST('action', 'alpha');
   $entity_type = GETPOST('entity_type', 'alpha');
   
   // Types d'entités supportés
   $entity_types = array(
       'client' => $langs->trans("Clients"),
       'dossier' => $langs->trans("Dossiers"),
       'dossier_particulier' => $langs->trans("DossiersParticuliers"),
       'dossier_association' => $langs->trans("DossiersAssociations"),
       'dossier_entreprise' => $langs->trans("DossiersEntreprises"),
       'dossier_createur' => $langs->trans("DossiersCreateurs"),
       'objectif_vie' => $langs->trans("ObjectifsVie"),
       'patrimoine' => $langs->trans("Patrimoine"),
       'contrat_assurance' => $langs->trans("ContratsAssurance"),
       'credit' => $langs->trans("Credits"),
       'sinistre' => $langs->trans("Sinistres"),
       'subvention' => $langs->trans("Subventions"),
       'contrat_fournisseur' => $langs->trans("ContratsFournisseurs"),
       'intervenant_externe' => $langs->trans("IntervenantsExternes")
   );
   
   // Instance de la classe
   $dynamicFields = new ElaskaDynamicFields($db);
   
   // Actions
   if ($action == 'add' && !empty($entity_type)) {
       // Récupérer les données du formulaire
       $field_def = array(
           'name' => GETPOST('field_name', 'alpha'),
           'label' => GETPOST('field_label', 'alpha'),
           'type' => GETPOST('field_type', 'alpha'),
           'position' => GETPOST('field_position', 'int'),
           'required' => GETPOST('field_required', 'int') ? true : false,
           'help' => GETPOST('field_help', 'none'),
           'placeholder' => GETPOST('field_placeholder', 'none'),
           'default' => GETPOST('field_default', 'none'),
       );
       
       // Options spécifiques selon le type
       switch ($field_def['type']) {
           case 'select':
           case 'radio':
           case 'checkbox':
               $options_str = GETPOST('field_options', 'none');
               $options_array = array();
               
               // Parser les options ligne par ligne (format: valeur|libellé)
               $lines = explode("\n", $options_str);
               foreach ($lines as $line) {
                   $line = trim($line);
                   if (empty($line)) continue;
                   
                   $parts = explode('|', $line);
                   if (count($parts) >= 2) {
                       $key = trim($parts[0]);
                       $label = trim($parts[1]);
                       $options_array[$key] = $label;
                   } else {
                       $options_array[$line] = $line;
                   }
               }
               
               $field_def['options'] = $options_array;
               break;
               
           case 'number':
               $field_def['min'] = GETPOST('field_min', 'alpha');
               $field_def['max'] = GETPOST('field_max', 'alpha');
               break;
               
           case 'text':
               $field_def['regexp'] = GETPOST('field_regexp', 'none');
               break;
       }
       
       // Condition d'affichage
       $condition = GETPOST('field_display_condition', 'none');
       if (!empty($condition)) {
           $field_def['display_condition'] = $condition;
       }
       
       // Ajouter le champ
       $result = $dynamicFields->addFieldDefinition($entity_type, $field_def);
       
       if ($result > 0) {
           setEventMessage($langs->trans("FieldAdded"), 'mesgs');
       } else {
           setEventMessage($langs->trans("ErrorAddingField"), 'errors');
       }
   } elseif ($action == 'edit') {
       // Code pour éditer un champ...
   } elseif ($action == 'delete') {
       // Code pour supprimer un champ...
   } elseif ($action == 'reorder') {
       // Code pour réordonner les champs...
   } elseif ($action == 'toggle') {
       // Code pour activer/désactiver un champ...
   }
   
   // Affichage page
   $title = $langs->trans("ElaskaDynamicFieldsSetup");
   
   llxHeader('', $title);
   
   print load_fiche_titre($title, '', 'title_setup');
   
   // Sélection du type d'entité
   print '<form method="get" action="'.$_SERVER["PHP_SELF"].'">';
   print '<div class="inline-block">';
   print $langs->trans("EntityType") . ': ';
   print '<select name="entity_type" class="flat" onchange="this.form.submit();">';
   foreach ($entity_types as $type => $label) {
       print '<option value="'.$type.'"';
       if ($entity_type == $type) print ' selected';
       print '>'.$label.'</option>';
   }
   print '</select>';
   print '</div>';
   print '</form>';
   
   if (!empty($entity_type)) {
       // Afficher les champs existants pour ce type d'entité
       $fields = $dynamicFields->getFieldDefinitions($entity_type, false);
       
       print '<div class="tabsAction">';
       print '<a class="butAction" href="'.DOL_URL_ROOT.'/custom/elaska/admin/dynamicfields.php?action=new&entity_type='.$entity_type.'">'.$langs->trans("AddDynamicField").'</a>';
       print '</div>';
       
       print '<table class="noborder centpercent">';
       print '<tr class="liste_titre">';
       print '<td>'.$langs->trans("FieldLabel").'</td>';
       print '<td>'.$langs->trans("FieldCode").'</td>';
       print '<td>'.$langs->trans("FieldType").'</td>';
       print '<td>'.$langs->trans("Position").'</td>';
       print '<td>'.$langs->trans("Required").'</td>';
       print '<td>'.$langs->trans("Status").'</td>';
       print '<td></td>';
       print '</tr>';
       
       foreach ($fields as $field) {
           print '<tr class="oddeven">';
           print '<td>'.$field['label'].'</td>';
           print '<td>'.$field['code'].'</td>';
           print '<td>'.$langs->trans("FieldType_".$field['type']).'</td>';
           print '<td>'.$field['position'].'</td>';
           print '<td>'.(!empty($field['options']['required']) ? $langs->trans("Yes") : $langs->trans("No")).'</td>';
           print '<td>'.($field['active'] ? $langs->trans("Enabled") : $langs->trans("Disabled")).'</td>';
           print '<td class="right">';
           print '<a href="'.DOL_URL_ROOT.'/custom/elaska/admin/dynamicfields.php?action=edit&id='.$field['id'].'&entity_type='.$entity_type.'">'.img_edit().'</a>';
           print '&nbsp;';
           print '<a href="'.DOL_URL_ROOT.'/custom/elaska/admin/dynamicfields.php?action=toggle&id='.$field['id'].'&entity_type='.$entity_type.'">'.($field['active'] ? img_picto($langs->trans("Disable"), 'switch_on') : img_picto($langs->trans("Enable"), 'switch_off')).'</a>';
           print '&nbsp;';
           print '<a href="'.DOL_URL_ROOT.'/custom/elaska/admin/dynamicfields.php?action=delete&id='.$field['id'].'&entity_type='.$entity_type.'">'.img_delete().'</a>';
           print '</td>';
           print '</tr>';
       }
       
       if (empty($fields)) {
           print '<tr><td colspan="7">'.$langs->trans("NoFields").'</td></tr>';
       }
       
       print '</table>';
       
       // Formulaire d'ajout (affiché si action=new)
       if ($action == 'new') {
           // Code du formulaire d'ajout...
       }
   } else {
       print '<div class="info">'.$langs->trans("SelectEntityType").'</div>';
   }
   
   llxFooter();
   ```

3. **Intégration dans les objets métier:**
   ```php
   /**
    * Exemple d'intégration dans la classe du dossier eLaska
    */
   class ElaskaDossier extends CommonObject
   {
       // [...] Propriétés et méthodes existantes
       
       /**
        * Champs dynamiques
        */
       public $dynamic_fields = array();
       
       /**
        * Charge les champs dynamiques de l'objet
        *
        * @return int 1 si OK, 0 si pas de champs, <0 si erreur
        */
       public function loadDynamicFields()
       {
           require_once DOL_DOCUMENT_ROOT . '/custom/elaska/class/utils/elaskadynamicfields.class.php';
           
           $dynamicFields = new ElaskaDynamicFields($this->db);
           
           // Déterminer le type d'entité selon le type de dossier
           $entity_type = 'dossier'; // Type générique par défaut
           
           // Types spécifiques selon le type de dossier
           if ($this->type_dossier == 'particulier') {
               $entity_type = 'dossier_particulier';
           } elseif ($this->type_dossier == 'association') {
               $entity_type = 'dossier_association';
           } elseif ($this->type_dossier == 'entreprise') {
               $entity_type = 'dossier_entreprise';
           } elseif ($this->type_dossier == 'createur') {
               $entity_type = 'dossier_createur';
           }
           
           // Charger les valeurs pour ce dossier
           $this->dynamic_fields = $dynamicFields->getValues($entity_type, $this->id);
           
           return !empty($this->dynamic_fields) ? 1 : 0;
       }
       
       /**
        * Enregistre les champs dynamiques de l'objet
        *
        * @param array $values Valeurs à enregistrer (si non fourni, utilise $this->dynamic_fields)
        * @return int 1 si OK, <0 si erreur
        */
       public function saveDynamicFields($values = null)
       {
           require_once DOL_DOCUMENT_ROOT . '/custom/elaska/class/utils/elaskadynamicfields.class.php';
           
           $dynamicFields = new ElaskaDynamicFields($this->db);
           
           // Si pas de valeurs fournies, utiliser les champs dynamiques de l'objet
           if ($values === null) {
               $values = $this->dynamic_fields;
           }
           
           // Déterminer le type d'entité comme dans loadDynamicFields()
           $entity_type = 'dossier';
           
           if ($this->type_dossier == 'particulier') {
               $entity_type = 'dossier_particulier';
           } elseif ($this->type_dossier == 'association') {
               $entity_type = 'dossier_association';
           } elseif ($this->type_dossier == 'entreprise') {
               $entity_type = 'dossier_entreprise';
           } elseif ($this->type_dossier == 'createur') {
               $entity_type = 'dossier_createur';
           }
           
           // Enregistrer les valeurs
           $result = $dynamicFields->saveValues($entity_type, $this->id, $values);
           
           // Mettre à jour l'objet si succès
           if ($result > 0) {
               $this->dynamic_fields = $values;
           }
           
           return $result;
       }
       
       /**
        * Générer le HTML pour l'affichage/édition des champs dynamiques
        *
        * @param bool $edit Mode édition ou affichage
        * @return string HTML
        */
       public function generateDynamicFieldsHTML($edit = true)
       {
           require_once DOL_DOCUMENT_ROOT . '/custom/elaska/class/utils/elaskadynamicfields.class.php';
           
           $dynamicFields = new ElaskaDynamicFields($this->db);
           
           // Déterminer le type d'entité comme précédemment
           $entity_type = 'dossier';
           
           if ($this->type_dossier == 'particulier') {
               $entity_type = 'dossier_particulier';
           } elseif ($this->type_dossier == 'association') {
               $entity_type = 'dossier_association';
           } elseif ($this->type_dossier == 'entreprise') {
               $entity_type = 'dossier_entreprise';
           } elseif ($this->type_dossier == 'createur') {
               $entity_type = 'dossier_createur';
           }
           
           // Générer le HTML
           return $dynamicFields->generateHTML($entity_type, $this->dynamic_fields, $edit);
       }
   }
   ```

### 6.3. Système de Tags/Étiquettes

Le module eLaska-ESaiko implémente un système de tags pour permettre une catégorisation flexible des entités métier.

**Spécifications techniques:**

1. **Classe de gestion des tags:**
   ```php
   /**
    * Gestion des tags/étiquettes
    */
   class ElaskaTagManager
   {
       private $db;
       
       /**
        * Constructor
        */
       public function __construct($db)
       {
           $this->db = $db;
       }
       
       /**
        * Crée un tag dans le système
        *
        * @param string $label Libellé du tag
        * @param string $color Couleur au format HEX (#RRGGBB)
        * @param string $type Type de tag (catégorie)
        * @return int ID du tag ou <0 si erreur
        */
       public function createTag($label, $color = '#007bff', $type = '')
       {
           // Vérifier si le tag existe déjà (même libellé et type)
           $sql = "SELECT rowid FROM llx_elaska_tag";
           $sql.= " WHERE label = '".$this->db->escape($label)."'";
           if (!empty($type)) {
               $sql.= " AND type = '".$this->db->escape($type)."'";
           } else {
               $sql.= " AND (type = '' OR type IS NULL)";
           }
           
           $resql = $this->db->query($sql);
           if ($resql && $this->db->num_rows($resql) > 0) {
               $obj = $this->db->fetch_object($resql);
               return $obj->rowid; // Tag existe déjà, retourner son ID
           }
           
           // Valider la couleur
           if (!preg_match('/^#[a-fA-F0-9]{6}$/', $color)) {
               $color = '#007bff'; // Couleur par défaut si invalide
           }
           
           // Créer le tag
           $sql = "INSERT INTO llx_elaska_tag (label, color, type, active)";
           $sql.= " VALUES ('".$this->db->escape($label)."',";
           $sql.= " '".$this->db->escape($color)."',";
           $sql.= " '".$this->db->escape($type)."',";
           $sql.= " 1)";
           
           $resql = $this->db->query($sql);
           if ($resql) {
               return $this->db->last_insert_id('llx_elaska_tag');
           }
           
           return -1;
       }
       
       /**
        * Récupère tous les tags du système
        *
        * @param string $type Type de tag (optionnel)
        * @param bool $activeOnly Ne récupérer que les tags actifs
        * @return array Liste des tags
        */
       public function getAllTags($type = '', $activeOnly = true)
       {
           $tags = array();
           
           $sql = "SELECT * FROM llx_elaska_tag";
           $where = array();
           
           if (!empty($type)) {
               $where[] = "type = '".$this->db->escape($type)."'";
           }
           
           if ($activeOnly) {
               $where[] = "active = 1";
           }
           
           if (!empty($where)) {
               $sql.= " WHERE " . implode(" AND ", $where);
           }
           
           $sql.= " ORDER BY type, label";
           
           $resql = $this->db->query($sql);
           if ($resql) {
               $num = $this->db->num_rows($resql);
               $i = 0;
               
               while ($i < $num) {
                   $obj = $this->db->fetch_object($resql);
                   
                   $tags[] = array(
                       'id' => $obj->rowid,
                       'label' => $obj->label,
                       'color' => $obj->color,
                       'type' => $obj->type,
                       'active' => $obj->active
                   );
                   
                   $i++;
               }
           }
           
           return $tags;
       }
       
       /**
        * Associe des tags à une entité
        *
        * @param string $entity_type Type d'entité (client, dossier, etc.)
        * @param int $entity_id ID de l'entité
        * @param array $tag_ids IDs des tags à associer
        * @return int >0 si OK, <0 si erreur
        */
       public function tagEntity($entity_type, $entity_id, $tag_ids)
       {
           // Supprimer les associations existantes
           $sql = "DELETE FROM llx_elaska_tag_link";
           $sql.= " WHERE entity_type = '".$this->db->escape($entity_type)."'";
           $sql.= " AND entity_id = ".(int)$entity_id;
           
           $resql = $this->db->query($sql);
           
           // Associer les nouveaux tags
           if (!empty($tag_ids)) {
               foreach ($tag_ids as $tag_id) {
                   $sql = "INSERT INTO llx_elaska_tag_link (tag_id, entity_type, entity_id)";
                   $sql.= " VALUES (".(int)$tag_id.",";
                   $sql.= " '".$this->db->escape($entity_type)."',";
                   $sql.= " ".(int)$entity_id.")";
                   
                   $resql = $this->db->query($sql);
                   if (!$resql) {
                       return -1;
                   }
               }
           }
           
           return 1;
       }
       
       /**
        * Récupère les tags associés à une entité
        *
        * @param string $entity_type Type d'entité
        * @param int $entity_id ID de l'entité
        * @return array Liste des tags associés
        */
       public function getEntityTags($entity_type, $entity_id)
       {
           $tags = array();
           
           $sql = "SELECT t.rowid, t.label, t.color, t.type";
           $sql.= " FROM llx_elaska_tag as t";
           $sql.= " JOIN llx_elaska_tag_link as l ON t.rowid = l.tag_id";
           $sql.= " WHERE l.entity_type = '".$this->db->escape($entity_type)."'";
           $sql.= " AND l.entity_id = ".(int)$entity_id;
           $sql.= " AND t.active = 1";
           $sql.= " ORDER BY t.type, t.label";
           
           $resql = $this->db->query($sql);
           if ($resql) {
              ```php
               $num = $this->db->num_rows($resql);
               $i = 0;
               
               while ($i < $num) {
                   $obj = $this->db->fetch_object($resql);
                   
                   $tags[] = array(
                       'id' => $obj->rowid,
                       'label' => $obj->label,
                       'color' => $obj->color,
                       'type' => $obj->type
                   );
                   
                   $i++;
               }
           }
           
           return $tags;
       }
       
       /**
        * Recherche des entités par tags
        *
        * @param string $entity_type Type d'entité à rechercher
        * @param array $tag_ids IDs des tags à rechercher
        * @param bool $match_all Tous les tags doivent correspondre (AND) ou au moins un (OR)
        * @return array Liste des IDs d'entités correspondantes
        */
       public function findEntitiesByTags($entity_type, $tag_ids, $match_all = true)
       {
           $entity_ids = array();
           
           if (empty($tag_ids)) {
               return $entity_ids;
           }
           
           if ($match_all) {
               // Tous les tags doivent correspondre (AND)
               $sql = "SELECT l.entity_id, COUNT(DISTINCT l.tag_id) as tag_count";
               $sql.= " FROM llx_elaska_tag_link as l";
               $sql.= " WHERE l.entity_type = '".$this->db->escape($entity_type)."'";
               $sql.= " AND l.tag_id IN (" . implode(',', array_map('intval', $tag_ids)) . ")";
               $sql.= " GROUP BY l.entity_id";
               $sql.= " HAVING tag_count = " . count($tag_ids);
           } else {
               // Au moins un tag doit correspondre (OR)
               $sql = "SELECT DISTINCT l.entity_id";
               $sql.= " FROM llx_elaska_tag_link as l";
               $sql.= " WHERE l.entity_type = '".$this->db->escape($entity_type)."'";
               $sql.= " AND l.tag_id IN (" . implode(',', array_map('intval', $tag_ids)) . ")";
           }
           
           $resql = $this->db->query($sql);
           if ($resql) {
               $num = $this->db->num_rows($resql);
               $i = 0;
               
               while ($i < $num) {
                   $obj = $this->db->fetch_object($resql);
                   $entity_ids[] = $obj->entity_id;
                   $i++;
               }
           }
           
           return $entity_ids;
       }
       
       /**
        * Génère le HTML pour un sélecteur de tags
        *
        * @param string $entity_type Type d'entité
        * @param array $selected_tags IDs des tags sélectionnés
        * @param string $input_name Nom du champ de formulaire
        * @param bool $filter_mode Mode filtrage (true) ou sélection (false)
        * @return string HTML
        */
       public function generateTagSelector($entity_type, $selected_tags = array(), $input_name = 'tags[]', $filter_mode = false)
       {
           // Récupérer tous les tags actifs
           $all_tags = $this->getAllTags();
           
           // Regrouper les tags par type
           $grouped_tags = array();
           foreach ($all_tags as $tag) {
               $type = !empty($tag['type']) ? $tag['type'] : $this->translate('NoCategory');
               if (!isset($grouped_tags[$type])) {
                   $grouped_tags[$type] = array();
               }
               $grouped_tags[$type][] = $tag;
           }
           
           // Générer le HTML
           $html = '<div class="elaska-tag-selector">';
           
           if ($filter_mode) {
               // Mode filtre: afficher condition AND/OR
               $html .= '<div class="tag-filter-mode">';
               $html .= '<label><input type="radio" name="tag_filter_mode" value="and" checked> '.$this->translate('MatchAllTags').'</label>';
               $html .= '<label><input type="radio" name="tag_filter_mode" value="or"> '.$this->translate('MatchAnyTag').'</label>';
               $html .= '</div>';
           }
           
           // Afficher les tags par catégorie
           foreach ($grouped_tags as $type => $tags) {
               $html .= '<div class="tag-category">';
               $html .= '<h4>' . $type . '</h4>';
               $html .= '<div class="tag-list">';
               
               foreach ($tags as $tag) {
                   $is_selected = in_array($tag['id'], $selected_tags);
                   $selected_class = $is_selected ? 'selected' : '';
                   $checked = $is_selected ? 'checked' : '';
                   
                   $html .= '<div class="tag-item ' . $selected_class . '" style="background-color: ' . $tag['color'] . '">';
                   $html .= '<input type="checkbox" id="tag_' . $tag['id'] . '" name="' . $input_name . '" value="' . $tag['id'] . '" ' . $checked . '>';
                   $html .= '<label for="tag_' . $tag['id'] . '">' . $tag['label'] . '</label>';
                   $html .= '</div>';
               }
               
               $html .= '</div>'; // .tag-list
               $html .= '</div>'; // .tag-category
           }
           
           $html .= '</div>'; // .elaska-tag-selector
           
           // Ajouter le script pour gestion interactive
           $html .= '<script>
               $(document).ready(function() {
                   $(".elaska-tag-selector .tag-item").click(function() {
                       var checkbox = $(this).find("input[type=checkbox]");
                       checkbox.prop("checked", !checkbox.prop("checked"));
                       $(this).toggleClass("selected");
                   });
                   
                   $(".elaska-tag-selector input[type=checkbox]").click(function(e) {
                       e.stopPropagation();
                       $(this).closest(".tag-item").toggleClass("selected");
                   });
               });
           </script>';
           
           // Ajouter le CSS
           $html .= '<style>
               .elaska-tag-selector .tag-category { margin-bottom: 10px; }
               .elaska-tag-selector .tag-category h4 { margin: 5px 0; }
               .elaska-tag-selector .tag-list { display: flex; flex-wrap: wrap; }
               .elaska-tag-selector .tag-item {
                   display: inline-flex;
                   align-items: center;
                   margin: 3px;
                   padding: 2px 8px;
                   border-radius: 15px;
                   cursor: pointer;
                   opacity: 0.7;
                   color: #fff;
                   text-shadow: 0 0 2px rgba(0,0,0,0.5);
               }
               .elaska-tag-selector .tag-item.selected {
                   opacity: 1;
                   box-shadow: 0 0 5px rgba(0,0,0,0.3);
               }
               .elaska-tag-selector .tag-item input[type=checkbox] {
                   margin-right: 5px;
               }
               .elaska-tag-selector .tag-filter-mode {
                   margin-bottom: 10px;
               }
           </style>';
           
           return $html;
       }
       
       /**
        * Génère le HTML pour afficher les tags d'une entité
        *
        * @param array $tags Tags à afficher
        * @return string HTML
        */
       public function generateTagsDisplay($tags)
       {
           $html = '<div class="elaska-tags-display">';
           
           foreach ($tags as $tag) {
               $html .= '<span class="elaska-tag" style="background-color: ' . $tag['color'] . '">';
               $html .= $tag['label'];
               $html .= '</span>';
           }
           
           $html .= '</div>';
           
           // Ajouter le CSS
           $html .= '<style>
               .elaska-tags-display {
                   display: flex;
                   flex-wrap: wrap;
               }
               .elaska-tags-display .elaska-tag {
                   display: inline-block;
                   margin: 2px;
                   padding: 2px 8px;
                   border-radius: 15px;
                   color: #fff;
                   font-size: 0.85em;
                   text-shadow: 0 0 2px rgba(0,0,0,0.5);
               }
           </style>';
           
           return $html;
       }
       
       /**
        * Traduction simple (à remplacer par appel à $langs)
        */
       private function translate($key)
       {
           $translations = array(
               'NoCategory' => 'Sans catégorie',
               'MatchAllTags' => 'Tous les tags (ET)',
               'MatchAnyTag' => 'Au moins un tag (OU)'
           );
           
           return isset($translations[$key]) ? $translations[$key] : $key;
       }
   }
   ```

2. **Intégration dans les objets métier:**
   ```php
   /**
    * Exemple d'intégration dans la classe du dossier eLaska
    */
   class ElaskaDossier extends CommonObject
   {
       // [...] Propriétés et méthodes existantes
       
       /**
        * Tags associés au dossier
        */
       public $tags = array();
       
       /**
        * Charge les tags associés au dossier
        *
        * @return int >0 si OK, <0 si erreur
        */
       public function loadTags()
       {
           require_once DOL_DOCUMENT_ROOT . '/custom/elaska/class/utils/elaskatagmanager.class.php';
           
           $tagManager = new ElaskaTagManager($this->db);
           
           // Charger les tags
           $this->tags = $tagManager->getEntityTags('dossier', $this->id);
           
           return count($this->tags);
       }
       
       /**
        * Associe des tags au dossier
        *
        * @param array $tag_ids IDs des tags à associer
        * @return int >0 si OK, <0 si erreur
        */
       public function setTags($tag_ids)
       {
           require_once DOL_DOCUMENT_ROOT . '/custom/elaska/class/utils/elaskatagmanager.class.php';
           
           $tagManager = new ElaskaTagManager($this->db);
           
           // Associer les tags
           $result = $tagManager->tagEntity('dossier', $this->id, $tag_ids);
           
           if ($result > 0) {
               // Recharger les tags
               $this->loadTags();
           }
           
           return $result;
       }
       
       /**
        * Génère le HTML pour afficher les tags du dossier
        *
        * @return string HTML
        */
       public function getTagsHTML()
       {
           require_once DOL_DOCUMENT_ROOT . '/custom/elaska/class/utils/elaskatagmanager.class.php';
           
           $tagManager = new ElaskaTagManager($this->db);
           
           // Générer l'affichage
           return $tagManager->generateTagsDisplay($this->tags);
       }
   }
   ```

3. **Page d'administration des tags:**
   ```php
   /**
    * Page d'administration des tags
    */
   
   // Entêtes Dolibarr
   require '../main.inc.php';
   require_once DOL_DOCUMENT_ROOT.'/core/lib/admin.lib.php';
   require_once '../class/utils/elaskatagmanager.class.php';
   
   // Permissions et init
   $langs->loadLangs(array("admin", "elaska@elaska"));
   
   if (!$user->admin && !$user->rights->elaska->config->tags) {
       accessforbidden();
   }
   
   $action = GETPOST('action', 'alpha');
   $tagType = GETPOST('tag_type', 'alpha');
   
   // Instance du gestionnaire de tags
   $tagManager = new ElaskaTagManager($db);
   
   // Actions
   if ($action == 'add') {
       // Ajout d'un nouveau tag
       $label = GETPOST('tag_label', 'alpha');
       $color = GETPOST('tag_color', 'alpha');
       $type = GETPOST('tag_type', 'alpha');
       
       if (!empty($label)) {
           $result = $tagManager->createTag($label, $color, $type);
           if ($result > 0) {
               setEventMessage($langs->trans("TagCreated"), 'mesgs');
           } else {
               setEventMessage($langs->trans("ErrorCreatingTag"), 'errors');
           }
       }
   } elseif ($action == 'edit') {
       // Édition d'un tag existant
       $id = GETPOST('id', 'int');
       $label = GETPOST('tag_label', 'alpha');
       $color = GETPOST('tag_color', 'alpha');
       $type = GETPOST('tag_type', 'alpha');
       
       if (!empty($label) && !empty($id)) {
           // Code pour mise à jour du tag...
       }
   } elseif ($action == 'delete') {
       // Suppression d'un tag
       $id = GETPOST('id', 'int');
       
       if (!empty($id)) {
           // Code pour suppression du tag...
       }
   } elseif ($action == 'toggle') {
       // Activation/désactivation d'un tag
       $id = GETPOST('id', 'int');
       
       if (!empty($id)) {
           // Code pour activation/désactivation du tag...
       }
   }
   
   // Affichage page
   $title = $langs->trans("ElaskaTagsManagement");
   
   llxHeader('', $title);
   
   print load_fiche_titre($title, '', 'title_setup');
   
   // Formulaire de filtrage par type
   print '<form method="get" action="'.$_SERVER["PHP_SELF"].'">';
   print '<div class="inline-block">';
   print $langs->trans("TagType") . ': ';
   print '<select name="tag_type" class="flat" onchange="this.form.submit();">';
   print '<option value="">'.$langs->trans("All").'</option>';
   
   // Récupérer les types disponibles
   $types = array(); // À remplir avec les types existants
   
   foreach ($types as $type) {
       print '<option value="'.$type.'"';
       if ($tagType == $type) print ' selected';
       print '>'.$type.'</option>';
   }
   
   print '</select>';
   print '</div>';
   print '</form>';
   
   // Actions
   print '<div class="tabsAction">';
   print '<a class="butAction" href="'.$_SERVER["PHP_SELF"].'?action=new">'.$langs->trans("AddTag").'</a>';
   print '</div>';
   
   // Liste des tags
   $tags = $tagManager->getAllTags($tagType, false);
   
   print '<table class="noborder centpercent">';
   print '<tr class="liste_titre">';
   print '<td>'.$langs->trans("TagLabel").'</td>';
   print '<td>'.$langs->trans("Color").'</td>';
   print '<td>'.$langs->trans("TagType").'</td>';
   print '<td>'.$langs->trans("Status").'</td>';
   print '<td></td>';
   print '</tr>';
   
   foreach ($tags as $tag) {
       print '<tr class="oddeven">';
       print '<td>';
       print '<span class="tag-preview" style="display:inline-block;width:15px;height:15px;border-radius:50%;background-color:'.$tag['color'].'"></span> ';
       print $tag['label'];
       print '</td>';
       print '<td>'.$tag['color'].'</td>';
       print '<td>'.($tag['type'] ? $tag['type'] : '-').'</td>';
       print '<td>'.($tag['active'] ? $langs->trans("Enabled") : $langs->trans("Disabled")).'</td>';
       print '<td class="right">';
       print '<a href="'.$_SERVER["PHP_SELF"].'?action=edit&id='.$tag['id'].'">'.img_edit().'</a>';
       print '&nbsp;';
       print '<a href="'.$_SERVER["PHP_SELF"].'?action=toggle&id='.$tag['id'].'">'.($tag['active'] ? img_picto($langs->trans("Disable"), 'switch_on') : img_picto($langs->trans("Enable"), 'switch_off')).'</a>';
       print '&nbsp;';
       print '<a href="'.$_SERVER["PHP_SELF"].'?action=delete&id='.$tag['id'].'">'.img_delete().'</a>';
       print '</td>';
       print '</tr>';
   }
   
   if (empty($tags)) {
       print '<tr><td colspan="5">'.$langs->trans("NoTags").'</td></tr>';
   }
   
   print '</table>';
   
   // Formulaire d'ajout/édition (affiché si action=new ou action=edit)
   if ($action == 'new' || $action == 'edit') {
       // Code du formulaire d'ajout/édition...
   }
   
   llxFooter();
   ```

### 6.4. Gestion des Communications

Le module eLaska-ESaiko comprend un système complet pour gérer les communications multi-canal avec les clients et les intervenants externes.

**Spécifications techniques:**

1. **Classe de gestion des communications:**
   ```php
   /**
    * Gestion des communications
    */
   class ElaskaCommunication extends CommonObject
   {
       /**
        * @var DoliDB Database handler
        */
       public $db;
       
       /**
        * @var string ID to identify managed object
        */
       public $element = 'elaska_communication';
       
       /**
        * @var string Name of table without prefix where object is stored
        */
       public $table_element = 'elaska_communication';
       
       /**
        * @var int Entity
        */
       public $entity;
       
       /**
        * @var int ID
        */
       public $id;
       
       /**
        * @var string Référence eLaska
        */
       public $ref_elaska;
       
       /**
        * @var string Type de communication (email, message_portail, appel, courrier, etc.)
        */
       public $type;
       
       /**
        * @var string Direction (entrant, sortant)
        */
       public $direction;
       
       /**
        * @var string Sujet/titre
        */
       public $sujet;
       
       /**
        * @var string Contenu de la communication
        */
       public $contenu;
       
       /**
        * @var int ID du client concerné
        */
       public $fk_soc;
       
       /**
        * @var int ID du dossier concerné (optionnel)
        */
       public $fk_dossier;
       
       /**
        * @var int ID de l'expéditeur (0 si client/externe)
        */
       public $fk_user_expediteur;
       
       /**
        * @var int ID du destinataire (0 si client/externe)
        */
       public $fk_user_destinataire;
       
       /**
        * @var string Expéditeur externe (email, nom, etc.)
        */
       public $expediteur_externe;
       
       /**
        * @var string Destinataire externe (email, nom, etc.)
        */
       public $destinataire_externe;
       
       /**
        * @var int Date de la communication
        */
       public $date_comm;
       
       /**
        * @var int Date de lecture
        */
       public $date_lecture;
       
       /**
        * @var string Statut (brouillon, envoyé, lu, répondu, etc.)
        */
       public $statut;
       
       /**
        * @var int ID réponse à une autre communication
        */
       public $fk_comm_parent;
       
       /**
        * @var string Tags/catégories (JSON)
        */
       public $tags;
       
       /**
        * @var int Niveau de confidentialité (1=normal, 2=confidentiel, 3=très confidentiel)
        */
       public $confidentialite;
       
       /**
        * @var string Informations techniques supplémentaires (JSON)
        */
       public $infos_techniques;
       
       /**
        * Constructor
        *
        * @param DoliDB $db Database handler
        */
       public function __construct($db)
       {
           $this->db = $db;
           $this->date_comm = dol_now();
           $this->statut = 'brouillon';
           $this->confidentialite = 1;
       }
       
       /**
        * Create communication in database
        *
        * @param User $user User that creates
        * @param bool $notrigger false=launch triggers after, true=disable triggers
        * @return int <0 if KO, Id of created object if OK
        */
       public function create(User $user, $notrigger = false)
       {
           global $conf;
           
           $error = 0;
           
           // Clean parameters
           $this->sujet = trim($this->sujet);
           $this->contenu = trim($this->contenu);
           if (empty($this->date_comm)) $this->date_comm = dol_now();
           
           // Générer une référence eLaska si non fournie
           if (empty($this->ref_elaska)) {
               $this->ref_elaska = $this->getNextNumRef();
           }
           
           $this->db->begin();
           
           // Insert request
           $sql = "INSERT INTO " . MAIN_DB_PREFIX . $this->table_element;
           $sql .= " (entity, ref_elaska, type, direction, sujet, contenu, fk_soc, fk_dossier,";
           $sql .= " fk_user_expediteur, fk_user_destinataire, expediteur_externe, destinataire_externe,";
           $sql .= " date_comm, date_lecture, statut, fk_comm_parent, tags, confidentialite, infos_techniques)";
           $sql .= " VALUES (";
           $sql .= $conf->entity . ",";
           $sql .= "'" . $this->db->escape($this->ref_elaska) . "',";
           $sql .= "'" . $this->db->escape($this->type) . "',";
           $sql .= "'" . $this->db->escape($this->direction) . "',";
           $sql .= "'" . $this->db->escape($this->sujet) . "',";
           $sql .= "'" . $this->db->escape($this->contenu) . "',";
           $sql .= ($this->fk_soc > 0 ? $this->fk_soc : "null") . ",";
           $sql .= ($this->fk_dossier > 0 ? $this->fk_dossier : "null") . ",";
           $sql .= ($this->fk_user_expediteur > 0 ? $this->fk_user_expediteur : "null") . ",";
           $sql .= ($this->fk_user_destinataire > 0 ? $this->fk_user_destinataire : "null") . ",";
           $sql .= "'" . $this->db->escape($this->expediteur_externe) . "',";
           $sql .= "'" . $this->db->escape($this->destinataire_externe) . "',";
           $sql .= "'" . $this->db->idate($this->date_comm) . "',";
           $sql .= ($this->date_lecture ? "'" . $this->db->idate($this->date_lecture) . "'" : "null") . ",";
           $sql .= "'" . $this->db->escape($this->statut) . "',";
           $sql .= ($this->fk_comm_parent > 0 ? $this->fk_comm_parent : "null") . ",";
           $sql .= "'" . $this->db->escape($this->tags) . "',";
           $sql .= (int) $this->confidentialite . ",";
           $sql .= "'" . $this->db->escape($this->infos_techniques) . "'";
           $sql .= ")";
           
           dol_syslog(get_class($this) . "::create", LOG_DEBUG);
           $resql = $this->db->query($sql);
           if ($resql) {
               $this->id = $this->db->last_insert_id(MAIN_DB_PREFIX . $this->table_element);
               
               if (!$notrigger) {
                   // Appel des triggers
                   include_once DOL_DOCUMENT_ROOT . '/core/class/interfaces.class.php';
                   $interface = new Interfaces($this->db);
                   $result = $interface->run_triggers('ELASKA_COMMUNICATION_CREATE', $this, $user, $langs, $conf);
                   if ($result < 0) {
                       $error++;
                       $this->errors = $interface->errors;
                   }
               }
               
               if (!$error) {
                   $this->db->commit();
                   return $this->id;
               } else {
                   $this->db->rollback();
                   return -1;
               }
           } else {
               $this->error = $this->db->lasterror();
               $this->db->rollback();
               return -1;
           }
       }
       
       /**
        * Load object in memory from the database
        *
        * @param int $id ID of record
        * @param string $ref Ref
        * @return int <0 if KO, 0 if not found, >0 if OK
        */
       public function fetch($id, $ref = null)
       {
           $sql = "SELECT * FROM " . MAIN_DB_PREFIX . $this->table_element;
           if ($id > 0) {
               $sql .= " WHERE rowid = " . $id;
           } elseif ($ref) {
               $sql .= " WHERE ref_elaska = '" . $this->db->escape($ref) . "'";
           } else {
               return -1;
           }
           
           dol_syslog(get_class($this) . "::fetch", LOG_DEBUG);
           $resql = $this->db->query($sql);
           if ($resql) {
               $obj = $this->db->fetch_object($resql);
               if ($obj) {
                   $this->id = $obj->rowid;
                   $this->ref_elaska = $obj->ref_elaska;
                   $this->type = $obj->type;
                   $this->direction = $obj->direction;
                   $this->sujet = $obj->sujet;
                   $this->contenu = $obj->contenu;
                   $this->fk_soc = $obj->fk_soc;
                   $this->fk_dossier = $obj->fk_dossier;
                   $this->fk_user_expediteur = $obj->fk_user_expediteur;
                   $this->fk_user_destinataire = $obj->fk_user_destinataire;
                   $this->expediteur_externe = $obj->expediteur_externe;
                   $this->destinataire_externe = $obj->destinataire_externe;
                   $this->date_comm = $this->db->jdate($obj->date_comm);
                   $this->date_lecture = $this->db->jdate($obj->date_lecture);
                   $this->statut = $obj->statut;
                   $this->fk_comm_parent = $obj->fk_comm_parent;
                   $this->tags = $obj->tags;
                   $this->confidentialite = $obj->confidentialite;
                   $this->infos_techniques = $obj->infos_techniques;
                   
                   return 1;
               } else {
                   return 0;
               }
           } else {
               $this->error = $this->db->lasterror();
               return -1;
           }
       }
       
       /**
        * Update object into database
        *
        * @param User $user User that modifies
        * @param bool $notrigger false=launch triggers after, true=disable triggers
        * @return int <0 if KO, >0 if OK
        */
       public function update(User $user, $notrigger = false)
       {
           $error = 0;
           
           // Clean parameters
           $this->sujet = trim($this->sujet);
           $this->contenu = trim($this->contenu);
           
           $this->db->begin();
           
           // Update request
           $sql = "UPDATE " . MAIN_DB_PREFIX . $this->table_element . " SET";
           $sql .= " ref_elaska = '" . $this->db->escape($this->ref_elaska) . "',";
           $sql .= " type = '" . $this->db->escape($this->type) . "',";
           $sql .= " direction = '" . $this->db->escape($this->direction) . "',";
           $sql .= " sujet = '" . $this->db->escape($this->sujet) . "',";
           $sql .= " contenu = '" . $this->db->escape($this->contenu) . "',";
           $sql .= " fk_soc = " . ($this->fk_soc > 0 ? $this->fk_soc : "null") . ",";
           $sql .= " fk_dossier = " . ($this->fk_dossier > 0 ? $this->fk_dossier : "null") . ",";
           $sql .= " fk_user_expediteur = " . ($this->fk_user_expediteur > 0 ? $this->fk_user_expediteur : "null") . ",";
           $sql .= " fk_user_destinataire = " . ($this->fk_user_destinataire > 0 ? $this->fk_user_destinataire : "null") . ",";
           $sql .= " expediteur_externe = '" . $this->db->escape($this->expediteur_externe) . "',";
           $sql .= " destinataire_externe = '" . $this->db->escape($this->destinataire_externe) . "',";
           $sql .= " date_comm = '" . $this->db->idate($this->date_comm) . "',";
           $sql .= " date_lecture = " . ($this->date_lecture ? "'" . $this->db->idate($this->date_lecture) . "'" : "null") . ",";
           $sql .= " statut = '" . $this->db->escape($this->statut) . "',";
           $sql .= " fk_comm_parent = " . ($this->fk_comm_parent > 0 ? $this->fk_comm_parent : "null") . ",";
           $sql .= " tags = '" . $this->db->escape($this->tags) . "',";
           $sql .= " confidentialite = " . (int) $this->confidentialite . ",";
           $sql .= " infos_techniques = '" . $this->db->escape($this->infos_techniques) . "'";
           $sql .= " WHERE rowid = " . $this->id;
           
           dol_syslog(get_class($this) . "::update", LOG_DEBUG);
           $resql = $this->db->query($sql);
           if ($resql) {
               if (!$notrigger) {
                   // Appel des triggers
                   include_once DOL_DOCUMENT_ROOT . '/core/class/interfaces.class.php';
                   $interface = new Interfaces($this->db);
                   $result = $interface->run_triggers('ELASKA_COMMUNICATION_MODIFY', $this, $user, $langs, $conf);
                   if ($result < 0) {
                       $error++;
                       $this->errors = $interface->errors;
                   }
               }
               
               if (!$error) {
                   $this->db->commit();
                   return 1;
               } else {
                   $this->db->rollback();
                   return -1;
               }
           } else {
               $this->error = $this->db->lasterror();
               $this->db->rollback();
               return -1;
           }
       }
       
       /**
        * Marquer comme lu
        *
        * @param User $user Utilisateur qui effectue l'action
        * @return int <0 si KO, >0 si OK
        */
       public function setRead(User $user)
       {
           if ($this->statut == 'lu') {
               return 0; // Déjà lu
           }
           
           $this->statut = 'lu';
           $this->date_lecture = dol_now();
           
           return $this->update($user);
       }
       
       /**
        * Récupérer les communications pour un client
        *
        * @param int $socid ID du client
        * @param array $filters Filtres additionnels
        * @param int $limit Limite de résultats
        * @param int $offset Offset pour pagination
        * @return array|int Liste des communications ou <0 si erreur
        */
       public function getForClient($socid, $filters = array(), $limit = 0, $offset = 0)
       {
           $result = array();
           
           if (empty($socid)) return -1;
           
           $sql = "SELECT * FROM " . MAIN_DB_PREFIX . $this->table_element;
           $sql .= " WHERE fk_soc = " . (int) $socid;
           
           // Ajouter les filtres
           if (!empty($filters['dossier_id'])) {
               $sql .= " AND fk_dossier = " . (int) $filters['dossier_id'];
           }
           
           if (!empty($filters['type'])) {
               $sql .= " AND type = '" . $this->db->escape($filters['type']) . "'";
           }
           
           if (!empty($filters['direction'])) {
               $sql .= " AND direction = '" . $this->db->escape($filters['direction']) . "'";
           }
           
           if (!empty($filters['statut'])) {
               $sql .= " AND statut = '" . $this->db->escape($filters['statut']) . "'";
           }
           
           if (!empty($filters['date_from'])) {
               $sql .= " AND date_comm >= '" . $this->db->idate($filters['date_from']) . "'";
           }
           
           if (!empty($filters['date_to'])) {
               $sql .= " AND date_comm <= '" . $this->db->idate($filters['date_to']) . "'";
           }
           
           if (!empty($filters['search_text'])) {
               $search = $this->db->escape($filters['search_text']);
               $sql .= " AND (sujet LIKE '%" . $search . "%' OR contenu LIKE '%" . $search . "%')";
           }
           
           // Confidentialité
           if (!empty($filters['max_confidentialite'])) {
               $sql .= " AND confidentialite <= " . (int) $filters['max_confidentialite'];
           }
           
           // Tri
           $sql .= " ORDER BY date_comm DESC";
           
           // Limite
           if ($limit > 0) {
               $sql .= $this->db->plimit($limit, $offset);
           }
           
           dol_syslog(get_class($this) . "::getForClient", LOG_DEBUG);
           $resql = $this->db->query($sql);
           if ($resql) {
               $num = $this->db->num_rows($resql);
               $i = 0;
               
               while ($i < $num) {
                   $obj = $this->db->fetch_object($resql);
                   
                   $comm = new ElaskaCommunication($this->db);
                   $comm->id = $obj->rowid;
                   $comm->ref_elaska = $obj->ref_elaska;
                   $comm->type = $obj->type;
                   $comm->direction = $obj->direction;
                   $comm->sujet = $obj->sujet;
                   $comm->contenu = $obj->contenu;
                   $comm->fk_soc = $obj->fk_soc;
                   $comm->fk_dossier = $obj->fk_dossier;
                   $comm->fk_user_expediteur = $obj->fk_user_expediteur;
                   $comm->fk_user_destinataire = $obj->fk_user_destinataire;
                   $comm->expediteur_externe = $obj->expediteur_externe;
                   $comm->destinataire_externe = $obj->destinataire_externe;
                   $comm->date_comm = $this->db->jdate($obj->date_comm);
                   $comm->date_lecture = $this->db->jdate($obj->date_lecture);
                   $comm->statut = $obj->statut;
                   $comm->fk_comm_parent = $obj->fk_comm_parent;
                   $comm->tags = $obj->tags;
                   $comm->confidentialite = $obj->confidentialite;
                   $comm->infos_techniques = $obj->infos_techniques;
                   
                   $result[] = $comm;
                   $i++;
               }
               
               return $result;
           } else {
               $this->error = $this->db->lasterror();
               return -1;
           }
       }
       
       /**
        * Récupérer les communications pour un dossier
        *
        * @param int $dossierId ID du dossier
        * @param array $filters Filtres additionnels
        * @param int $limit Limite de résultats
        * @param int $offset Offset pour pagination
        * @return array|int Liste des communications ou <0 si erreur
        */
       public function getForDossier($dossierId, $filters = array(), $limit = 0, $offset = 0)
       {
           $result = array();
           
           if (empty($dossierId)) return -1;
           
           $sql = "SELECT * FROM " . MAIN_DB_PREFIX . $this->table_element;
           $sql .= " WHERE fk_dossier = " . (int) $dossierId;
           
           // Ajouter les filtres similaires à getForClient
           // [...]
           
           // Tri
           $sql .= " ORDER BY date_comm DESC";
           
           // Limite
           if ($limit > 0) {
               $sql .= $this->db->plimit($limit, $offset);
           }
           
           dol_syslog(get_class($this) . "::getForDossier", LOG_DEBUG);
           $resql = $this->db->query($sql);
           if ($resql) {
               $num = $this->db->num_rows($resql);
               $i = 0;
               
               while ($i < $num) {
                   $obj = $this->db->fetch_object($resql);
                   
                   $comm = new ElaskaCommunication($this->db);
                   // Remplir les propriétés comme dans getForClient
                   // [...]
                   
                   $result[] = $comm;
                   $i++;
               }
               
               return $result;
           } else {
               $this->error = $this->db->lasterror();
               return -1;
           }
       }
       
       /**
        * Envoyer un message via le portail client
        *
        * @param User $user Utilisateur expéditeur
        * @param int $socid ID du client destinataire
        * @param string $subject Sujet du message
        * @param string $content Contenu du message
        * @param int $dossierId ID du dossier associé (optionnel)
        * @return int ID du message créé ou <0 si erreur
        */
       public function sendPortalMessage(User $user, $socid, $subject, $content, $dossierId = 0)
       {
           if (empty($socid) || empty($subject) || empty($content)) {
               return -1;
           }
           
           $this->type = 'message_portail';
           $this->direction = 'sortant';
           $this->sujet = $subject;
           $this->contenu = $content;
           $this->fk_soc = $socid;
           $this->fk_dossier = $dossierId > 0 ? $dossierId : null;
           $this->fk_user_expediteur = $user->id;
           $this->fk_user_destinataire = null; // Pas de destinataire interne
           $this->expediteur_externe = null; // Pas d'expéditeur externe
           $this->destinataire_externe = null; // Le client (identifié par fk_soc)
           $this->date_comm = dol_now();
           $this->statut = 'envoyé'; // Message envoyé, pas encore lu
           $this->confidentialite = 1; // Niveau normal par défaut
           
           // Informations techniques supplémentaires
           $infos = array(
               'ip_envoi' => $_SERVER['REMOTE_ADDR'],
               'user_agent' => $_SERVER['HTTP_USER_AGENT'],
               'horodatage' => dol_print_date(dol_now(), 'standard')
           );
           $this->infos_techniques = json_encode($infos);
           
           $result = $this->create($user);
           
           if ($result > 0) {
               // Créer une notification pour le client
               // [Implémentation de la notification]
               
               return $this->id;
           } else {
               return -1;
           }
       }
       
       /**
        * Générer la prochaine référence
        *
        * @return string Référence
        */
       protected function getNextNumRef()
       {
           // Format: eLSK-COM-YYYY-NNNNN
           global $conf;
           
           $prefix = 'eLSK-COM';
           $year = date('Y');
           $sql = "SELECT MAX(CAST(SUBSTRING(ref_elaska, 14) AS SIGNED)) as max_num";
           $sql .= " FROM " . MAIN_DB_PREFIX . $this->table_element;
           $sql .= " WHERE ref_elaska LIKE '" . $prefix . "-" . $year . "-%'";
           $sql .= " AND entity = " . $conf->entity;
           
           $resql = $this->db->query($sql);
           if ($resql) {
               $obj = $this->db->fetch_object($resql);
               $num = (int) $obj->max_num;
               $num++;
               return $prefix . '-' . $year . '-' . sprintf('%05d', $num);
           } else {
               return $prefix . '-' . $year . '-00001';
           }
       }
   }
   ```

2. **Intégration messagerie du portail:**
   ```jsx
   // src/pages/Messagerie.jsx
   import { useState, useEffect } from 'react';
   import { useQuery, useMutation, useQueryClient } from 'react-query';
   import { fetchMessages, sendMessage, markMessageAsRead } from '@services/endpoints/messages';
   import { useAuth } from '@context/AuthContext';
   import { Link } from 'react-router-dom';
   import { formatDistanceToNow } from 'date-fns';
   import { fr } from 'date-fns/locale';
   
   // Composants
   import MessageItem from '@components/domain/messagerie/MessageItem';
   import MessageForm from '@components/domain/messagerie/MessageForm';
   import MessageDetail from '@components/domain/messagerie/MessageDetail';
   
   const Messagerie = () => {
     const { user } = useAuth();
     const clientId = user?.id;
     const [selectedMessage, setSelectedMessage] = useState(null);
     const [replyMode, setReplyMode] = useState(false);
     const [composeMode, setComposeMode] = useState(false);
     const queryClient = useQueryClient();
     
     // Filtres
     const [filters, setFilters] = useState({
       dossier_id: '',
       type: '',
       direction: '',
       search: '',
       date_from: '',
       date_to: ''
     });
     
     // Fetch messages
     const { data: messages, isLoading } = useQuery(
       ['messages', clientId, filters],
       () => fetchMessages(clientId, filters),
       { enabled: !!clientId }
     );
     
     // Mutation pour l'envoi de message
     const sendMessageMutation = useMutation(sendMessage, {
       onSuccess: () => {
         queryClient.invalidateQueries(['messages', clientId]);
         setComposeMode(false);
         setReplyMode(false);
         setSelectedMessage(null);
       }
     });
     
     // Mutation pour marquer comme lu
     const markAsReadMutation = useMutation(markMessageAsRead, {
       onSuccess: () => {
         queryClient.invalidateQueries(['messages', clientId]);
       }
     });
     
     // Handler pour la sélection d'un message
     const handleMessageSelect = (message) => {
       setSelectedMessage(message);
       setReplyMode(false);
       
       // Marquer comme lu si entrant et pas encore lu
       if (message.direction === 'entrant' && message.statut !== 'lu') {
         markAsReadMutation.mutate({ messageId: message.id });
       }
     };
     
     // Handler pour l'envoi d'un message
     const handleSendMessage = (messageData) => {
       sendMessageMutation.mutate({
         clientId: clientId,
         subject: messageData.subject,
         content: messageData.content,
         dossierId: messageData.dossierId,
         parentId: replyMode ? selectedMessage.id : undefined
       });
     };
     
     // Handler pour le mode réponse
     const handleReplyMode = () => {
       setReplyMode(true);
     };
     
     // Handler pour annuler
     const handleCancel = () => {
       if (replyMode) {
         setReplyMode(false);
       } else if (composeMode) {
         setComposeMode(false);
       } else if (selectedMessage) {
         setSelectedMessage(null);
       }
     };
     
     // Handler pour les filtres
     const handleFilterChange = (e) => {
       const { name, value } = e.target;
       setFilters(prev => ({
         ...prev,
         [name]: value
       }));
     };
     
     return (
       <div className="messagerie-page">
         <header className="page-header">
           <h1>Ma Messagerie</h1>
           <div className="header-actions">
             <button 
               className="primary-button"
               onClick={() => setComposeMode(true)}
               disabled={composeMode || replyMode}
             >
               <i className="fas fa-pen"></i> Nouveau message
             </button>
           </div>
         </header>
         
         {!selectedMessage && !composeMode ? (
           <>
             <div className="filters-container">
               <div className="filter-group">
                 <label>Rechercher</label>
                 <input 
                   type="text"
                   name="search"
                   value={filters.search}
                   onChange={handleFilterChange}
                   placeholder="Sujet, contenu..."
                 />
               </div>
               
               <div className="filter-group">
                 <label>Dossier</label>
                 <select 
                   name="dossier_id" 
                   value={filters.dossier_id}
                   onChange={handleFilterChange}
                 >
                   <option value="">Tous les dossiers</option>
                   {/* Options des dossiers dynamiques */}
                 </select>
               </div>
               
               <div className="filter-group">
                 <label>Date début</label>
                 <input 
                   type="date"
                   name="date_from"
                   value={filters.date_from}
                   onChange={handleFilterChange}
                 />
               </div>
               
               <div className="filter-group">
                 <label>Date fin</label>
                 <input 
                   type="date"
                   name="date_to"
                   value={filters.date_to}
                   onChange={handleFilterChange}
                 />
               </div>
             </div>
             
             <div className="messages-list">
               {isLoading ? (
                 <div className="loading-spinner">Chargement des messages...</div>
               ) : messages?.length === 0 ? (
                 <div className="empty-state">
                   <i className="fas fa-inbox"></i>
                   <p>Aucun message. Démarrez une conversation avec votre conseiller.</p>
                   <button 
                     className="primary-button"
                     onClick={() => setComposeMode(true)}
                   >
                     Écrire un message
                   </button>
                 </div>
               ) : (
                 messages?.map(message => (
                   <MessageItem
                     key={message.id}
                     message={message}
                     onClick={() => handleMessageSelect(message)}
                   />
                 ))
               )}
             </div>
           </>
         ) : composeMode ? (
           <MessageForm
             onSubmit={handleSendMessage}
             onCancel={handleCancel}
             isSubmitting={sendMessageMutation.isLoading}
             clientId={clientId}
           />
         ) : replyMode ? (
           <div className="reply-container">
             <MessageDetail message={selectedMessage} />
             <hr />
             <h3>Votre réponse</h3>
             <MessageForm
               initialSubject={`Re: ${selectedMessage.sujet}`}
               dossierId={selectedMessage.fk_dossier}
               onSubmit={handleSendMessage}
               onCancel={handleCancel}
               isSubmitting={sendMessageMutation.isLoading}
               isReply={true}
               clientId={clientId}
             />
           </div>
         ) : (
           <div className="message-detail-container">
             <MessageDetail message={selectedMessage} />
             <div className="detail-actions">
               <button className="secondary-button" onClick={handleCancel}>
                 <i className="fas fa-arrow-left"></i> Retour
               </button>
               <button className="primary-button" onClick={handleReplyMode}>
                 <i className="fas fa-reply"></i> Répondre
               </button>
             </div>
           </div>
         )}
       </div>
     );
   };
   
   export default Messagerie;
   ```

3. **Composant détail message:**
   ```jsx
   // src/components/domain/messagerie/MessageDetail.jsx
   import { formatDate } from '@utils/date-utils';
   import { Link } from 'react-router-dom';
   import UserAvatar from '@components/common/UserAvatar';
   
   const MessageDetail = ({ message }) => {
     const isInbound = message.direction === 'entrant';
     
     // Formatage de l'expéditeur
     const getSender = () => {
       if (isInbound) {
         if (message.fk_user_expediteur) {
           return (
             <div className="sender-info">
               <UserAvatar 
                 userId={message.fk_user_expediteur}
                 userName={message.expediteur_nom}
                 size="medium"
               />
               <div className="sender-details">
                 <div className="sender-name">{message.expediteur_nom}</div>
                 <div className="sender-role">{message.expediteur_role || 'Conseiller'}</div>
               </div>
             </div>
           );
         } else {
           return <span>{message.expediteur_externe || 'Système'}</span>;
         }
       } else {
         return <span>Vous</span>;
       }
     };
     
     return (
       <div className={`message-detail ${isInbound ? 'inbound' : 'outbound'}`}>
         <div className="message-header">
           <div className="message-meta">
             <div className="message-from">
               <span className="label">De :</span>
               {getSender()}
             </div>
             
             <div className="message-to">
               <span className="label">À :</span>
               {isInbound ? (
                 <span>Vous</span>
               ) : (
                 <span>{message.destinataire_nom || 'Votre conseiller'}</span>
               )}
             </div>
             
             <div className="message-date">
               <span className="label">Date :</span>
               <span>{formatDate(message.date_comm, 'full')}</span>
             </div>
             
             {message.fk_dossier && (
               <div className="message-dossier">
                 <span className="label">Dossier :</span>
                 <Link to={`/dossiers/${message.fk_dossier}`}>
                   {message.dossier_ref || `Dossier #${message.fk_dossier}`}
                 </Link>
               </div>
             )}
           </div>
           
           <h2 className="message-subject">{message.sujet}</h2>
         </div>
         
         <div className="message-content">
           {/* 
             Afficher le contenu avec formatage de base HTML (sanitisé côté serveur)
             Utiliser DOMPurify côté client pour une sécurité supplémentaire
           */}
           <div 
             className="content-html"
             dangerouslySetInnerHTML={{ __html: message.contenu }}
           />
         </div>
         
         {message.pieces_jointes && message.pieces_jointes.length > 0 && (
           <div className="message-attachments">
             <h3>Pièces jointes</h3>
             <div className="attachments-list">
               {message.pieces_jointes.map((pj, index) => (
                 <div key={index} className="attachment-item">
                   <i className={`fas ${getFileIconClass(pj.type || pj.extension)}`}></i>
                   <a 
                     href={`/api/messages/${message.id}/attachments/${pj.id}/download`}
                     target="_blank"
                     rel="noopener noreferrer"
                   >
                     {pj.nom || `Pièce jointe ${index + 1}`}
                   </a>
                   <span className="file-size">{formatFileSize(pj.taille)}</span>
                 </div>
               ))}
             </div>
           </div>
         )}
         
         {message.statut === 'lu' && message.date_lecture && (
           <div className="message-status">
             <i className="fas fa-check-double"></i>
             Lu le {formatDate(message.date_lecture, 'datetime')}
           </div>
         )}
       </div>
     );
   };
   
   // Fonction utilitaire pour déterminer l'icône de fichier
   const getFileIconClass = (typeOrExt) => {
     if (!typeOrExt) return 'fa-file';
     
     // Type MIME ou extension
     typeOrExt = typeOrExt.toLowerCase();
     
     if (typeOrExt.includes('pdf') || typeOrExt === '.pdf') {
       return 'fa-file-pdf';
     } else if (typeOrExt.includes('word') || typeOrExt.includes('.doc')) {
       return 'fa-file-word';
     } else if (typeOrExt.includes('excel') || typeOrExt.includes('.xls')) {
       return 'fa-file-excel';
     } else if (typeOrExt.includes('image') || ['.jpg', '.jpeg', '.png', '.gif'].includes(typeOrExt)) {
       return 'fa-file-image';
     } else {
       return 'fa-file';
     }
   };
   
   // Fonction utilitaire pour formater la taille de fichier
   const formatFileSize = (bytes) => {
     if (!bytes || bytes === 0) return '0 B';
     
     const k = 1024;
     const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
     const i = Math.floor(Math.log(bytes) / Math.log(k));
     
     return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
   };
   
   export default MessageDetail;
   ```

### 6.5. Gestion des Consentements RGPD

Le module eLaska-ESaiko intègre un système de gestion des consentements RGPD pour assurer la conformité réglementaire.

**Spécifications techniques:**

1. **Classe de gestion des consentements:**
   ```php
   /**
    * Gestion des consentements RGPD
    */
   class ElaskaConsentManager
   {
       private $db;
       
       /**
        * Constructor
        */
       public function __construct($db)
       {
           $this->db = $db;
       }
       
       /**
        * Enregistre un consentement pour un client
        *
        * @param int $socid ID du client
        * @param string $consentType Type de consentement
        * @param string $status Statut du consentement (accorde, refuse, retire)
        * @param string $source Source du consentement (portail, backoffice, email)
        * @param string $userAgent User-Agent du navigateur (facultatif)
        * @param string $ipAddress Adresse IP (facultatif)
        * @return int ID du consentement ou <0 si erreur
        */
       public function recordConsent($socid, $consentType, $status, $source, $userAgent = '', $ipAddress = '')
       {
           if (empty($socid) || empty($consentType) || empty($status) || empty($source)) {
               return -1;
           }
           
           // Vérifier que le type de consentement existe
           $sql = "SELECT rowid, version_texte FROM llx_elaska_consent_type WHERE code = '".$this->db->escape($consentType)."' AND active = 1";
           $resql = $this->db->query($sql);
           
           if (!$resql || $this->db->num_rows($resql) == 0) {
               return -2; // Type de consentement inexistant ou inactif
           }
           
           $obj = $this->db->fetch_object($resql);
           $consentTypeId = $obj->rowid;
           $textVersion = $obj->version_texte;
           
           // Insérer l'enregistrement de consentement
           $sql = "INSERT INTO llx_elaska_consent_log (";
           $sql.= " fk_soc,";
           $sql.= " fk_consent_type,";
           $sql.= " statut_consentement,";
           $sql.= " date_consentement,";
           $sql.= " source_consentement,";
           $sql.= " version_texte,";
           $sql.= " adresse_ip,";
           $sql.= " user_agent";
           $sql.= ") VALUES (";
           $sql.= " ".(int)$socid.",";
           $sql.= " ".(int)$consentTypeId.",";
           $sql.= " '".$this->db->escape($status)."',";
           $sql.= " '".$this->db->idate(dol_now())."',";
           $sql.= " '".$this->db->escape($source)."',";
           $sql.= " '".$this->db->escape($textVersion)."',";
           $sql.= " '".$this->db->escape($ipAddress)."',";
           $sql.= " '".$this->db->escape($userAgent)."'";
           $sql.= ")";
           
           dol_syslog(get_class($this)."::recordConsent", LOG_DEBUG);
           $resql = $this->db->query($sql);
           
           if ($resql) {
               return $this->db->last_insert_id('llx_elaska_consent_log');
           } else {
               return -3;
           }
       }
       
       /**
        * Vérifie si un consentement est accordé pour un client
        *
        * @param int $socid ID du client
        * @param string $consentType Type de consentement
        * @param bool $strictCheck Ne vérifier que le dernier consentement
        * @return bool True si le consentement est accordé, false sinon
        */
       public function isConsentGranted($socid, $consentType, $strictCheck = true)
       {
           if (empty($socid) || empty($consentType)) {
               return false;
           }
           
           // Récupérer le dernier consentement pour ce type
           $sql = "SELECT cl.statut_consentement";
           $sql.= " FROM llx_elaska_consent_log as cl";
           $sql.= " JOIN llx_elaska_consent_type as ct ON cl.fk_consent_type = ct.rowid";
     ```php
           $sql.= " WHERE cl.fk_soc = " . (int)$socid;
           $sql.= " AND ct.code = '".$this->db->escape($consentType)."'";
           
           if ($strictCheck) {
               // Ne récupérer que le dernier consentement enregistré
               $sql.= " ORDER BY cl.date_consentement DESC, cl.rowid DESC";
               $sql.= " LIMIT 1";
           }
           
           dol_syslog(get_class($this)."::isConsentGranted", LOG_DEBUG);
           $resql = $this->db->query($sql);
           
           if ($resql && $this->db->num_rows($resql) > 0) {
               if ($strictCheck) {
                   // Avec vérification stricte, on regarde uniquement le dernier
                   $obj = $this->db->fetch_object($resql);
                   return ($obj->statut_consentement == 'accorde');
               } else {
                   // Sans vérification stricte, on cherche au moins un consentement accordé et non retiré
                   while ($obj = $this->db->fetch_object($resql)) {
                       if ($obj->statut_consentement == 'accorde') {
                           return true;
                       } elseif ($obj->statut_consentement == 'retire' || $obj->statut_consentement == 'refuse') {
                           return false;
                       }
                   }
               }
           }
           
           return false; // Par défaut, pas de consentement
       }
       
       /**
        * Récupère l'historique des consentements pour un client
        *
        * @param int $socid ID du client
        * @param string $consentType Type de consentement (optionnel)
        * @return array Liste des consentements
        */
       public function getConsentHistory($socid, $consentType = '')
       {
           $result = array();
           
           if (empty($socid)) {
               return $result;
           }
           
           $sql = "SELECT cl.rowid, cl.statut_consentement, cl.date_consentement,";
           $sql.= " cl.source_consentement, cl.version_texte, cl.adresse_ip,";
           $sql.= " ct.code as type_code, ct.libelle as type_libelle";
           $sql.= " FROM llx_elaska_consent_log as cl";
           $sql.= " JOIN llx_elaska_consent_type as ct ON cl.fk_consent_type = ct.rowid";
           $sql.= " WHERE cl.fk_soc = " . (int)$socid;
           
           if (!empty($consentType)) {
               $sql.= " AND ct.code = '".$this->db->escape($consentType)."'";
           }
           
           $sql.= " ORDER BY cl.date_consentement DESC, cl.rowid DESC";
           
           dol_syslog(get_class($this)."::getConsentHistory", LOG_DEBUG);
           $resql = $this->db->query($sql);
           
           if ($resql) {
               $num = $this->db->num_rows($resql);
               $i = 0;
               
               while ($i < $num) {
                   $obj = $this->db->fetch_object($resql);
                   
                   $result[] = array(
                       'id' => $obj->rowid,
                       'type' => $obj->type_code,
                       'type_label' => $obj->type_libelle,
                       'status' => $obj->statut_consentement,
                       'date' => $this->db->jdate($obj->date_consentement),
                       'source' => $obj->source_consentement,
                       'version' => $obj->version_texte,
                       'ip_address' => $obj->adresse_ip
                   );
                   
                   $i++;
               }
           }
           
           return $result;
       }
       
       /**
        * Liste des types de consentement disponibles
        *
        * @param bool $onlyActive Ne récupérer que les types actifs
        * @return array Liste des types de consentement
        */
       public function getConsentTypes($onlyActive = true)
       {
           $result = array();
           
           $sql = "SELECT rowid, code, libelle, description, texte_consentement, version_texte, active";
           $sql.= " FROM llx_elaska_consent_type";
           
           if ($onlyActive) {
               $sql.= " WHERE active = 1";
           }
           
           $sql.= " ORDER BY position ASC, libelle ASC";
           
           dol_syslog(get_class($this)."::getConsentTypes", LOG_DEBUG);
           $resql = $this->db->query($sql);
           
           if ($resql) {
               $num = $this->db->num_rows($resql);
               $i = 0;
               
               while ($i < $num) {
                   $obj = $this->db->fetch_object($resql);
                   
                   $result[] = array(
                       'id' => $obj->rowid,
                       'code' => $obj->code,
                       'label' => $obj->libelle,
                       'description' => $obj->description,
                       'consent_text' => $obj->texte_consentement,
                       'version' => $obj->version_texte,
                       'active' => $obj->active
                   );
                   
                   $i++;
               }
           }
           
           return $result;
       }
       
       /**
        * Récupère le statut des consentements pour un client
        *
        * @param int $socid ID du client
        * @return array Statut des consentements par type
        */
       public function getClientConsentStatus($socid)
       {
           $result = array();
           
           if (empty($socid)) {
               return $result;
           }
           
           // Récupérer tous les types de consentement
           $types = $this->getConsentTypes(true);
           
           // Pour chaque type, vérifier le statut
           foreach ($types as $type) {
               // Récupérer le dernier consentement pour ce type
               $sql = "SELECT cl.statut_consentement, cl.date_consentement";
               $sql.= " FROM llx_elaska_consent_log as cl";
               $sql.= " JOIN llx_elaska_consent_type as ct ON cl.fk_consent_type = ct.rowid";
               $sql.= " WHERE cl.fk_soc = " . (int)$socid;
               $sql.= " AND ct.code = '".$this->db->escape($type['code'])."'";
               $sql.= " ORDER BY cl.date_consentement DESC, cl.rowid DESC";
               $sql.= " LIMIT 1";
               
               $resql = $this->db->query($sql);
               
               if ($resql && $this->db->num_rows($resql) > 0) {
                   $obj = $this->db->fetch_object($resql);
                   
                   $result[$type['code']] = array(
                       'type' => $type,
                       'status' => $obj->statut_consentement,
                       'date' => $this->db->jdate($obj->date_consentement),
                       'has_consent' => ($obj->statut_consentement == 'accorde')
                   );
               } else {
                   // Pas de consentement enregistré
                   $result[$type['code']] = array(
                       'type' => $type,
                       'status' => 'non_demande',
                       'date' => null,
                       'has_consent' => false
                   );
               }
           }
           
           return $result;
       }
       
       /**
        * Génère le HTML pour l'affichage des consentements d'un client
        *
        * @param int $socid ID du client
        * @param bool $editMode Mode édition ou affichage
        * @return string HTML
        */
       public function generateConsentHTML($socid, $editMode = false)
       {
           // Récupérer le statut des consentements
           $consents = $this->getClientConsentStatus($socid);
           
           $html = '<div class="elaska-consent-management">';
           
           // En-tête
           $html .= '<div class="consent-header">';
           $html .= '<h3>Gestion des consentements RGPD</h3>';
           $html .= '<p class="consent-info">En conformité avec le Règlement Général sur la Protection des Données (RGPD), nous devons obtenir votre consentement explicite pour certains traitements de vos données personnelles.</p>';
           $html .= '</div>';
           
           // Liste des consentements
           foreach ($consents as $code => $consent) {
               $statusClass = $consent['has_consent'] ? 'granted' : ($consent['status'] == 'refuse' ? 'refused' : 'pending');
               
               $html .= '<div class="consent-item ' . $statusClass . '">';
               $html .= '<div class="consent-item-header">';
               $html .= '<h4>' . $consent['type']['label'] . '</h4>';
               
               // Indicateur de statut
               $html .= '<div class="consent-status">';
               if ($consent['has_consent']) {
                   $html .= '<span class="status-badge granted"><i class="fas fa-check-circle"></i> Accordé</span>';
               } elseif ($consent['status'] == 'refuse') {
                   $html .= '<span class="status-badge refused"><i class="fas fa-times-circle"></i> Refusé</span>';
               } elseif ($consent['status'] == 'retire') {
                   $html .= '<span class="status-badge withdrawn"><i class="fas fa-ban"></i> Retiré</span>';
               } else {
                   $html .= '<span class="status-badge pending"><i class="fas fa-question-circle"></i> Non spécifié</span>';
               }
               $html .= '</div>'; // .consent-status
               $html .= '</div>'; // .consent-item-header
               
               // Description et texte du consentement
               $html .= '<div class="consent-description">';
               $html .= '<p>' . $consent['type']['description'] . '</p>';
               $html .= '</div>';
               
               $html .= '<div class="consent-text">';
               $html .= $consent['type']['consent_text'];
               $html .= '</div>';
               
               // Mode édition
               if ($editMode) {
                   $html .= '<div class="consent-actions">';
                   $html .= '<form method="post" action="' . $_SERVER['PHP_SELF'] . '">';
                   $html .= '<input type="hidden" name="token" value="' . newToken() . '">';
                   $html .= '<input type="hidden" name="action" value="update_consent">';
                   $html .= '<input type="hidden" name="socid" value="' . $socid . '">';
                   $html .= '<input type="hidden" name="consent_type" value="' . $code . '">';
                   
                   $html .= '<div class="consent-choices">';
                   $html .= '<label>';
                   $html .= '<input type="radio" name="consent_status" value="accorde"' . ($consent['has_consent'] ? ' checked' : '') . '>';
                   $html .= ' J\'accepte';
                   $html .= '</label>';
                   
                   $html .= '<label>';
                   $html .= '<input type="radio" name="consent_status" value="refuse"' . ($consent['status'] == 'refuse' ? ' checked' : '') . '>';
                   $html .= ' Je refuse';
                   $html .= '</label>';
                   $html .= '</div>';
                   
                   $html .= '<button type="submit" class="button">Enregistrer</button>';
                   $html .= '</form>';
                   $html .= '</div>'; // .consent-actions
               } else {
                   // Mode affichage : historique
                   if ($consent['date']) {
                       $html .= '<div class="consent-details">';
                       $html .= '<p><strong>Date :</strong> ' . dol_print_date($consent['date'], 'dayhour') . '</p>';
                       if (!empty($consent['source'])) {
                           $html .= '<p><strong>Source :</strong> ' . $consent['source'] . '</p>';
                       }
                       $html .= '</div>';
                   }
               }
               
               $html .= '</div>'; // .consent-item
           }
           
           $html .= '</div>'; // .elaska-consent-management
           
           // CSS pour le système de consentement
           $html .= '<style>
           .elaska-consent-management {
               margin: 20px 0;
               font-family: Arial, sans-serif;
           }
           .consent-header {
               margin-bottom: 20px;
           }
           .consent-item {
               border: 1px solid #ddd;
               border-radius: 5px;
               margin-bottom: 15px;
               padding: 15px;
               background-color: #f9f9f9;
           }
           .consent-item.granted {
               border-left: 4px solid #28a745;
           }
           .consent-item.refused {
               border-left: 4px solid #dc3545;
           }
           .consent-item.pending {
               border-left: 4px solid #ffc107;
           }
           .consent-item-header {
               display: flex;
               justify-content: space-between;
               align-items: center;
               margin-bottom: 10px;
           }
           .consent-item-header h4 {
               margin: 0;
           }
           .consent-status {
               display: flex;
               align-items: center;
           }
           .status-badge {
               padding: 5px 10px;
               border-radius: 15px;
               font-size: 0.85em;
               display: flex;
               align-items: center;
           }
           .status-badge i {
               margin-right: 5px;
           }
           .status-badge.granted {
               background-color: #d4edda;
               color: #155724;
           }
           .status-badge.refused {
               background-color: #f8d7da;
               color: #721c24;
           }
           .status-badge.withdrawn {
               background-color: #f8d7da;
               color: #721c24;
           }
           .status-badge.pending {
               background-color: #fff3cd;
               color: #856404;
           }
           .consent-description {
               margin-bottom: 10px;
           }
           .consent-text {
               font-size: 0.9em;
               border-left: 3px solid #aaa;
               padding-left: 10px;
               margin: 10px 0;
               color: #555;
           }
           .consent-actions {
               margin-top: 15px;
               padding-top: 15px;
               border-top: 1px solid #ddd;
           }
           .consent-choices {
               display: flex;
               gap: 20px;
               margin-bottom: 10px;
           }
           .consent-details {
               font-size: 0.85em;
               color: #666;
               margin-top: 10px;
           }
           </style>';
           
           return $html;
       }
       
       /**
        * Génère le HTML pour le portail client
        *
        * @param int $socid ID du client
        * @return string HTML
        */
       public function generatePortalConsentHTML($socid)
       {
           // Code similaire à generateConsentHTML mais adapté au portail client
           // [...]
       }
   }
   ```

2. **Interface de gestion des consentements (backoffice):**
   ```php
   /**
    * Page de gestion des consentements d'un client
    */
   
   // Entêtes Dolibarr
   require '../main.inc.php';
   require_once DOL_DOCUMENT_ROOT . '/societe/class/societe.class.php';
   require_once '../class/utils/elaskaconsentmanager.class.php';
   
   // Permissions
   if (!$user->rights->societe->lire) {
       accessforbidden();
   }
   
   // Paramètres
   $socid = GETPOST('socid', 'int');
   $action = GETPOST('action', 'alpha');
   
   if (empty($socid)) {
       dol_print_error('', 'Missing parameter socid');
       exit;
   }
   
   // Charge le tiers
   $object = new Societe($db);
   $result = $object->fetch($socid);
   if ($result <= 0) {
       dol_print_error('', 'Failed to load third party');
       exit;
   }
   
   // Instance du gestionnaire de consentements
   $consentManager = new ElaskaConsentManager($db);
   
   // Action : mise à jour d'un consentement
   if ($action == 'update_consent' && $user->rights->societe->creer) {
       $consentType = GETPOST('consent_type', 'alpha');
       $status = GETPOST('consent_status', 'alpha');
       
       if (!empty($consentType) && !empty($status)) {
           // Enregistrer le consentement
           $result = $consentManager->recordConsent(
               $socid,
               $consentType,
               $status,
               'backoffice',
               $_SERVER['HTTP_USER_AGENT'],
               $_SERVER['REMOTE_ADDR']
           );
           
           if ($result > 0) {
               setEventMessages($langs->trans("ConsentUpdated"), null, 'mesgs');
           } else {
               setEventMessages($langs->trans("ErrorUpdatingConsent"), null, 'errors');
           }
       }
   }
   
   // Action : afficher l'historique d'un consentement spécifique
   $showHistory = GETPOST('show_history', 'alpha');
   
   // Affichage de la page
   $title = $langs->trans("ManageConsent") . ' - ' . $object->name;
   
   llxHeader('', $title);
   
   // Fiche du tiers (en-tête)
   $head = societe_prepare_head($object);
   print dol_get_fiche_head($head, 'rgpd_consent', $langs->trans("ThirdParty"), -1, 'company');
   
   $linkback = '<a href="' . DOL_URL_ROOT . '/societe/list.php?restore_lastsearch_values=1">' . $langs->trans("BackToList") . '</a>';
   
   dol_banner_tab($object, 'socid', $linkback, ($user->socid ? 0 : 1), 'rowid', 'nom');
   
   print dol_get_fiche_end();
   
   // Contenu principal
   print '<div class="fichecenter">';
   
   if (!empty($showHistory)) {
       // Afficher l'historique d'un consentement spécifique
       $history = $consentManager->getConsentHistory($socid, $showHistory);
       
       print '<div class="div-table-responsive">';
       print '<table class="tagtable liste">';
       
       print '<tr class="liste_titre">';
       print '<th>' . $langs->trans("Date") . '</th>';
       print '<th>' . $langs->trans("Status") . '</th>';
       print '<th>' . $langs->trans("Source") . '</th>';
       print '<th>' . $langs->trans("Version") . '</th>';
       print '<th>' . $langs->trans("IPAddress") . '</th>';
       print '</tr>';
       
       foreach ($history as $record) {
           print '<tr class="oddeven">';
           print '<td>' . dol_print_date($record['date'], 'dayhour') . '</td>';
           print '<td>' . $record['status'] . '</td>';
           print '<td>' . $record['source'] . '</td>';
           print '<td>' . $record['version'] . '</td>';
           print '<td>' . $record['ip_address'] . '</td>';
           print '</tr>';
       }
       
       print '</table>';
       print '</div>';
       
       print '<div class="tabsAction">';
       print '<a class="butAction" href="' . $_SERVER['PHP_SELF'] . '?socid=' . $socid . '">' . $langs->trans("Back") . '</a>';
       print '</div>';
   } else {
       // Afficher le formulaire de gestion des consentements
       print $consentManager->generateConsentHTML($socid, true);
       
       // Lien vers l'historique complet
       print '<div class="tabsAction">';
       print '<a class="butAction" href="' . $_SERVER['PHP_SELF'] . '?socid=' . $socid . '&show_history=all">' . $langs->trans("ViewFullHistory") . '</a>';
       print '</div>';
   }
   
   print '</div>'; // .fichecenter
   
   llxFooter();
   ```

3. **Interface de gestion des consentements (portail client):**
   ```jsx
   // src/pages/Profil.jsx - Section RGPD
   import { useState } from 'react';
   import { useQuery, useMutation, useQueryClient } from 'react-query';
   import { fetchUserConsents, updateConsent } from '@services/endpoints/consents';
   import { useAuth } from '@context/AuthContext';
   
   const RgpdConsentSection = () => {
     const { user } = useAuth();
     const clientId = user?.id;
     const queryClient = useQueryClient();
     
     // Fetch des consentements
     const { data: consents, isLoading } = useQuery(
       ['consents', clientId],
       () => fetchUserConsents(clientId),
       { enabled: !!clientId }
     );
     
     // Mutation pour mettre à jour un consentement
     const updateConsentMutation = useMutation(updateConsent, {
       onSuccess: () => {
         queryClient.invalidateQueries(['consents', clientId]);
       }
     });
     
     // Handler pour la mise à jour d'un consentement
     const handleConsentChange = (consentType, newStatus) => {
       updateConsentMutation.mutate({
         clientId,
         consentType,
         status: newStatus,
         source: 'portail'
       });
     };
     
     if (isLoading) {
       return <div className="loading-spinner">Chargement des informations...</div>;
     }
     
     return (
       <section className="profile-section rgpd-consents">
         <h2>Gestion de vos consentements RGPD</h2>
         <p className="section-intro">
           En conformité avec le Règlement Général sur la Protection des Données (RGPD),
           nous avons besoin de votre consentement explicite pour certains traitements
           de vos données personnelles.
         </p>
         
         <div className="consents-list">
           {consents?.map(consent => (
             <div key={consent.type} className={`consent-card ${consent.status}`}>
               <div className="consent-header">
                 <h3>{consent.label}</h3>
                 <div className="consent-status">
                   {consent.status === 'accorde' ? (
                     <span className="status-badge granted">
                       <i className="fas fa-check-circle"></i> Accordé
                     </span>
                   ) : consent.status === 'refuse' ? (
                     <span className="status-badge refused">
                       <i className="fas fa-times-circle"></i> Refusé
                     </span>
                   ) : (
                     <span className="status-badge pending">
                       <i className="fas fa-question-circle"></i> Non spécifié
                     </span>
                   )}
                 </div>
               </div>
               
               <div className="consent-description">
                 <p>{consent.description}</p>
               </div>
               
               <div className="consent-text">
                 <div dangerouslySetInnerHTML={{ __html: consent.consentText }} />
               </div>
               
               <div className="consent-last-update">
                 {consent.date && (
                   <p>
                     <small>
                       Dernière mise à jour: {new Date(consent.date).toLocaleDateString()} 
                       {consent.source && ` via ${consent.source}`}
                     </small>
                   </p>
                 )}
               </div>
               
               <div className="consent-actions">
                 <div className="consent-toggle-group">
                   <button 
                     className={`toggle-button ${consent.status === 'accorde' ? 'active' : ''}`}
                     onClick={() => handleConsentChange(consent.type, 'accorde')}
                     disabled={updateConsentMutation.isLoading}
                   >
                     J'accepte
                   </button>
                   <button 
                     className={`toggle-button ${consent.status === 'refuse' ? 'active' : ''}`}
                     onClick={() => handleConsentChange(consent.type, 'refuse')}
                     disabled={updateConsentMutation.isLoading}
                   >
                     Je refuse
                   </button>
                 </div>
               </div>
             </div>
           ))}
           
           {consents?.length === 0 && (
             <div className="empty-state">
               <p>Aucun consentement n'est requis pour le moment.</p>
             </div>
           )}
         </div>
         
         <div className="rgpd-additional-info">
           <h3>Vos droits concernant vos données personnelles</h3>
           <p>
             Conformément au RGPD, vous disposez des droits suivants concernant vos données :
           </p>
           <ul>
             <li><strong>Droit d'accès</strong> : vous pouvez demander une copie de vos données</li>
             <li><strong>Droit de rectification</strong> : vous pouvez demander à corriger vos données</li>
             <li><strong>Droit à l'effacement</strong> : vous pouvez demander la suppression de vos données</li>
             <li><strong>Droit à la limitation du traitement</strong> : vous pouvez demander la restriction du traitement</li>
             <li><strong>Droit à la portabilité</strong> : vous pouvez demander à recevoir vos données dans un format structuré</li>
           </ul>
           <p>
             Pour exercer ces droits ou pour toute question relative à la gestion de vos données, 
             contactez notre Délégué à la Protection des Données à l'adresse : <a href="mailto:dpo@elaska.fr">dpo@elaska.fr</a>
           </p>
         </div>
       </section>
     );
   };
   
   export default RgpdConsentSection;
   ```

### 6.6. Prise de Rendez-vous

Le module eLaska-ESaiko intègre un système de prise de rendez-vous en ligne synchronisé avec Google Calendar.

**Spécifications techniques:**

1. **Classe de gestion des RDV:**
   ```php
   /**
    * Gestion des rendez-vous
    */
   class ElaskaRdv extends CommonObject
   {
       /**
        * @var DoliDB Database handler
        */
       public $db;
       
       /**
        * @var string ID to identify managed object
        */
       public $element = 'elaska_rdv';
       
       /**
        * @var string Name of table without prefix where object is stored
        */
       public $table_element = 'elaska_rdv';
       
       /**
        * @var int ID
        */
       public $id;
       
       /**
        * @var string Référence eLaska
        */
       public $ref_elaska;
       
       /**
        * @var int Client concerné
        */
       public $fk_soc;
       
       /**
        * @var int Conseiller
        */
       public $fk_user_conseiller;
       
       /**
        * @var string Type de RDV (présentiel, téléphonique, visio)
        */
       public $type_rdv;
       
       /**
        * @var string Motif du RDV
        */
       public $motif;
       
       /**
        * @var string Note du client
        */
       public $note_client;
       
       /**
        * @var string Note interne
        */
       public $note_interne;
       
       /**
        * @var int Date de début
        */
       public $date_debut;
       
       /**
        * @var int Date de fin
        */
       public $date_fin;
       
       /**
        * @var int Durée en minutes
        */
       public $duree;
       
       /**
        * @var string Lieu (si présentiel)
        */
       public $lieu;
       
       /**
        * @var string Lien visio (si visio)
        */
       public $lien_visio;
       
       /**
        * @var string Statut (demande, confirme, annule, termine)
        */
       public $statut;
       
       /**
        * @var int Date de création
        */
       public $date_creation;
       
       /**
        * @var int Date de modification
        */
       public $date_modification;
       
       /**
        * @var int Dossier associé (optionnel)
        */
       public $fk_dossier;
       
       /**
        * @var string ID événement Google Calendar
        */
       public $google_event_id;
       
       /**
        * Constructor
        *
        * @param DoliDB $db Database handler
        */
       public function __construct($db)
       {
           $this->db = $db;
           $this->statut = 'demande';
           $this->date_creation = dol_now();
       }
       
       /**
        * Create RDV in database
        *
        * @param User $user User that creates
        * @param bool $notrigger false=launch triggers after, true=disable triggers
        * @return int <0 if KO, Id of created object if OK
        */
       public function create(User $user, $notrigger = false)
       {
           global $conf;
           
           $error = 0;
           
           // Clean parameters
           $this->motif = trim($this->motif);
           $this->note_client = trim($this->note_client);
           $this->note_interne = trim($this->note_interne);
           $this->lieu = trim($this->lieu);
           $this->lien_visio = trim($this->lien_visio);
           
           // Calcul automatique de la durée si non spécifiée
           if (empty($this->duree) && !empty($this->date_debut) && !empty($this->date_fin)) {
               $this->duree = ($this->date_fin - $this->date_debut) / 60; // En minutes
           }
           
           // Générer une référence eLaska si non fournie
           if (empty($this->ref_elaska)) {
               $this->ref_elaska = $this->getNextNumRef();
           }
           
           $this->db->begin();
           
           // Insert request
           $sql = "INSERT INTO " . MAIN_DB_PREFIX . $this->table_element;
           $sql .= " (entity, ref_elaska, fk_soc, fk_user_conseiller, type_rdv,";
           $sql .= " motif, note_client, note_interne, date_debut, date_fin,";
           $sql .= " duree, lieu, lien_visio, statut, date_creation,";
           $sql .= " date_modification, fk_dossier, google_event_id)";
           $sql .= " VALUES (";
           $sql .= $conf->entity . ",";
           $sql .= "'" . $this->db->escape($this->ref_elaska) . "',";
           $sql .= ($this->fk_soc > 0 ? $this->fk_soc : "null") . ",";
           $sql .= ($this->fk_user_conseiller > 0 ? $this->fk_user_conseiller : "null") . ",";
           $sql .= "'" . $this->db->escape($this->type_rdv) . "',";
           $sql .= "'" . $this->db->escape($this->motif) . "',";
           $sql .= "'" . $this->db->escape($this->note_client) . "',";
           $sql .= "'" . $this->db->escape($this->note_interne) . "',";
           $sql .= "'" . $this->db->idate($this->date_debut) . "',";
           $sql .= "'" . $this->db->idate($this->date_fin) . "',";
           $sql .= (int) $this->duree . ",";
           $sql .= "'" . $this->db->escape($this->lieu) . "',";
           $sql .= "'" . $this->db->escape($this->lien_visio) . "',";
           $sql .= "'" . $this->db->escape($this->statut) . "',";
           $sql .= "'" . $this->db->idate($this->date_creation) . "',";
           $sql .= ($this->date_modification ? "'" . $this->db->idate($this->date_modification) . "'" : "null") . ",";
           $sql .= ($this->fk_dossier > 0 ? $this->fk_dossier : "null") . ",";
           $sql .= "'" . $this->db->escape($this->google_event_id) . "'";
           $sql .= ")";
           
           dol_syslog(get_class($this) . "::create", LOG_DEBUG);
           $resql = $this->db->query($sql);
           if ($resql) {
               $this->id = $this->db->last_insert_id(MAIN_DB_PREFIX . $this->table_element);
               
               if (!$notrigger) {
                   // Appel des triggers
                   include_once DOL_DOCUMENT_ROOT . '/core/class/interfaces.class.php';
                   $interface = new Interfaces($this->db);
                   $result = $interface->run_triggers('ELASKA_RDV_CREATE', $this, $user, $langs, $conf);
                   if ($result < 0) {
                       $error++;
                       $this->errors = $interface->errors;
                   }
               }
               
               if (!$error) {
                   $this->db->commit();
                   return $this->id;
               } else {
                   $this->db->rollback();
                   return -1;
               }
           } else {
               $this->error = $this->db->lasterror();
               $this->db->rollback();
               return -1;
           }
       }
       
       /**
        * Load object in memory from the database
        *
        * @param int $id ID of record
        * @param string $ref Ref
        * @return int <0 if KO, 0 if not found, >0 if OK
        */
       public function fetch($id, $ref = null)
       {
           $sql = "SELECT * FROM " . MAIN_DB_PREFIX . $this->table_element;
           if ($id > 0) {
               $sql .= " WHERE rowid = " . $id;
           } elseif ($ref) {
               $sql .= " WHERE ref_elaska = '" . $this->db->escape($ref) . "'";
           } else {
               return -1;
           }
           
           dol_syslog(get_class($this) . "::fetch", LOG_DEBUG);
           $resql = $this->db->query($sql);
           if ($resql) {
               $obj = $this->db->fetch_object($resql);
               if ($obj) {
                   $this->id = $obj->rowid;
                   $this->ref_elaska = $obj->ref_elaska;
                   $this->fk_soc = $obj->fk_soc;
                   $this->fk_user_conseiller = $obj->fk_user_conseiller;
                   $this->type_rdv = $obj->type_rdv;
                   $this->motif = $obj->motif;
                   $this->note_client = $obj->note_client;
                   $this->note_interne = $obj->note_interne;
                   $this->date_debut = $this->db->jdate($obj->date_debut);
                   $this->date_fin = $this->db->jdate($obj->date_fin);
                   $this->duree = $obj->duree;
                   $this->lieu = $obj->lieu;
                   $this->lien_visio = $obj->lien_visio;
                   $this->statut = $obj->statut;
                   $this->date_creation = $this->db->jdate($obj->date_creation);
                   $this->date_modification = $this->db->jdate($obj->date_modification);
                   $this->fk_dossier = $obj->fk_dossier;
                   $this->google_event_id = $obj->google_event_id;
                   
                   return 1;
               } else {
                   return 0;
               }
           } else {
               $this->error = $this->db->lasterror();
               return -1;
           }
       }
       
       /**
        * Update object into database
        *
        * @param User $user User that modifies
        * @param bool $notrigger false=launch triggers after, true=disable triggers
        * @return int <0 if KO, >0 if OK
        */
       public function update(User $user, $notrigger = false)
       {
           $error = 0;
           
           // Clean parameters
           $this->motif = trim($this->motif);
           $this->note_client = trim($this->note_client);
           $this->note_interne = trim($this->note_interne);
           $this->lieu = trim($this->lieu);
           $this->lien_visio = trim($this->lien_visio);
           
           // Mise à jour de la date de modification
           $this->date_modification = dol_now();
           
           $this->db->begin();
           
           // Update request
           $sql = "UPDATE " . MAIN_DB_PREFIX . $this->table_element . " SET";
           $sql .= " ref_elaska = '" . $this->db->escape($this->ref_elaska) . "',";
           $sql .= " fk_soc = " . ($this->fk_soc > 0 ? $this->fk_soc : "null") . ",";
           $sql .= " fk_user_conseiller = " . ($this->fk_user_conseiller > 0 ? $this->fk_user_conseiller : "null") . ",";
           $sql .= " type_rdv = '" . $this->db->escape($this->type_rdv) . "',";
           $sql .= " motif = '" . $this->db->escape($this->motif) . "',";
           $sql .= " note_client = '" . $this->db->escape($this->note_client) . "',";
           $sql .= " note_interne = '" . $this->db->escape($this->note_interne) . "',";
           $sql .= " date_debut = '" . $this->db->idate($this->date_debut) . "',";
           $sql .= " date_fin = '" . $this->db->idate($this->date_fin) . "',";
           $sql .= " duree = " . (int) $this->duree . ",";
           $sql .= " lieu = '" . $this->db->escape($this->lieu) . "',";
           $sql .= " lien_visio = '" . $this->db->escape($this->lien_visio) . "',";
           $sql .= " statut = '" . $this->db->escape($this->statut) . "',";
           $sql .= " date_modification = '" . $this->db->idate($this->date_modification) . "',";
           $sql .= " fk_dossier = " . ($this->fk_dossier > 0 ? $this->fk_dossier : "null") . ",";
           $sql .= " google_event_id = '" . $this->db->escape($this->google_event_id) . "'";
           $sql .= " WHERE rowid = " . $this->id;
           
           dol_syslog(get_class($this) . "::update", LOG_DEBUG);
           $resql = $this->db->query($sql);
           if ($resql) {
               if (!$notrigger) {
                   // Appel des triggers
                   include_once DOL_DOCUMENT_ROOT . '/core/class/interfaces.class.php';
                   $interface = new Interfaces($this->db);
                   $result = $interface->run_triggers('ELASKA_RDV_MODIFY', $this, $user, $langs, $conf);
                   if ($result < 0) {
                       $error++;
                       $this->errors = $interface->errors;
                   }
               }
               
               if (!$error) {
                   $this->db->commit();
                   return 1;
               } else {
                   $this->db->rollback();
                   return -1;
               }
           } else {
               $this->error = $this->db->lasterror();
               $this->db->rollback();
               return -1;
           }
       }
       
       /**
        * Générer la prochaine référence
        *
        * @return string Référence
        */
       protected function getNextNumRef()
       {
           // Format: eLSK-RDV-YYYY-NNNNN
           global $conf;
           
           $prefix = 'eLSK-RDV';
           $year = date('Y');
           $sql = "SELECT MAX(CAST(SUBSTRING(ref_elaska, 14) AS SIGNED)) as max_num";
           $sql .= " FROM " . MAIN_DB_PREFIX . $this->table_element;
           $sql .= " WHERE ref_elaska LIKE '" . $prefix . "-" . $year . "-%'";
           $sql .= " AND entity = " . $conf->entity;
           
           $resql = $this->db->query($sql);
           if ($resql) {
               $obj = $this->db->fetch_object($resql);
               $num = (int) $obj->max_num;
               $num++;
               return $prefix . '-' . $year . '-' . sprintf('%05d', $num);
           } else {
               return $prefix . '-' . $year . '-00001';
           }
       }
       
       /**
        * Change le statut du RDV
        *
        * @param string $newStatus Nouveau statut
        * @param User $user Utilisateur qui effectue le changement
        * @return int <0 si KO, >0 si OK
        */
       public function setStatus($newStatus, User $user)
       {
           if (!in_array($newStatus, array('demande', 'confirme', 'annule', 'termine'))) {
               return -1;
           }
           
           $oldStatus = $this->statut;
           $this->statut = $newStatus;
           
           $result = $this->update($user);
           
           if ($result > 0) {
               // Actions spécifiques selon le changement de statut
               if ($oldStatus != 'confirme' && $newStatus == 'confirme') {
                   // Confirmation d'un RDV : envoi notification client, etc.
                   $this->sendConfirmationNotification();
               } elseif ($newStatus == 'annule') {
                   // Annulation : envoi notification, suppression Google Calendar, etc.
                   $this->sendCancellationNotification();
                   $this->removeFromGoogleCalendar();
               }
           }
           
           return $result;
       }
       
       /**
        * Récupérer les RDV pour un client
        *
        * @param int $socid ID du client
        * @param array $filters Filtres additionnels
        * @return array Liste des rendez-vous
        */
       public function getRdvForClient($socid, $filters = array())
       {
           $result = array();
           
           if (empty($socid)) return $result;
           
           $sql = "SELECT r.*, u.firstname, u.lastname, u.login, u.email";
           $sql.= " FROM " . MAIN_DB_PREFIX . $this->table_element . " as r";
           $sql.= " LEFT JOIN " . MAIN_DB_PREFIX . "user as u ON r.fk_user_conseiller = u.rowid";
           $sql.= " WHERE r.fk_soc = " . (int) $socid;
           
           // Ajouter les filtres
           if (!empty($filters['statut']) && is_array($filters['statut'])) {
               $sql.= " AND r.statut IN ('" . implode("','", $filters['statut']) . "')";
           }
           
           if (!empty($filters['date_from'])) {
               $sql.= " AND r.date_debut >= '" . $this->db->idate($filters['date_from']) . "'";
           }
           
           if (!empty($filters['date_to'])) {
               $sql.= " AND r.date_debut <= '" . $this->db->idate($filters['date_to']) . "'";
           }
           
           if (!empty($filters['conseiller_id'])) {
               $sql.= " AND r.fk_user_conseiller = " . (int) $filters['conseiller_id'];
           }
           
           // Tri
           $sql.= " ORDER BY r.date_debut ASC";
           
           dol_syslog(get_class($this) . "::getRdvForClient", LOG_DEBUG);
           $resql = $this->db->query($sql);
           if ($resql) {
               $num = $this->db->num_rows($resql);
               $i = 0;
               
               while ($i < $num) {
                   $obj = $this->db->fetch_object($resql);
                   
                   $rdv = new ElaskaRdv($this->db);
                   $rdv->id = $obj->rowid;
                   $rdv->ref_elaska = $obj->ref_elaska;
                   $rdv->fk_soc = $obj->fk_soc;
                   $rdv->fk_user_conseiller = $obj->fk_user_conseiller;
                   $rdv->type_rdv = $obj->type_rdv;
                   $rdv->motif = $obj->motif;
                   $rdv->note_client = $obj->note_client;
                   $rdv->note_interne = $obj->note_interne;
                   $rdv->date_debut = $this->db->jdate($obj->date_debut);
                   $rdv->date_fin = $this->db->jdate($obj->date_fin);
                   $rdv->duree = $obj->duree;
                   $rdv->lieu = $obj->lieu;
                   $rdv->lien_visio = $obj->lien_visio;
                   $rdv->statut = $obj->statut;
                   $rdv->date_creation = $this->db->jdate($obj->date_creation);
                   $rdv->date_modification = $this->db->jdate($obj->date_modification);
                   $rdv->fk_dossier = $obj->fk_dossier;
                   $rdv->google_event_id = $obj->google_event_id;
                   
                   // Infos conseiller
                   $rdv->conseiller_nom = $obj->firstname . ' ' . $obj->lastname;
                   $rdv->conseiller_login = $obj->login;
                   $rdv->conseiller_email = $obj->email;
                   
                   $result[] = $rdv;
                   $i++;
               }
           }
           
           return $result;
       }
       
       /**
        * Récupérer les disponibilités d'un conseiller
        *
        * @param int $conseillerId ID du conseiller
        * @param string $dateStart Date de début (YYYY-MM-DD)
        * @param string $dateEnd Date de fin (YYYY-MM-DD)
        * @return array Liste des créneaux disponibles
        */
       public function getConseillerAvailability($conseillerId, $dateStart, $dateEnd)
       {
           // Récupérer la configuration des disponibilités du conseiller
           require_once DOL_DOCUMENT_ROOT . '/custom/elaska/class/utils/elaskagooglecalendar.class.php';
           $googleCalendar = new ElaskaGoogleCalendar($this->db);
           
           // Récupérer les disponibilités du conseiller
           return $googleCalendar->getAvailability($conseillerId, $dateStart, $dateEnd);
       }
       
       /**
        * Envoie la notification de confirmation
        */
       protected function sendConfirmationNotification()
       {
           // Implémentation de l'envoi de notification de confirmation
           // [...]
       }
       
       /**
        * Envoie la notification d'annulation
        */
       protected function sendCancellationNotification()
       {
           // Implémentation de l'envoi de notification d'annulation
           // [...]
       }
       
       /**
        * Supprime le RDV de Google Calendar
        */
       protected function removeFromGoogleCalendar()
       {
           if (empty($this->google_event_id)) {
               return 0; // Rien à supprimer
           }
           
           require_once DOL_DOCUMENT_ROOT . '/custom/elaska/class/utils/elaskagooglecalendar.class.php';
           $googleCalendar = new ElaskaGoogleCalendar($this->db);
           
           return $googleCalendar->deleteEvent($this->fk_user_conseiller, $this->google_event_id);
       }
   }
   ```

2. **Intégration avec Google Calendar:**
   ```php
   /**
    * Intégration avec Google Calendar
    */
   class ElaskaGoogleCalendar
   {
       private $db;
       private $client;
       private $calendarService;
       
       /**
        * Constructor
        */
       public function __construct($db)
       {
           $this->db = $db;
           
           // Initialisation du client Google API
           require_once DOL_DOCUMENT_ROOT . '/custom/elaska/lib/google-api-php-client/vendor/autoload.php';
           
           $this->client = new Google_Client();
           $this->client->setApplicationName('eLaska-ESaiko');
           $this->client->setScopes(Google_Service_Calendar::CALENDAR);
       }
       
       /**
        * Initialise le client Google API pour un utilisateur spécifique
        * 
        * @param int $userId ID de l'utilisateur
        * @return bool True si succès, False sinon
        */
       private function initClientForUser($userId)
       {
           // Récupérer les tokens OAuth2 de l'utilisateur
           $sql = "SELECT google_refresh_token FROM " . MAIN_DB_PREFIX . "elaska_user_config";
           $sql.= " WHERE fk_user = " . (int) $userId;
           
           $resql = $this->db->query($sql);
           if ($resql && $this->db->num_rows($resql) > 0) {
               $obj = $this->db->fetch_object($resql);
               $refreshToken = $obj->google_refresh_token;
               
               if (empty($refreshToken)) {
                   return false;
               }
               
               // Configurer le client avec les informations d'authentification
               global $conf;
               
               $this->client->setClientId($conf->global->ELASKA_GOOGLE_CLIENT_ID);
               $this->client->setClientSecret($conf->global->ELASKA_GOOGLE_CLIENT_SECRET);
               $this->client->setRedirectUri($conf->global->ELASKA_GOOGLE_REDIRECT_URI);
               
               // Utiliser le refresh token pour obtenir un nouvel access token
               $this->client->refreshToken($refreshToken);
               
               // Initialiser le service Calendar
               $this->calendarService = new Google_Service_Calendar($this->client);
               
               return true;
           }
           
           return false;
       }
       
       /**
        * Récupère le calendrier principal de l'utilisateur
        * 
        * @param int $userId ID de l'utilisateur
        * @return string ID du calendrier primaire ou null si erreur
        */
       private function getPrimaryCalendarId($userId)
       {
           if (!$this->initClientForUser($userId)) {
               return null;
           }
           
           try {
               $calendarList = $this->calendarService->calendarList->listCalendarList();
               
               foreach ($calendarList->getItems() as $calendarListEntry) {
                   if ($calendarListEntry->getPrimary()) {
                       return $calendarListEntry->getId();
                   }
               }
               
               // Si aucun calendrier primaire n'est trouvé, utiliser 'primary'
               return 'primary';
           } catch (Exception $e) {
               dol_syslog(__METHOD__ . ' Error: ' . $e->getMessage(), LOG_ERR);
               return null;
           }
       }
       
       /**
        * Récupère les disponibilités d'un conseiller
        * 
        * @param int $conseillerId ID du conseiller
        * @param string $dateStart Date de début (YYYY-MM-DD)
        * @param string $dateEnd Date de fin (YYYY-MM-DD)
        * @return array Liste des créneaux disponibles
        */
       public function getAvailability($conseillerId, $dateStart, $dateEnd)
       {
           if (!$this->initClientForUser($conseillerId)) {
               return array('error' => 'Impossible d\'initialiser l\'accès au calendrier');
           }
           
           $calendarId = $this->getPrimaryCalendarId($conseillerId);
           if (!$calendarId) {
               return array('error' => 'Calendrier non trouvé');
           }
           
           // Récupérer les événements existants dans la période
           $events = $this->getEvents($conseillerId, $calendarId, $dateStart, $dateEnd);
           if (isset($events['error'])) {
               return $events;
           }
           
           // Récupérer la configuration des disponibilités du conseiller
           $availabilityConfig = $this->getConseillerAvailabilityConfig($conseillerId);
           
           // Générer les créneaux disponibles
           return $this->generateAvailableSlots($events, $availabilityConfig, $dateStart, $dateEnd);
       }
       
       /**
        * Récupère les événements d'un calendrier
        * 
        * @param int $userId ID de l'utilisateur
        * @param string $calendarId ID du calendrier
        * @param string $dateStart Date de début (YYYY-MM-DD)
        * @param string $dateEnd Date de fin (YYYY-MM-DD)
        * @return array Liste des événements ou erreur
        */
       private function getEvents($userId, $calendarId, $dateStart, $dateEnd)
       {
           if (!$this->initClientForUser($userId)) {
               return array('error' => 'Impossible d\'initialiser l\'accès au calendrier');
           }
           
           try {
               $optParams = array(
                   'timeMin' => date('c', strtotime($dateStart . ' 00:00:00')),
                   'timeMax' => date('c', strtotime($dateEnd . ' 23:59:59')),
                   'singleEvents' => true,
                   'orderBy' => 'startTime'
               );
               
               $results = $this->calendarService->events->listEvents($calendarId, $optParams);
               $events = array();
               
               foreach ($results->getItems() as $event) {
                   $start = $event->getStart();
                   $end = $event->getEnd();
                   $startTime = (isset($start->dateTime)) ? $start->dateTime : $start->date;
                   $endTime = (isset($end->dateTime)) ? $end->dateTime : $end->date;
                   
                   $events[] = array(
                       'id' => $event->getId(),
                       'summary' => $event->getSummary(),
                       'start' => $startTime,
                       'end' => $endTime,
                       'allDay' => !isset($start->dateTime)
                   );
               }
               
               return $events;
           } catch (Exception $e) {
               dol_syslog(__METHOD__ . ' Error: ' . $e->getMessage(), LOG_ERR);
               return array('error' => 'Erreur lors de la récupération des événements: ' . $e->getMessage());
           }
       }
       
       /**
        * Récupère la configuration des disponibilités d'un conseiller
        * 
        * @param int $conseillerId ID du conseiller
        * @return array Configuration des disponibilités
        */
       private function getConseillerAvailabilityConfig($conseillerId)
       {
           $config = array();
           
           $sql = "SELECT jour_semaine, heure_debut, heure_fin, duree_creneau, temps_tampon";
           $sql.= " FROM " . MAIN_DB_PREFIX . "elaska_user_rdv_config";
           $sql.= " WHERE fk_user = " . (int) $conseillerId;
           $sql.= " AND actif = 1";
           
           $resql = $this->db->query($sql);
           if ($resql) {
               $num = $this->db->num_rows($resql);
               $i = 0;
               
               while ($i < $num) {
                   $obj = $this->db->fetch_object($resql);
                   
                   $config[] = array(
                       'jour_semaine' => $obj->jour_semaine,
                       'heure_debut' => $obj->heure_debut,
                       'heure_fin' => $obj->heure_fin,
                       'duree_creneau' => $obj->duree_creneau,
                       'temps_tampon' => $obj->temps_tampon
                   );
                   
                   $i++;
               }
           }
           
           // Configuration par défaut si aucune configuration n'est trouvée
           if (empty($config)) {
               // Du lundi au vendredi, 9h-12h et 14h-18h, créneaux de 30 min, temps tampon de 15 min
               for ($jour = 1; $jour <= 5; $jour++) {
                   $config[] = array(
                       'jour_semaine' => $jour,
                       'heure_debut' => '09:00:00',
                       'heure_fin' => '12:00:00',
                       'duree_creneau' => 30,
                       'temps_tampon' => 15
                   );
                   
                   $config[] = array(
                       'jour_semaine' => $jour,
                       'heure_debut' => '14:00:00',
                       'heure_fin' => '18:00:00',
                       'duree_creneau' => 30,
                       'temps_tampon' => 15
                   );
               }
           }
           
           return $config;
       }
       
       /**
        * Génère les créneaux disponibles
        * 
        * @param array $events Liste des événements existants
        * @param array $config Configuration des disponibilités
        * @param string $dateStart Date de début (YYYY-MM-DD)
        * @param string $dateEnd Date de fin (YYYY-MM-DD)
        * @return array Liste des créneaux disponibles
        */
       private function generateAvailableSlots($events, $config, $dateStart, $dateEnd)
       {
           $slots = array();
           $start = new DateTime($dateStart);
           $end = new DateTime($dateEnd);
           $end->modify('+1 day'); // Inclure le dernier jour
           
           $busyTimes = array();
           foreach ($events as $event) {
               if (isset($event['id'])) { // Ignorer les erreurs
                   $busyTimes[] = array(
                       'start' => new DateTime($event['start']),
                       'end' => new DateTime($event['end'])
                   );
               }
           }
           
           // Pour chaque jour dans la période
           $currentDay = clone $start;
           while ($currentDay < $end) {
               $jourSemaine = $currentDay->format('N'); // 1 (lundi) à 7 (dimanche)
               
               // Chercher les configurations pour ce jour de la semaine
               $dayConfig = array_filter($config, function($c) use ($jourSemaine) {
                   return $c['jour_semaine'] == $jourSemaine;
               });
               
               // Pour chaque plage horaire configurée
               foreach ($dayConfig as $plage) {
                   list($h, $m, $s) = explode(':', $plage['heure_debut']);
                   $startTime = clone $currentDay;
                   ```php
                   $startTime->setTime((int)$h, (int)$m, (int)$s);
                   
                   list($h, $m, $s) = explode(':', $plage['heure_fin']);
                   $endTime = clone $currentDay;
                   $endTime->setTime((int)$h, (int)$m, (int)$s);
                   
                   // Durée du créneau en minutes
                   $slotDuration = $plage['duree_creneau'];
                   // Temps tampon en minutes
                   $bufferTime = $plage['temps_tampon'];
                   // Durée totale d'un créneau (créneau + tampon)
                   $totalDuration = $slotDuration + $bufferTime;
                   
                   // Générer les créneaux
                   $slotStart = clone $startTime;
                   while ($slotStart < $endTime) {
                       $slotEnd = clone $slotStart;
                       $slotEnd->modify('+' . $slotDuration . ' minutes');
                       
                       // Vérifier si ce créneau chevauche un événement existant
                       $isAvailable = true;
                       foreach ($busyTimes as $busy) {
                           // Si le créneau commence pendant un événement existant
                           if (($slotStart >= $busy['start'] && $slotStart < $busy['end']) ||
                               // Ou si le créneau se termine pendant un événement existant
                               ($slotEnd > $busy['start'] && $slotEnd <= $busy['end']) ||
                               // Ou si le créneau englobe complètement un événement existant
                               ($slotStart <= $busy['start'] && $slotEnd >= $busy['end'])) {
                               $isAvailable = false;
                               break;
                           }
                       }
                       
                       // Si le créneau est disponible
                       if ($isAvailable) {
                           $slots[] = array(
                               'start' => $slotStart->format('Y-m-d H:i:s'),
                               'end' => $slotEnd->format('Y-m-d H:i:s'),
                               'duration' => $slotDuration
                           );
                       }
                       
                       // Passer au créneau suivant
                       $slotStart->modify('+' . $totalDuration . ' minutes');
                   }
               }
               
               // Passer au jour suivant
               $currentDay->modify('+1 day');
           }
           
           return $slots;
       }
       
       /**
        * Crée un événement dans le calendrier
        * 
        * @param int $userId ID de l'utilisateur
        * @param array $eventData Données de l'événement
        * @return string|array ID de l'événement créé ou erreur
        */
       public function createEvent($userId, $eventData)
       {
           if (!$this->initClientForUser($userId)) {
               return array('error' => 'Impossible d\'initialiser l\'accès au calendrier');
           }
           
           $calendarId = $this->getPrimaryCalendarId($userId);
           if (!$calendarId) {
               return array('error' => 'Calendrier non trouvé');
           }
           
           try {
               $event = new Google_Service_Calendar_Event();
               $event->setSummary($eventData['summary']);
               
               if (!empty($eventData['description'])) {
                   $event->setDescription($eventData['description']);
               }
               
               if (!empty($eventData['location'])) {
                   $event->setLocation($eventData['location']);
               }
               
               // Date et heure de début
               $start = new Google_Service_Calendar_EventDateTime();
               $start->setDateTime(date('c', strtotime($eventData['start'])));
               $start->setTimeZone('Europe/Paris');
               $event->setStart($start);
               
               // Date et heure de fin
               $end = new Google_Service_Calendar_EventDateTime();
               $end->setDateTime(date('c', strtotime($eventData['end'])));
               $end->setTimeZone('Europe/Paris');
               $event->setEnd($end);
               
               // Configuration de la visibilité
               if (isset($eventData['visibility'])) {
                   $event->setVisibility($eventData['visibility']);
               }
               
               // Configuration des notifications
               if (isset($eventData['reminders'])) {
                   $reminders = new Google_Service_Calendar_EventReminders();
                   $reminders->setUseDefault(false);
                   $reminderItems = array();
                   
                   foreach ($eventData['reminders'] as $reminder) {
                       $reminderItem = new Google_Service_Calendar_EventReminder();
                       $reminderItem->setMethod($reminder['method']);
                       $reminderItem->setMinutes($reminder['minutes']);
                       $reminderItems[] = $reminderItem;
                   }
                   
                   $reminders->setOverrides($reminderItems);
                   $event->setReminders($reminders);
               }
               
               // Participants
               if (isset($eventData['attendees']) && is_array($eventData['attendees'])) {
                   $attendees = array();
                   foreach ($eventData['attendees'] as $attendee) {
                       $attendeeObj = new Google_Service_Calendar_EventAttendee();
                       $attendeeObj->setEmail($attendee['email']);
                       if (isset($attendee['displayName'])) {
                           $attendeeObj->setDisplayName($attendee['displayName']);
                       }
                       $attendees[] = $attendeeObj;
                   }
                   $event->setAttendees($attendees);
               }
               
               // Créer l'événement
               $createdEvent = $this->calendarService->events->insert($calendarId, $event);
               
               return $createdEvent->getId();
           } catch (Exception $e) {
               dol_syslog(__METHOD__ . ' Error: ' . $e->getMessage(), LOG_ERR);
               return array('error' => 'Erreur lors de la création de l\'événement: ' . $e->getMessage());
           }
       }
       
       /**
        * Met à jour un événement dans le calendrier
        * 
        * @param int $userId ID de l'utilisateur
        * @param string $eventId ID de l'événement
        * @param array $eventData Données de l'événement
        * @return bool True si succès, False sinon
        */
       public function updateEvent($userId, $eventId, $eventData)
       {
           if (!$this->initClientForUser($userId)) {
               return false;
           }
           
           $calendarId = $this->getPrimaryCalendarId($userId);
           if (!$calendarId) {
               return false;
           }
           
           try {
               // Récupérer l'événement existant
               $event = $this->calendarService->events->get($calendarId, $eventId);
               
               // Mettre à jour les champs
               if (isset($eventData['summary'])) {
                   $event->setSummary($eventData['summary']);
               }
               
               if (isset($eventData['description'])) {
                   $event->setDescription($eventData['description']);
               }
               
               if (isset($eventData['location'])) {
                   $event->setLocation($eventData['location']);
               }
               
               // Mettre à jour les dates si nécessaire
               if (isset($eventData['start'])) {
                   $start = new Google_Service_Calendar_EventDateTime();
                   $start->setDateTime(date('c', strtotime($eventData['start'])));
                   $start->setTimeZone('Europe/Paris');
                   $event->setStart($start);
               }
               
               if (isset($eventData['end'])) {
                   $end = new Google_Service_Calendar_EventDateTime();
                   $end->setDateTime(date('c', strtotime($eventData['end'])));
                   $end->setTimeZone('Europe/Paris');
                   $event->setEnd($end);
               }
               
               // Mettre à jour l'événement
               $updatedEvent = $this->calendarService->events->update($calendarId, $eventId, $event);
               
               return ($updatedEvent->getId() == $eventId);
           } catch (Exception $e) {
               dol_syslog(__METHOD__ . ' Error: ' . $e->getMessage(), LOG_ERR);
               return false;
           }
       }
       
       /**
        * Supprime un événement du calendrier
        * 
        * @param int $userId ID de l'utilisateur
        * @param string $eventId ID de l'événement
        * @return bool True si succès, False sinon
        */
       public function deleteEvent($userId, $eventId)
       {
           if (!$this->initClientForUser($userId)) {
               return false;
           }
           
           $calendarId = $this->getPrimaryCalendarId($userId);
           if (!$calendarId) {
               return false;
           }
           
           try {
               $this->calendarService->events->delete($calendarId, $eventId);
               return true;
           } catch (Exception $e) {
               dol_syslog(__METHOD__ . ' Error: ' . $e->getMessage(), LOG_ERR);
               return false;
           }
       }
   }
   ```

3. **Portail client - Interface de prise de RDV:**
   ```jsx
   // src/pages/RDV.jsx
   import { useState, useEffect } from 'react';
   import { useQuery, useMutation, useQueryClient } from 'react-query';
   import { fetchConseillers, fetchConseillerAvailability, bookAppointment, fetchUserAppointments } from '@services/endpoints/rdv';
   import { useAuth } from '@context/AuthContext';
   import { formatDate, parseDate, isInThePast } from '@utils/date-utils';
   
   // Composants
   import Calendar from '@components/domain/rdv/Calendar';
   import TimeSlotPicker from '@components/domain/rdv/TimeSlotPicker';
   import AppointmentForm from '@components/domain/rdv/AppointmentForm';
   import AppointmentList from '@components/domain/rdv/AppointmentList';
   import AppointmentDetail from '@components/domain/rdv/AppointmentDetail';
   
   const RDV = () => {
     const { user } = useAuth();
     const clientId = user?.id;
     const queryClient = useQueryClient();
     
     // État local
     const [selectedConseiller, setSelectedConseiller] = useState(null);
     const [selectedDate, setSelectedDate] = useState(null);
     const [selectedSlot, setSelectedSlot] = useState(null);
     const [bookingStep, setBookingStep] = useState(0); // 0: sélection conseiller, 1: sélection date/heure, 2: formulaire
     const [viewMode, setViewMode] = useState('list'); // 'list', 'booking', 'detail'
     const [selectedAppointment, setSelectedAppointment] = useState(null);
     
     // Requêtes
     const { data: conseillers, isLoading: loadingConseillers } = useQuery(
       'conseillers',
       fetchConseillers
     );
     
     const { data: appointments, isLoading: loadingAppointments } = useQuery(
       ['appointments', clientId],
       () => fetchUserAppointments(clientId),
       { enabled: !!clientId }
     );
     
     const { data: availability, isLoading: loadingAvailability } = useQuery(
       ['availability', selectedConseiller?.id, selectedDate],
       () => fetchConseillerAvailability(selectedConseiller.id, formatDate(selectedDate, 'date')),
       { enabled: !!selectedConseiller && !!selectedDate }
     );
     
     // Mutations
     const bookAppointmentMutation = useMutation(bookAppointment, {
       onSuccess: () => {
         queryClient.invalidateQueries(['appointments', clientId]);
         setViewMode('list');
         setBookingStep(0);
         setSelectedConseiller(null);
         setSelectedDate(null);
         setSelectedSlot(null);
       }
     });
     
     // Effets
     useEffect(() => {
       // Réinitialiser le créneau sélectionné lorsque la date change
       setSelectedSlot(null);
     }, [selectedDate]);
     
     // Gestionnaires d'événements
     const handleViewBooking = () => {
       setViewMode('booking');
       setBookingStep(0);
     };
     
     const handleSelectConseiller = (conseiller) => {
       setSelectedConseiller(conseiller);
       setBookingStep(1);
     };
     
     const handleSelectDate = (date) => {
       setSelectedDate(date);
     };
     
     const handleSelectSlot = (slot) => {
       setSelectedSlot(slot);
       setBookingStep(2);
     };
     
     const handleBookingBack = () => {
       if (bookingStep > 0) {
         setBookingStep(bookingStep - 1);
       } else {
         setViewMode('list');
       }
     };
     
     const handleSubmitBooking = (formData) => {
       if (!selectedConseiller || !selectedSlot) return;
       
       const appointmentData = {
         clientId,
         conseillerId: selectedConseiller.id,
         startTime: selectedSlot.start,
         endTime: selectedSlot.end,
         ...formData
       };
       
       bookAppointmentMutation.mutate(appointmentData);
     };
     
     const handleViewAppointment = (appointment) => {
       setSelectedAppointment(appointment);
       setViewMode('detail');
     };
     
     const handleBackToList = () => {
       setViewMode('list');
       setSelectedAppointment(null);
     };
     
     // Rendu du composant
     return (
       <div className="rdv-page">
         <header className="page-header">
           <h1>Mes Rendez-vous</h1>
           {viewMode === 'list' && (
             <div className="header-actions">
               <button 
                 className="primary-button"
                 onClick={handleViewBooking}
               >
                 <i className="fas fa-calendar-plus"></i> Prendre rendez-vous
               </button>
             </div>
           )}
         </header>
         
         {viewMode === 'list' && (
           <AppointmentList 
             appointments={appointments || []} 
             loading={loadingAppointments}
             onViewAppointment={handleViewAppointment}
           />
         )}
         
         {viewMode === 'detail' && selectedAppointment && (
           <AppointmentDetail 
             appointment={selectedAppointment}
             onBack={handleBackToList}
           />
         )}
         
         {viewMode === 'booking' && (
           <div className="booking-container">
             <div className="booking-progress">
               <div className={`progress-step ${bookingStep >= 0 ? 'active' : ''}`}>
                 <div className="step-number">1</div>
                 <div className="step-label">Conseiller</div>
               </div>
               <div className={`progress-connector ${bookingStep >= 1 ? 'active' : ''}`}></div>
               <div className={`progress-step ${bookingStep >= 1 ? 'active' : ''}`}>
                 <div className="step-number">2</div>
                 <div className="step-label">Date et heure</div>
               </div>
               <div className={`progress-connector ${bookingStep >= 2 ? 'active' : ''}`}></div>
               <div className={`progress-step ${bookingStep >= 2 ? 'active' : ''}`}>
                 <div className="step-number">3</div>
                 <div className="step-label">Confirmation</div>
               </div>
             </div>
             
             <div className="booking-content">
               {bookingStep === 0 && (
                 <div className="conseillers-selection">
                   <h2>Choisissez votre conseiller</h2>
                   {loadingConseillers ? (
                     <div className="loading-spinner">Chargement des conseillers...</div>
                   ) : (
                     <div className="conseillers-grid">
                       {conseillers?.map(conseiller => (
                         <div 
                           key={conseiller.id} 
                           className={`conseiller-card ${selectedConseiller?.id === conseiller.id ? 'selected' : ''}`}
                           onClick={() => handleSelectConseiller(conseiller)}
                         >
                           <div className="conseiller-photo">
                             {conseiller.photo ? (
                               <img src={conseiller.photo} alt={conseiller.name} />
                             ) : (
                               <div className="avatar-placeholder">
                                 <i className="fas fa-user"></i>
                               </div>
                             )}
                           </div>
                           <h3>{conseiller.name}</h3>
                           <p className="conseiller-title">{conseiller.title}</p>
                           <p className="conseiller-speciality">{conseiller.speciality}</p>
                         </div>
                       ))}
                     </div>
                   )}
                 </div>
               )}
               
               {bookingStep === 1 && (
                 <div className="date-time-selection">
                   <h2>Choisissez une date et un horaire</h2>
                   <div className="date-time-grid">
                     <div className="calendar-container">
                       <Calendar 
                         selectedDate={selectedDate}
                         onSelectDate={handleSelectDate}
                         conseillerAvailability={availability?.availableDates}
                         minDate={new Date()}
                       />
                     </div>
                     
                     <div className="time-slots-container">
                       {selectedDate ? (
                         <TimeSlotPicker
                           slots={availability?.slots || []}
                           selectedSlot={selectedSlot}
                           onSelectSlot={handleSelectSlot}
                           loading={loadingAvailability}
                         />
                       ) : (
                         <div className="info-message">
                           <i className="fas fa-calendar-day"></i>
                           <p>Veuillez sélectionner une date dans le calendrier</p>
                         </div>
                       )}
                     </div>
                   </div>
                 </div>
               )}
               
               {bookingStep === 2 && (
                 <div className="booking-confirmation">
                   <h2>Confirmez votre rendez-vous</h2>
                   
                   <div className="booking-summary">
                     <div className="summary-item">
                       <span className="label">Conseiller:</span>
                       <span className="value">{selectedConseiller.name}</span>
                     </div>
                     <div className="summary-item">
                       <span className="label">Date:</span>
                       <span className="value">{formatDate(selectedSlot.start, 'datetext')}</span>
                     </div>
                     <div className="summary-item">
                       <span className="label">Horaire:</span>
                       <span className="value">{formatDate(selectedSlot.start, 'time')} - {formatDate(selectedSlot.end, 'time')}</span>
                     </div>
                     <div className="summary-item">
                       <span className="label">Durée:</span>
                       <span className="value">{selectedSlot.duration} minutes</span>
                     </div>
                   </div>
                   
                   <AppointmentForm
                     onSubmit={handleSubmitBooking}
                     isSubmitting={bookAppointmentMutation.isLoading}
                     conseiller={selectedConseiller}
                   />
                 </div>
               )}
             </div>
             
             <div className="booking-actions">
               <button 
                 className="secondary-button"
                 onClick={handleBookingBack}
               >
                 <i className="fas fa-arrow-left"></i> Retour
               </button>
               
               {bookingStep === 1 && selectedDate && selectedSlot && (
                 <button
                   className="primary-button"
                   onClick={() => setBookingStep(2)}
                 >
                   Continuer <i className="fas fa-arrow-right"></i>
                 </button>
               )}
             </div>
           </div>
         )}
       </div>
     );
   };
   
   export default RDV;
   ```

## 7. SÉCURITÉ

### 7.1. Modèle de sécurité

Le module eLaska-ESaiko implémente un modèle de sécurité robuste à plusieurs niveaux pour protéger les données sensibles des clients et garantir la conformité réglementaire.

**Spécifications techniques:**

1. **Vue d'ensemble du modèle de sécurité:**
   - **Sécurité par défaut:** Le système suit une approche "sécurité par défaut" où chaque accès est refusé par défaut et doit être explicitement accordé.
   - **Défense en profondeur:** Les mécanismes de sécurité sont déployés à plusieurs niveaux (authentification, autorisations, chiffrement, etc.).
   - **Principe du moindre privilège:** Chaque utilisateur n'a accès qu'aux données minimales nécessaires à sa fonction.
   - **Séparation des environnements:** Les environnements de développement, test et production sont strictement séparés.
   - **Journalisation complète:** Toutes les opérations sensibles sont tracées et journalisées.

2. **Les principales menaces adressées:**
   - **Vol de données/exfiltration:** Prévenu par le chiffrement des données sensibles et le contrôle d'accès strict.
   - **Élévation de privilège:** Contrôlée par une gestion fine des permissions et la surveillance des actions administratives.
   - **Injection SQL/XSS/CSRF:** Mitigée par des pratiques de développement sécurisées et des validations rigoureuses.
   - **Attaques de force brute:** Limitées par des mécanismes d'authentification renforcée et des limites de tentatives.
   - **Menaces internes:** Réduites par l'audit des actions et la limitation des accès privilégiés.

3. **Architecture de sécurité:**
   ```
   UTILISATEURS WEB                UTILISATEURS BACKOFFICE
   (Portail Client)               (Gestionnaires/Conseillers)
          │                                │
          ↓                                ↓
   ┌──────────────┐              ┌──────────────┐
   │  TLS/SSL     │              │  TLS/SSL     │
   │  Terminaison │              │  Terminaison │
   └──────┬───────┘              └──────┬───────┘
          │                                │
          ↓                                ↓
   ┌──────────────┐              ┌──────────────┐
   │  Auth JWT    │              │ Auth Dolibarr│
   │  OAuth 2.0   │              │ Session      │
   └──────┬───────┘              └──────┬───────┘
          │                                │
          ↓                                ↓
   ┌──────────────┐              ┌──────────────┐
   │ API REST     │              │ Dolibarr     │
   │ Sécurisée    │◄────────────►│ Core         │
   └──────┬───────┘              └──────┬───────┘
          │                                │
          └───────────┬───────────────────┘
                      │
                      ↓
              ┌──────────────┐
              │ Contrôle     │
              │ d'accès      │
              │ par rôle     │
              └──────┬───────┘
                      │
                      ↓
              ┌──────────────┐
              │ Chiffrement  │
              │ données      │
              │ sensibles    │
              └──────┬───────┘
                      │
                      ↓
              ┌──────────────┐
              │ Base de      │
              │ données      │
              │ sécurisée    │
              └──────────────┘
   ```

### 7.2. Chiffrement des données

Le module implémente un système de chiffrement multicouche pour sécuriser les données sensibles des clients.

**Spécifications techniques:**

1. **Données chiffrées:**
   - **Niveau 1 (standard):** Coordonnées bancaires, contrats, informations patrimoniales
   - **Niveau 2 (renforcé):** Documents du coffre-fort numérique, données médicales/personnelles très sensibles

2. **Implémentation du chiffrement:**
   ```php
   /**
    * Service de chiffrement pour eLaska-ESaiko
    */
   class ElaskaEncryptionService
   {
       /**
        * Algorithme de chiffrement
        * AES-256-CBC pour un bon équilibre sécurité/performance
        */
       private $cipher = 'AES-256-CBC';
       
       /**
        * Clé maître de chiffrement (issue de la configuration)
        */
       private $masterKey;
       
       /**
        * Niveau de sécurité actuel (1 ou 2)
        */
       private $securityLevel;
       
       /**
        * Constructor
        *
        * @param int $securityLevel Niveau de sécurité (1=standard, 2=renforcé)
        */
       public function __construct($securityLevel = 1)
       {
           global $conf;
           
           // Vérifier que la clé maître est définie
           if (empty($conf->global->ELASKA_ENCRYPTION_MASTER_KEY)) {
               throw new Exception('La clé de chiffrement maître n\'est pas définie');
           }
           
           $this->masterKey = $conf->global->ELASKA_ENCRYPTION_MASTER_KEY;
           $this->securityLevel = min(max(1, (int)$securityLevel), 2); // Limiter à 1 ou 2
       }
       
       /**
        * Génère une clé dérivée à partir de la clé maître et d'un sel
        *
        * @param string $salt Sel unique (généralement un identifiant d'entité)
        * @return string Clé dérivée
        */
       private function deriveKey($salt)
       {
           // Le sel permet d'avoir une clé différente pour chaque entité
           // même si la clé maître est la même
           $iterations = $this->securityLevel === 2 ? 10000 : 1000;
           $keyLength = 32; // 256 bits
           
           return hash_pbkdf2(
               'sha256',
               $this->masterKey,
               $salt,
               $iterations,
               $keyLength,
               true
           );
       }
       
       /**
        * Chiffre une donnée
        *
        * @param string $data Donnée à chiffrer
        * @param string $salt Sel unique (identifiant d'entité)
        * @return string Donnée chiffrée (format: iv:données encodées en base64)
        */
       public function encrypt($data, $salt)
       {
           if (empty($data)) {
               return '';
           }
           
           // Générer un vecteur d'initialisation aléatoire
           $iv = openssl_random_pseudo_bytes(openssl_cipher_iv_length($this->cipher));
           
           // Dériver la clé pour cette entité
           $key = $this->deriveKey($salt);
           
           // Chiffrer la donnée
           $encrypted = openssl_encrypt(
               $data,
               $this->cipher,
               $key,
               OPENSSL_RAW_DATA,
               $iv
           );
           
           if ($encrypted === false) {
               throw new Exception('Erreur de chiffrement: ' . openssl_error_string());
           }
           
           // Si niveau de sécurité renforcé, appliquer un double chiffrement
           if ($this->securityLevel === 2) {
               // Second vecteur d'initialisation
               $iv2 = openssl_random_pseudo_bytes(openssl_cipher_iv_length($this->cipher));
               
               // Second chiffrement avec une clé dérivée différemment
               $key2 = $this->deriveKey($salt . '_layer2');
               $encrypted = openssl_encrypt(
                   $encrypted,
                   $this->cipher,
                   $key2,
                   OPENSSL_RAW_DATA,
                   $iv2
               );
               
               if ($encrypted === false) {
                   throw new Exception('Erreur de chiffrement couche 2: ' . openssl_error_string());
               }
               
               // Combiner les deux vecteurs d'initialisation
               $iv = $iv . ':' . $iv2;
           }
           
           // Encoder le résultat pour stockage en base
           return base64_encode($iv) . ':' . base64_encode($encrypted);
       }
       
       /**
        * Déchiffre une donnée
        *
        * @param string $encryptedData Donnée chiffrée (format: iv:données encodées en base64)
        * @param string $salt Sel unique (identifiant d'entité)
        * @return string Donnée déchiffrée
        */
       public function decrypt($encryptedData, $salt)
       {
           if (empty($encryptedData)) {
               return '';
           }
           
           // Séparer l'IV et les données chiffrées
           list($ivEncoded, $dataEncoded) = explode(':', $encryptedData, 2);
           
           $iv = base64_decode($ivEncoded);
           $encryptedRaw = base64_decode($dataEncoded);
           
           // Détecter si c'est un double chiffrement (niveau 2)
           $isDoubleEncrypted = strpos($iv, ':') !== false;
           
           if ($isDoubleEncrypted) {
               list($iv1, $iv2) = explode(':', $iv, 2);
               
               // Déchiffrer la première couche
               $key2 = $this->deriveKey($salt . '_layer2');
               $decrypted = openssl_decrypt(
                   $encryptedRaw,
                   $this->cipher,
                   $key2,
                   OPENSSL_RAW_DATA,
                   $iv2
               );
               
               if ($decrypted === false) {
                   throw new Exception('Erreur de déchiffrement couche 2: ' . openssl_error_string());
               }
               
               // Préparer pour la seconde couche
               $encryptedRaw = $decrypted;
               $iv = $iv1;
           }
           
           // Dériver la clé
           $key = $this->deriveKey($salt);
           
           // Déchiffrer la donnée
           $decrypted = openssl_decrypt(
               $encryptedRaw,
               $this->cipher,
               $key,
               OPENSSL_RAW_DATA,
               $iv
           );
           
           if ($decrypted === false) {
               throw new Exception('Erreur de déchiffrement: ' . openssl_error_string());
           }
           
           return $decrypted;
       }
       
       /**
        * Vérifie si la donnée est chiffrée
        *
        * @param string $data Donnée à vérifier
        * @return bool True si la donnée semble chiffrée
        */
       public function isEncrypted($data)
       {
           if (empty($data)) {
               return false;
           }
           
           // Une donnée chiffrée doit avoir le format iv:données encodées en base64
           return strpos($data, ':') !== false &&
                  preg_match('/^[A-Za-z0-9+\/=]+:[A-Za-z0-9+\/=]+$/', $data);
       }
       
       /**
        * Change le niveau de sécurité
        *
        * @param int $newLevel Nouveau niveau (1=standard, 2=renforcé)
        */
       public function setSecurityLevel($newLevel)
       {
           $this->securityLevel = min(max(1, (int)$newLevel), 2);
       }
   }
   ```

3. **Gestion des clés:**
   ```php
   /**
    * Gestionnaire de clés pour eLaska-ESaiko
    */
   class ElaskaKeyManager
   {
       private $db;
       
       /**
        * Constructor
        */
       public function __construct($db)
       {
           $this->db = $db;
       }
       
       /**
        * Génère une nouvelle clé maître de chiffrement
        *
        * @return string Clé générée
        */
       public function generateMasterKey()
       {
           // Générer une clé aléatoire forte de 256 bits
           $randomBytes = openssl_random_pseudo_bytes(32);
           return bin2hex($randomBytes);
       }
       
       /**
        * Stocke la clé maître chiffrée dans la configuration
        *
        * @param string $masterKey Clé maître à stocker
        * @param string $adminPassword Mot de passe administrateur pour chiffrer la clé
        * @return bool True si succès
        */
       public function storeMasterKey($masterKey, $adminPassword)
       {
           global $conf;
           
           // Générer un sel aléatoire pour le chiffrement
           $salt = openssl_random_pseudo_bytes(16);
           $saltHex = bin2hex($salt);
           
           // Dériver une clé de chiffrement à partir du mot de passe admin
           $derivedKey = hash_pbkdf2('sha256', $adminPassword, $salt, 10000, 32, true);
           
           // Chiffrer la clé maître avec la clé dérivée
           $iv = openssl_random_pseudo_bytes(16);
           $encryptedKey = openssl_encrypt(
               $masterKey,
               'AES-256-CBC',
               $derivedKey,
               OPENSSL_RAW_DATA,
               $iv
           );
           
           if ($encryptedKey === false) {
               return false;
           }
           
           // Stocker les valeurs dans la configuration
           $encryptedKeyBase64 = base64_encode($encryptedKey);
           $ivBase64 = base64_encode($iv);
           
           dolibarr_set_const($this->db, 'ELASKA_ENCRYPTION_MASTER_KEY_ENC', $encryptedKeyBase64, 'chaine', 0, '', $conf->entity);
           dolibarr_set_const($this->db, 'ELASKA_ENCRYPTION_MASTER_KEY_IV', $ivBase64, 'chaine', 0, '', $conf->entity);
           dolibarr_set_const($this->db, 'ELASKA_ENCRYPTION_MASTER_KEY_SALT', $saltHex, 'chaine', 0, '', $conf->entity);
           
           return true;
       }
       
       /**
        * Récupère la clé maître
        *
        * @param string $adminPassword Mot de passe administrateur pour déchiffrer la clé
        * @return string|bool Clé maître ou false si erreur
        */
       public function retrieveMasterKey($adminPassword)
       {
           global $conf;
           
           // Récupérer les valeurs de la configuration
           $encryptedKeyBase64 = $conf->global->ELASKA_ENCRYPTION_MASTER_KEY_ENC;
           $ivBase64 = $conf->global->ELASKA_ENCRYPTION_MASTER_KEY_IV;
           $saltHex = $conf->global->ELASKA_ENCRYPTION_MASTER_KEY_SALT;
           
           if (empty($encryptedKeyBase64) || empty($ivBase64) || empty($saltHex)) {
               return false;
           }
           
           // Décoder les valeurs
           $encryptedKey = base64_decode($encryptedKeyBase64);
           $iv = base64_decode($ivBase64);
           $salt = hex2bin($saltHex);
           
           // Dériver la clé de chiffrement à partir du mot de passe admin
           $derivedKey = hash_pbkdf2('sha256', $adminPassword, $salt, 10000, 32, true);
           
           // Déchiffrer la clé maître
           $masterKey = openssl_decrypt(
               $encryptedKey,
               'AES-256-CBC',
               $derivedKey,
               OPENSSL_RAW_DATA,
               $iv
           );
           
           return $masterKey;
       }
       
       /**
        * Vérifie si une clé maître est configurée
        *
        * @return bool True si une clé maître est configurée
        */
       public function hasMasterKey()
       {
           global $conf;
           
           return !empty($conf->global->ELASKA_ENCRYPTION_MASTER_KEY_ENC) &&
                  !empty($conf->global->ELASKA_ENCRYPTION_MASTER_KEY_IV) &&
                  !empty($conf->global->ELASKA_ENCRYPTION_MASTER_KEY_SALT);
       }
       
       /**
        * Génère une clé unique de chiffrement pour un coffre-fort client spécifique
        *
        * @return string Clé générée (en base64)
        */
       public function generateVaultKey()
       {
           // Générer une clé aléatoire forte de 256 bits
           $randomBytes = openssl_random_pseudo_bytes(32);
           return base64_encode($randomBytes);
       }
   }
   ```

### 7.3. Authentification

Le module implémente un système d'authentification à facteurs multiples pour sécuriser l'accès aux données sensibles.

**Spécifications techniques:**

1. **Système d'authentification du portail client:**
   ```php
   /**
    * Service d'authentification du portail client
    */
   class ElaskaPortalAuthService
   {
       private $db;
       private $jwtKey;
       
       /**
        * Constructor
        */
       public function __construct($db)
       {
           global $conf;
           
           $this->db = $db;
           
           // Clé pour signer les tokens JWT
           // Dans un environnement de production, cette clé doit être stockée de façon sécurisée
           $this->jwtKey = $conf->global->ELASKA_JWT_SECRET_KEY;
           
           if (empty($this->jwtKey)) {
               // Générer une clé par défaut - mais cela devrait être configuré explicitement
               require_once DOL_DOCUMENT_ROOT . '/custom/elaska/class/utils/elaskakeymanager.class.php';
               $keyManager = new ElaskaKeyManager($db);
               $this->jwtKey = $keyManager->generateMasterKey();
               dolibarr_set_const($db, 'ELASKA_JWT_SECRET_KEY', $this->jwtKey, 'chaine', 0, '', $conf->entity);
           }
       }
       
       /**
        * Authentifie un utilisateur du portail
        *
        * @param string $username Identifiant (email ou login)
        * @param string $password Mot de passe
        * @param bool $remember Se souvenir de la connexion
        * @return array Résultat d'authentification avec token JWT en cas de succès
        */
       public function authenticate($username, $password, $remember = false)
       {
           // Rechercher l'utilisateur dans la base
           $sql = "SELECT u.rowid, u.login, u.pass, u.pass_crypted, u.email,";
           $sql.= " s.rowid as socid, s.nom as name, s.client, s.code_client,";
           $sql.= " ec.type_client, ec.mfa_enabled, ec.login_attempts";
           $sql.= " FROM " . MAIN_DB_PREFIX . "user as u";
           $sql.= " LEFT JOIN " . MAIN_DB_PREFIX . "societe as s ON u.fk_soc = s.rowid";
           $sql.= " LEFT JOIN " . MAIN_DB_PREFIX . "elaska_client_info as ec ON s.rowid = ec.fk_soc";
           $sql.= " WHERE (u.login = '" . $this->db->escape($username) . "' OR u.email = '" . $this->db->escape($username) . "')";
           $sql.= " AND u.statut = 1"; // Utilisateur actif
           $sql.= " AND u.entity IN (0, " . getEntity('user') . ")";
           
           $resql = $this->db->query($sql);
           if (!$resql || $this->db->num_rows($resql) != 1) {
               return array(
                   'success' => false,
                   'error' => 'AUTH_FAILED',
                   'message' => 'Identifiant ou mot de passe incorrect'
               );
           }
           
           $obj = $this->db->fetch_object($resql);
           
           // Vérifier si le compte n'est pas bloqué après trop de tentatives
           if ($obj->login_attempts >= 5) {
               return array(
                   'success' => false,
                   'error' => 'ACCOUNT_LOCKED',
                   'message' => 'Compte temporairement bloqué après trop de tentatives. Veuillez réessayer plus tard ou contacter le support.'
               );
           }
           
           // Vérifier le mot de passe
           $passcryptedDb = $obj->pass_crypted;
           $passDb = $obj->pass;
           
           $isPasswordValid = false;
           
           // Pour compatibilité avec différentes méthodes de hash
           if (!empty($passcryptedDb)) {
               // Password hashed with password_hash()
               $isPasswordValid = password_verify($password, $passcryptedDb);
           } elseif (!empty($passDb)) {
               // Si un ancien hash (MD5) est utilisé
               $isPasswordValid = ($passDb == dol_hash($password));
           }
           
           if (!$isPasswordValid) {
               // Incrémenter le compteur de tentatives échouées
               $this->incrementLoginAttempts($obj->socid);
               
               return array(
                   'success' => false,
                   'error' => 'AUTH_FAILED',
                   'message' => 'Identifiant ou mot de passe incorrect'
               );
           }
           
           // Réinitialiser le compteur de tentatives
           $this->resetLoginAttempts($obj->socid);
           
           // Vérifier si l'authentification à deux facteurs est requise
           if ($obj->mfa_enabled) {
               return array(
                   'success' => true,
                   'require_2fa' => true,
                   'user_id' => $obj->rowid,
                   'temp_token' => $this->generateTemporaryToken($obj->rowid)
               );
           }
           
           // Authentification réussie, générer un token JWT
           $token = $this->generateJwtToken($obj, $remember);
           
           // Journaliser la connexion
           $this->logSuccessfulLogin($obj->rowid, $obj->socid);
           
           return array(
               'success' => true,
               'token' => $token,
               'user' => array(
                   'id' => $obj->rowid,
                   'login' => $obj->login,
                   'email' => $obj->email,
                   'name' => $obj->name,
                   'socid' => $obj->socid,
                   'client_type' => $obj->type_client
               )
           );
       }
       
       /**
        * Vérifie un code d'authentification à deux facteurs
        *
        * @param string $tempToken Token temporaire
        * @param string $code Code 2FA
        * @param bool $remember Se souvenir de la connexion
        * @return array Résultat de vérification
        */
       public function verify2FACode($tempToken, $code, $remember = false)
       {
           // Décoder le token temporaire
           try {
               require_once DOL_DOCUMENT_ROOT . '/custom/elaska/lib/php-jwt/src/JWT.php';
               $decoded = \Firebase\JWT\JWT::decode($tempToken, $this->jwtKey, array('HS256'));
               
               if (!isset($decoded->user_id) || $decoded->type != 'temp') {
                   throw new Exception('Token invalide');
               }
               
               $userId = $decoded->user_id;
               
               // Vérifier que le token n'est pas expiré
               if ($decoded->exp < time()) {
                   return array(
                       'success' => false,
                       'error' => 'TOKEN_EXPIRED',
                       'message' => 'Le temps de saisie du code a expiré. Veuillez vous reconnecter.'
                   );
               }
           } catch (Exception $e) {
               return array(
                   'success' => false,
                   'error' => 'INVALID_TOKEN',
                   'message' => 'Session expirée. Veuillez vous reconnecter.'
               );
           }
           
           // Récupérer l'utilisateur
           $sql = "SELECT u.rowid, u.login, u.email,";
           $sql.= " s.rowid as socid, s.nom as name,";
           $sql.= " ec.type_client, ec.mfa_secret";
           $sql.= " FROM " . MAIN_DB_PREFIX . "user as u";
           $sql.= " LEFT JOIN " . MAIN_DB_PREFIX . "societe as s ON u.fk_soc = s.rowid";
           $sql.= " LEFT JOIN " . MAIN_DB_PREFIX . "elaska_client_info as ec ON s.rowid = ec.fk_soc";
           $sql.= " WHERE u.rowid = " . (int) $userId;
           
           $resql = $this->db->query($sql);
           if (!$resql || $this->db->num_rows($resql) != 1) {
               return array(
                   'success' => false,
                   'error' => 'USER_NOT_FOUND',
                   'message' => 'Utilisateur introuvable'
               );
           }
           
           $obj = $this->db->fetch_object($resql);
           
           // Vérifier le code 2FA
           require_once DOL_DOCUMENT_ROOT . '/custom/elaska/lib/2fa/GoogleAuthenticator.php';
           $ga = new \PHPGangsta_GoogleAuthenticator();
           
           $checkResult = $ga->verifyCode($obj->mfa_secret, $code, 2);  // 2 = tolérance de 2*30sec
           
           if (!$checkResult) {
               return array(
                   'success' => false,
                   'error' => 'INVALID_2FA',
                   'message' => 'Code d\'authentification incorrect'
               );
           }
           
           // Code valide, générer le token JWT complet
           $token = $this->generateJwtToken($obj, $remember);
           
           // Journaliser la connexion
           $this->logSuccessfulLogin($userId, $obj->socid, true);
           
           return array(
               'success' => true,
               'token' => $token,
               'user' => array(
                   'id' => $obj->rowid,
                   'login' => $obj->login,
                   'email' => $obj->email,
                   'name' => $obj->name,
                   'socid' => $obj->socid,
                   'client_type' => $obj->type_client
               )
           );
       }
       
       /**
        * Vérifie un token JWT
        *
        * @param string $token Token JWT à vérifier
        * @return object|bool Payload du token si valide, false sinon
        */
       public function verifyToken($token)
       {
           try {
               require_once DOL_DOCUMENT_ROOT . '/custom/elaska/lib/php-jwt/src/JWT.php';
               $decoded = \Firebase\JWT\JWT::decode($token, $this->jwtKey, array('HS256'));
               
               if (!isset($decoded->user_id) || $decoded->type != 'auth') {
                   return false;
               }
               
               return $decoded;
           } catch (Exception $e) {
               return false;
           }
       }
       
       /**
        * Génère un token JWT pour l'authentification
        *
        * @param object $user Utilisateur
        * @param bool $longLived Token de longue durée (remember me)
        * @return string Token JWT
        */
       private function generateJwtToken($user, $longLived = false)
       {
           require_once DOL_DOCUMENT_ROOT . '/custom/elaska/lib/php-jwt/src/JWT.php';
           
           $issuedAt = time();
           $expirationTime = $issuedAt + ($longLived ? 30 * 24 * 60 * 60 : 4 * 60 * 60); // 30 jours ou 4 heures
           
           $payload = array(
               'iat' => $issuedAt,
               'exp' => $expirationTime,
               'type' => 'auth',
               'user_id' => $user->rowid,
               'socid' => $user->socid,
               'client_type' => $user->type_client
           );
           
           return \Firebase\JWT\JWT::encode($payload, $this->jwtKey);
       }
       
       /**
        * Génère un token temporaire pour l'authentification à deux facteurs
        *
        * @param int $userId ID de l'utilisateur
        * @return string Token temporaire
        */
       private function generateTemporaryToken($userId)
       {
           require_once DOL_DOCUMENT_ROOT . '/custom/elaska/lib/php-jwt/src/JWT.php';
           
           $issuedAt = time();
           $expirationTime = $issuedAt + 300; // 5 minutes
           
           $payload = array(
               'iat' => $issuedAt,
               'exp' => $expirationTime,
               'type' => 'temp',
               'user_id' => $userId
           );
           
           return \Firebase\JWT\JWT::encode($payload, $this->jwtKey);
       }
       
       /**
        * Incrémente le compteur de tentatives de connexion échouées
        *
        * @param int $socId ID du client
        */
       private function incrementLoginAttempts($socId)
       {
           if (empty($socId)) return;
           
           $sql = "UPDATE " . MAIN_DB_PREFIX . "elaska_client_info";
           $sql.= " SET login_attempts = login_attempts + 1,";
           $sql.= " login_last_attempt = '" . $this->db->idate(dol_now()) . "'";
           $sql.= " WHERE fk_soc = " . (int) $socId;
           
           $this->db->query($sql);
       }
       
       /**
        * Réinitialise le compteur de tentatives de connexion échouées
        *
        * @param int $socId ID du client
        */
       private function resetLoginAttempts($socId)
       {
           if (empty($socId)) return;
           
           $sql = "UPDATE " . MAIN_DB_PREFIX . "elaska_client_info";
           $sql.= " SET login_attempts = 0";
           $sql.= " WHERE fk_soc = " . (int) $socId;
           
           $this->db->query($sql);
       }
       
       /**
        * Journalise une connexion réussie
        *
        * @param int $userId ID de l'utilisateur
        * @param int $socId ID du client
        * @param bool $with2FA Avec authentification à deux facteurs
        */
       private function logSuccessfulLogin($userId, $socId, $with2FA = false)
       {
           $sql = "INSERT INTO " . MAIN_DB_PREFIX . "elaska_login_history";
           $sql.= " (fk_user, fk_soc, login_date, ip_address, user_agent, mfa_used)";
           $sql.= " VALUES (";
           $sql.= (int) $userId . ",";
           $sql.= (int) $socId . ",";
           $sql.= "'" . $this->db->idate(dol_now()) . "',";
           $sql.= "'" . $this->db->escape($_SERVER['REMOTE_ADDR']) . "',";
           $sql.= "'" . $this->db->escape($_SERVER['HTTP_USER_AGENT']) . "',";
           $sql.= ($with2FA ? 1 : 0);
           $sql.= ")";
           
           $this->db->query($sql);
           
           // Mettre à jour la date de dernière connexion
           $sql = "UPDATE " . MAIN_DB_PREFIX . "elaska_client_info";
           $sql.= " SET last_login_date = '" . $this->db->idate(dol_now()) . "'";
           $sql.= " WHERE fk_soc = " . (int) $socId;
           
           $this->db->query($sql);
       }
   }
   ```

2. **Configuration de la 2FA:**
   ```php
   /**
    * Configuration de l'authentification à deux facteurs
    */
   class ElaskaTwoFactorAuth
   {
       private $db;
       
       /**
        * Constructor
        */
       public function __construct($db)
       {
           $this->db = $db;
       }
       
       /**
        * Génère une nouvelle configuration 2FA pour un client
        *
        * @param int $socId ID du client
        * @return array Configuration 2FA
        */
       public function generate2FAConfig($socId)
       {
           require_once DOL_DOCUMENT_ROOT . '/custom/elaska/lib/2fa/GoogleAuthenticator.php';
           $ga = new \PHPGangsta_GoogleAuthenticator();
           
           // Récupérer les infos du client
           $sql = "SELECT s.nom, s.code_client FROM " . MAIN_DB_PREFIX . "societe as s WHERE s.rowid = " . (int) $socId;
           $resql = $this->db->query($sql);
           
           if ($resql && $this->db->num_rows($resql) === 1) {
               $obj = $this->db->fetch_object($resql);
               
               // Générer un secret unique
               $secret = $ga->createSecret();
               
               // Créer un nom d'account pour l'app d'authentification
               $accountName = $obj->code_client ? $obj->code_client : 'Client' . $socId;
               $issuer = 'eLaska';
               
               // Générer le QR code
               $qrCodeUrl = $ga->getQRCodeGoogleUrl($issuer . ':' . $accountName, $secret, $issuer);
               
               // Stocker provisoirement le secret (sera activé après vérification)
               $this->storeProvisionalSecret($socId, $secret);
               
               return array(
                   'secret' => $secret,
                   'qr_code_url' => $qrCodeUrl,
                   'manual_entry_key' => $secret
               );
           }
           
           return false;
       }
       
       /**
        * Stocke un secret 2FA provisoire
        *
        * @param int $socId ID du client
        * @param string $secret Secret 2FA
        * @return bool Succès
        */
       private function storeProvisionalSecret($socId, $secret)
       {
           $sql = "UPDATE " . MAIN_DB_PREFIX . "elaska_client_info";
           $sql.= " SET mfa_temp_secret = '" . $this->db->escape($secret) . "',";
           $sql.= " mfa_temp_date = '" . $this->db->idate(dol_now()) . "'";
           $sql.= " WHERE fk_soc = " . (int) $socId;
           
           return $this->db->query($sql) !== false;
       }
       
       /**
        * Vérifie un code 2FA avec le secret temporaire
        *
        * @param int $socId ID du client
        * @param string $code Code fourni par l'utilisateur
        * @return bool Validation réussie
        */
       public function verifyAndEnableMFA($socId, $code)
       {
           // Récupérer le secret temporaire
           $sql = "SELECT mfa_temp_secret, mfa_temp_date FROM " . MAIN_DB_PREFIX . "elaska_client_info";
           $sql.= " WHERE fk_soc = " . (int) $socId;
           
           $resql = $this->db->query($sql);
           if (!$resql || $this->db->num_rows($resql) === 0) {
               return false;
           }
           
           $obj = $this->db->fetch_object($resql);
           
           // Vérifier que le secret temporaire n'est pas expiré (max 15 minutes)
           $tempDate = $this->db->jdate($obj->mfa_temp_date);
           if (empty($tempDate) || (dol_now() - $tempDate) > 900) {
               return false;
           }
           
           // Vérifier le code
           require_once DOL_DOCUMENT_ROOT . '/custom/elaska/lib/2fa/GoogleAuthenticator.php';
           $ga = new \PHPGangsta_GoogleAuthenticator();
           
           $checkResult = $ga->verifyCode($obj->mfa_temp_secret, $code, 2);  // 2 = tolérance de 2*30sec
           
           if ($checkResult) {
               // Code valide, activer définitivement la 2FA
               $this->enableMFA($socId, $obj->mfa_temp_secret);
               return true;
           }
           
           return false;
       }
       
       /**
        * Active la 2FA pour un client
        *
        * @param int $socId ID du client
        * @param string $secret Secret 2FA validé
        * @return bool Succès
        */
       private function enableMFA($socId, $secret)
       {
           $sql = "UPDATE " . MAIN_DB_PREFIX . "elaska_client_info";
           $sql.= " SET mfa_enabled = 1,";
           $sql.= " mfa_secret = '" . $this->db->escape($secret) . "',";
           $sql.= " mfa_enabled_date = '" . $this->db->idate(dol_now()) . "',";
           $sql.= " mfa_temp_secret = NULL,";
           $sql.= " mfa_temp_date = NULL";
           $sql.= " WHERE fk_soc = " . (int) $socId;
           
           return $this->db->query($sql) !== false;
       }
       
       /**
        * Désactive la 2FA pour un client
        *
        * @param int $socId ID du client
        * @return bool Succès
        */
       public function disableMFA($socId)
       {
           $sql = "UPDATE " . MAIN_DB_PREFIX . "elaska_client_info";
           $sql.= " SET mfa_enabled = 0,";
           $sql.= " mfa_disabled_date = '" . $this->db->idate(dol_now()) . "'";
           $sql.= " WHERE fk_soc = " . (int) $socId;
           
           return $this->db->query($sql) !== false;
       }
       
       /**
        * Vérifie si la 2FA est activée pour un client
        *
        * @param int $socId ID du client
        * @return bool 2FA activée
        */
       public function isMFAEnabled($socId)
       {
           $sql = "SELECT mfa_enabled FROM " . MAIN_DB_PREFIX . "elaska_client_info";
           $sql.= " WHERE fk_soc = " . (int) $socId;
           
           $resql = $this->db->query($sql);
           if ($resql && $this->db->num_rows($resql) === 1) {
               $obj = $this->db->fetch_object($resql);
               return (bool) $obj->mfa_enabled;
           }
           
           return false;
       }
   }
   ```

3. **Gestion de l'authentification pour le portail React:**
   ```jsx
   // src/context/AuthContext.jsx
   import { createContext, useContext, useState, useEffect, useCallback } from 'react';
   import { login, verify2FA, logout, checkAuth } from '@services/auth';
   import { useToast } from '@hooks/useToast';
   
   const AuthContext = createContext(null);
   
   export const AuthProvider = ({ children }) => {
     const [user, setUser] = useState(null);
     const [loading, setLoading] = useState(true);
     const [error, setError] = useState(null);
     const [require2FA, setRequire2FA] = useState(false);
     const [tempToken, setTempToken] = useState(null);
     const toast = useToast();
     
     // Vérifier l'authentification au chargement
     useEffect(() => {
       const verifyAuth = async () => {
         try {
           setLoading(true);
           const userData = await checkAuth();
           setUser(userData);
         } catch (err) {
```jsx
           console.error('Auth verification failed:', err);
           setUser(null);
         } finally {
           setLoading(false);
         }
       };
       
       verifyAuth();
     }, []);
     
     // Fonction de connexion
     const handleLogin = async (username, password, remember) => {
       try {
         setLoading(true);
         setError(null);
         
         const result = await login(username, password, remember);
         
         if (result.success) {
           if (result.require_2fa) {
             // Authentification à deux facteurs requise
             setRequire2FA(true);
             setTempToken(result.temp_token);
             return { require2FA: true };
           } else {
             // Authentification réussie
             setUser(result.user);
             setRequire2FA(false);
             setTempToken(null);
             toast.success('Connexion réussie');
           }
         } else {
           setError(result.message || 'Échec de connexion');
           toast.error(result.message || 'Échec de connexion');
         }
         
         return result;
       } catch (err) {
         console.error('Login error:', err);
         const message = err.response?.data?.message || 'Erreur de connexion';
         setError(message);
         toast.error(message);
         return { success: false, message };
       } finally {
         setLoading(false);
       }
     };
     
     // Fonction de vérification du code 2FA
     const handle2FAVerification = async (code, remember) => {
       if (!tempToken) {
         setError('Session expirée. Veuillez vous reconnecter.');
         return { success: false };
       }
       
       try {
         setLoading(true);
         setError(null);
         
         const result = await verify2FA(tempToken, code, remember);
         
         if (result.success) {
           setUser(result.user);
           setRequire2FA(false);
           setTempToken(null);
           toast.success('Authentification réussie');
         } else {
           setError(result.message || 'Code invalide');
           toast.error(result.message || 'Code invalide');
         }
         
         return result;
       } catch (err) {
         console.error('2FA verification error:', err);
         const message = err.response?.data?.message || 'Erreur de vérification';
         setError(message);
         toast.error(message);
         return { success: false, message };
       } finally {
         setLoading(false);
       }
     };
     
     // Fonction de déconnexion
     const handleLogout = useCallback(async () => {
       try {
         await logout();
       } catch (error) {
         console.error('Logout error:', error);
       } finally {
         setUser(null);
         setRequire2FA(false);
         setTempToken(null);
         // Rediriger vers la page de connexion
         window.location.href = '/portail/login';
       }
     }, []);
     
     // Valeur du contexte
     const value = {
       user,
       isAuthenticated: !!user,
       loading,
       error,
       require2FA,
       login: handleLogin,
       verify2FA: handle2FAVerification,
       logout: handleLogout
     };
     
     return (
       <AuthContext.Provider value={value}>
         {children}
       </AuthContext.Provider>
     );
   };
   
   // Hook pour utiliser le contexte d'authentification
   export const useAuth = () => {
     const context = useContext(AuthContext);
     if (!context) {
       throw new Error('useAuth must be used within an AuthProvider');
     }
     return context;
   };
   ```

4. **Composant d'authentification à deux facteurs:**
   ```jsx
   // src/components/auth/TwoFactorVerification.jsx
   import { useState, useRef, useEffect } from 'react';
   import { useAuth } from '@context/AuthContext';
   
   const TwoFactorVerification = ({ onSuccess, rememberMe = false }) => {
     const [code, setCode] = useState(['', '', '', '', '', '']);
     const [error, setError] = useState('');
     const [loading, setLoading] = useState(false);
     const inputRefs = Array(6).fill(0).map(() => useRef(null));
     const { verify2FA } = useAuth();
     
     useEffect(() => {
       // Focus sur le premier champ au chargement
       if (inputRefs[0]?.current) {
         inputRefs[0].current.focus();
       }
     }, []);
     
     const handleChange = (index, value) => {
       // Accepter uniquement les chiffres
       if (value !== '' && !/^\d+$/.test(value)) {
         return;
       }
       
       const newCode = [...code];
       newCode[index] = value;
       setCode(newCode);
       
       // Avancer automatiquement au champ suivant
       if (value !== '' && index < 5) {
         inputRefs[index + 1].current.focus();
       }
       
       // Si tous les chiffres sont saisis, soumettre automatiquement
       if (newCode.every(digit => digit !== '') && index === 5) {
         handleSubmit(newCode);
       }
     };
     
     const handleKeyDown = (index, e) => {
       // Gérer la touche Backspace
       if (e.key === 'Backspace') {
         if (index > 0 && code[index] === '') {
           // Si le champ actuel est vide, focus sur le précédent
           inputRefs[index - 1].current.focus();
         } else if (code[index] !== '') {
           // Sinon, effacer le champ actuel
           const newCode = [...code];
           newCode[index] = '';
           setCode(newCode);
         }
       } else if (e.key === 'ArrowLeft' && index > 0) {
         // Flèche gauche: focus sur le champ précédent
         inputRefs[index - 1].current.focus();
       } else if (e.key === 'ArrowRight' && index < 5) {
         // Flèche droite: focus sur le champ suivant
         inputRefs[index + 1].current.focus();
       }
     };
     
     const handlePaste = (e) => {
       e.preventDefault();
       const pastedData = e.clipboardData.getData('text');
       
       // Si les données collées sont 6 chiffres
       if (/^\d{6}$/.test(pastedData)) {
         const newCode = pastedData.split('');
         setCode(newCode);
         
         // Focus sur le dernier champ
         inputRefs[5].current.focus();
         
         // Soumettre automatiquement
         handleSubmit(newCode);
       }
     };
     
     const handleSubmit = async (submittedCode = code) => {
       const fullCode = submittedCode.join('');
       
       if (fullCode.length !== 6) {
         setError('Veuillez saisir les 6 chiffres du code');
         return;
       }
       
       setError('');
       setLoading(true);
       
       try {
         const result = await verify2FA(fullCode, rememberMe);
         
         if (result.success) {
           if (onSuccess) onSuccess();
         } else {
           setError(result.message || 'Code invalide. Veuillez réessayer.');
           // Réinitialiser le code
           setCode(['', '', '', '', '', '']);
           // Focus sur le premier champ
           if (inputRefs[0]?.current) {
             inputRefs[0].current.focus();
           }
         }
       } catch (err) {
         console.error('2FA error:', err);
         setError('Une erreur s\'est produite. Veuillez réessayer.');
       } finally {
         setLoading(false);
       }
     };
     
     return (
       <div className="two-factor-auth">
         <h2>Vérification en deux étapes</h2>
         
         <p className="instruction">
           Pour renforcer la sécurité de votre compte, veuillez saisir le code à 6 chiffres 
           généré par votre application d'authentification.
         </p>
         
         <div className="code-inputs">
           {code.map((digit, index) => (
             <input
               key={index}
               ref={inputRefs[index]}
               type="text"
               inputMode="numeric"
               maxLength={1}
               value={digit}
               onChange={(e) => handleChange(index, e.target.value)}
               onKeyDown={(e) => handleKeyDown(index, e)}
               onPaste={index === 0 ? handlePaste : undefined}
               disabled={loading}
               autoComplete="one-time-code"
             />
           ))}
         </div>
         
         {error && (
           <div className="error-message">
             <i className="fas fa-exclamation-triangle"></i> {error}
           </div>
         )}
         
         <button
           className="submit-button"
           onClick={() => handleSubmit()}
           disabled={loading || code.some(digit => digit === '')}
         >
           {loading ? (
             <>
               <i className="fas fa-spinner fa-spin"></i> Vérification...
             </>
           ) : (
             'Vérifier'
           )}
         </button>
         
         <div className="help-text">
           <p>
             <i className="fas fa-info-circle"></i> Si vous avez perdu accès à votre application d'authentification, 
             veuillez contacter le support.
           </p>
         </div>
       </div>
     );
   };
   
   export default TwoFactorVerification;
   ```

### 7.4. Audit et traçabilité

Le module implémente un système d'audit avancé pour assurer la traçabilité complète des actions sensibles.

**Spécifications techniques:**

1. **Système d'audit central:**
   ```php
   /**
    * Service d'audit centralisé
    */
   class ElaskaAuditService
   {
       private $db;
       
       /**
        * Constructor
        */
       public function __construct($db)
       {
           $this->db = $db;
       }
       
       /**
        * Ajoute une entrée d'audit
        *
        * @param string $type Type d'action (auth, data_access, data_modification, etc.)
        * @param string $action Action spécifique
        * @param int $userId ID utilisateur qui a effectué l'action
        * @param string $details Détails JSON de l'action
        * @param string $entityType Type d'entité concernée
        * @param int $entityId ID de l'entité concernée
        * @param int $severity Niveau de gravité (1=INFO, 2=NOTICE, 3=WARNING, 4=ERROR, 5=CRITICAL)
        * @return int ID de l'entrée d'audit ou -1 si erreur
        */
       public function log($type, $action, $userId, $details = null, $entityType = null, $entityId = null, $severity = 1)
       {
           // Récupérer l'adresse IP et l'user agent
           $ip = $_SERVER['REMOTE_ADDR'];
           $userAgent = isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : '';
           
           // Contexte de session
           $sessionId = session_id();
           
           // Détails au format JSON
           $detailsJson = $details;
           if (is_array($details)) {
               $detailsJson = json_encode($details);
           }
           
           $sql = "INSERT INTO " . MAIN_DB_PREFIX . "elaska_audit_log";
           $sql.= " (audit_type, audit_action, fk_user, audit_date, ip_address,";
           $sql.= " user_agent, session_id, details, entity_type, entity_id, severity)";
           $sql.= " VALUES (";
           $sql.= "'" . $this->db->escape($type) . "',";
           $sql.= "'" . $this->db->escape($action) . "',";
           $sql.= ($userId > 0 ? $this->db->escape($userId) : "null") . ",";
           $sql.= "'" . $this->db->idate(dol_now()) . "',";
           $sql.= "'" . $this->db->escape($ip) . "',";
           $sql.= "'" . $this->db->escape($userAgent) . "',";
           $sql.= "'" . $this->db->escape($sessionId) . "',";
           $sql.= ($detailsJson ? "'" . $this->db->escape($detailsJson) . "'" : "null") . ",";
           $sql.= ($entityType ? "'" . $this->db->escape($entityType) . "'" : "null") . ",";
           $sql.= ($entityId > 0 ? $this->db->escape($entityId) : "null") . ",";
           $sql.= (int) $severity;
           $sql.= ")";
           
           dol_syslog(get_class($this) . "::log", LOG_DEBUG);
           $resql = $this->db->query($sql);
           
           if ($resql) {
               return $this->db->last_insert_id(MAIN_DB_PREFIX . "elaska_audit_log");
           }
           
           return -1;
       }
       
       /**
        * Ajoute une entrée d'audit pour l'authentification
        *
        * @param string $action Action spécifique (login_success, login_failure, logout, etc.)
        * @param int $userId ID utilisateur concerné
        * @param array $details Détails supplémentaires
        * @return int ID de l'entrée d'audit
        */
       public function logAuth($action, $userId, $details = array())
       {
           return $this->log('auth', $action, $userId, $details);
       }
       
       /**
        * Ajoute une entrée d'audit pour un accès à des données sensibles
        *
        * @param string $action Action spécifique (view, download, etc.)
        * @param int $userId ID utilisateur qui a effectué l'action
        * @param string $entityType Type d'entité consultée
        * @param int $entityId ID de l'entité consultée
        * @param array $details Détails supplémentaires
        * @return int ID de l'entrée d'audit
        */
       public function logDataAccess($action, $userId, $entityType, $entityId, $details = array())
       {
           // Ajouter automatiquement l'horodatage précis
           $details['timestamp_precise'] = microtime(true);
           
           return $this->log('data_access', $action, $userId, $details, $entityType, $entityId);
       }
       
       /**
        * Ajoute une entrée d'audit pour une modification de données sensibles
        *
        * @param string $action Action spécifique (create, update, delete, etc.)
        * @param int $userId ID utilisateur qui a effectué l'action
        * @param string $entityType Type d'entité modifiée
        * @param int $entityId ID de l'entité modifiée
        * @param array $details Détails des modifications
        * @param int $severity Niveau de gravité
        * @return int ID de l'entrée d'audit
        */
       public function logDataModification($action, $userId, $entityType, $entityId, $details = array(), $severity = 2)
       {
           // Ajouter un horodatage précis et des données contextuelles
           $details['timestamp_precise'] = microtime(true);
           
           return $this->log('data_modification', $action, $userId, $details, $entityType, $entityId, $severity);
       }
       
       /**
        * Ajoute une entrée d'audit pour une action administrative
        *
        * @param string $action Action spécifique
        * @param int $userId ID utilisateur admin
        * @param array $details Détails de l'action
        * @param int $severity Niveau de gravité
        * @return int ID de l'entrée d'audit
        */
       public function logAdminAction($action, $userId, $details = array(), $severity = 3)
       {
           return $this->log('admin', $action, $userId, $details, null, null, $severity);
       }
       
       /**
        * Ajoute une entrée d'audit pour une alerte de sécurité
        *
        * @param string $action Type d'alerte
        * @param int $userId ID utilisateur concerné (0 si non authentifié)
        * @param array $details Détails de l'alerte
        * @param int $severity Niveau de gravité (1-5)
        * @return int ID de l'entrée d'audit
        */
       public function logSecurityAlert($action, $userId, $details = array(), $severity = 4)
       {
           return $this->log('security_alert', $action, $userId, $details, null, null, $severity);
       }
       
       /**
        * Recherche dans les logs d'audit
        *
        * @param array $filters Critères de recherche
        * @param int $limit Limite de résultats
        * @param int $offset Offset pour pagination
        * @return array Résultats de la recherche
        */
       public function search($filters = array(), $limit = 0, $offset = 0)
       {
           $results = array();
           
           $sql = "SELECT a.*, u.login, u.firstname, u.lastname";
           $sql.= " FROM " . MAIN_DB_PREFIX . "elaska_audit_log as a";
           $sql.= " LEFT JOIN " . MAIN_DB_PREFIX . "user as u ON a.fk_user = u.rowid";
           
           $whereClauses = array();
           
           // Filtrer par type
           if (!empty($filters['type'])) {
               $whereClauses[] = "a.audit_type = '" . $this->db->escape($filters['type']) . "'";
           }
           
           // Filtrer par action
           if (!empty($filters['action'])) {
               $whereClauses[] = "a.audit_action = '" . $this->db->escape($filters['action']) . "'";
           }
           
           // Filtrer par utilisateur
           if (!empty($filters['user_id'])) {
               $whereClauses[] = "a.fk_user = " . (int) $filters['user_id'];
           }
           
           // Filtrer par date
           if (!empty($filters['date_from'])) {
               $whereClauses[] = "a.audit_date >= '" . $this->db->idate($filters['date_from']) . "'";
           }
           
           if (!empty($filters['date_to'])) {
               $whereClauses[] = "a.audit_date <= '" . $this->db->idate($filters['date_to']) . "'";
           }
           
           // Filtrer par IP
           if (!empty($filters['ip'])) {
               $whereClauses[] = "a.ip_address LIKE '%" . $this->db->escape($filters['ip']) . "%'";
           }
           
           // Filtrer par entité
           if (!empty($filters['entity_type'])) {
               $whereClauses[] = "a.entity_type = '" . $this->db->escape($filters['entity_type']) . "'";
           }
           
           if (!empty($filters['entity_id'])) {
               $whereClauses[] = "a.entity_id = " . (int) $filters['entity_id'];
           }
           
           // Filtrer par sévérité
           if (!empty($filters['severity_min'])) {
               $whereClauses[] = "a.severity >= " . (int) $filters['severity_min'];
           }
           
           if (!empty($filters['severity_max'])) {
               $whereClauses[] = "a.severity <= " . (int) $filters['severity_max'];
           }
           
           // Recherche textuelle dans les détails
           if (!empty($filters['search_text'])) {
               $whereClauses[] = "(a.details LIKE '%" . $this->db->escape($filters['search_text']) . "%')";
           }
           
           // Construire la clause WHERE
           if (!empty($whereClauses)) {
               $sql.= " WHERE " . implode(" AND ", $whereClauses);
           }
           
           // Tri
           $sql.= " ORDER BY a.audit_date DESC";
           
           // Limiter les résultats
           if ($limit > 0) {
               $sql.= $this->db->plimit($limit, $offset);
           }
           
           dol_syslog(get_class($this) . "::search", LOG_DEBUG);
           $resql = $this->db->query($sql);
           
           if ($resql) {
               $num = $this->db->num_rows($resql);
               $i = 0;
               
               while ($i < $num) {
                   $obj = $this->db->fetch_object($resql);
                   
                   $entry = array(
                       'id' => $obj->rowid,
                       'type' => $obj->audit_type,
                       'action' => $obj->audit_action,
                       'user_id' => $obj->fk_user,
                       'user_login' => $obj->login,
                       'user_name' => trim($obj->firstname . ' ' . $obj->lastname),
                       'date' => $this->db->jdate($obj->audit_date),
                       'ip_address' => $obj->ip_address,
                       'user_agent' => $obj->user_agent,
                       'session_id' => $obj->session_id,
                       'details' => json_decode($obj->details, true),
                       'entity_type' => $obj->entity_type,
                       'entity_id' => $obj->entity_id,
                       'severity' => $obj->severity
                   );
                   
                   $results[] = $entry;
                   $i++;
               }
           }
           
           return $results;
       }
   }
   ```

2. **Exemple d'intégration de l'audit dans le processus métier:**
   ```php
   /**
    * Exemple d'intégration dans la classe de dossier eLaska pour l'audit
    */
   class ElaskaDossier extends CommonObject
   {
       // [...] Propriétés et méthodes existantes
       
       /**
        * Update object into database
        *
        * @param User $user User that modifies
        * @param bool $notrigger false=launch triggers after, true=disable triggers
        * @param bool $audit Whether to audit the modification
        * @return int <0 if KO, >0 if OK
        */
       public function update(User $user, $notrigger = false, $audit = true)
       {
           global $conf;
           
           $error = 0;
           $this->db->begin();
           
           // Sauvegarder l'état précédent pour l'audit si activé
           $oldValues = array();
           if ($audit) {
               $oldDossier = new ElaskaDossier($this->db);
               $oldDossier->fetch($this->id);
               $oldValues = $this->extractSignificantValues($oldDossier);
           }
           
           // Code de mise à jour existant
           // [...]
           
           // Résultat de la requête SQL de mise à jour
           if ($resql) {
               if (!$notrigger) {
                   // Appel des triggers existants
                   // [...]
               }
               
               // Audit de la modification si succès et audit demandé
               if ($audit && !$error) {
                   $newValues = $this->extractSignificantValues($this);
                   $changes = $this->getChanges($oldValues, $newValues);
                   
                   if (!empty($changes)) {
                       require_once DOL_DOCUMENT_ROOT . '/custom/elaska/class/utils/elaskaauditservice.class.php';
                       $auditService = new ElaskaAuditService($this->db);
                       
                       $auditDetails = array(
                           'changes' => $changes,
                           'ref' => $this->ref_elaska
                       );
                       
                       $auditService->logDataModification(
                           'update',
                           $user->id,
                           'dossier',
                           $this->id,
                           $auditDetails
                       );
                   }
               }
               
               if (!$error) {
                   $this->db->commit();
                   return 1;
               } else {
                   $this->db->rollback();
                   return -1;
               }
           } else {
               $this->error = $this->db->lasterror();
               $this->db->rollback();
               return -1;
           }
       }
       
       /**
        * Extrait les valeurs significatives pour l'audit
        *
        * @param ElaskaDossier $dossier Dossier
        * @return array Valeurs significatives
        */
       private function extractSignificantValues($dossier)
       {
           return array(
               'ref' => $dossier->ref_elaska,
               'libelle' => $dossier->libelle,
               'statut' => $dossier->statut,
               'priorite' => $dossier->priorite,
               'fk_user_responsable' => $dossier->fk_user_responsable,
               'confidentiel' => $dossier->confidentiel,
               'date_echeance' => $dossier->date_echeance
           );
       }
       
       /**
        * Calcule les changements entre deux états
        *
        * @param array $oldValues Anciennes valeurs
        * @param array $newValues Nouvelles valeurs
        * @return array Changements détectés
        */
       private function getChanges($oldValues, $newValues)
       {
           $changes = array();
           
           foreach ($newValues as $key => $value) {
               // Comparer les valeurs
               if ($oldValues[$key] != $value) {
                   $changes[$key] = array(
                       'from' => $oldValues[$key],
                       'to' => $value
                   );
               }
           }
           
           return $changes;
       }
   }
   ```

3. **Interface d'audit (backoffice):**
   ```php
   /**
    * Page de visualisation de l'audit
    */
   
   // Entêtes Dolibarr
   require '../main.inc.php';
   require_once DOL_DOCUMENT_ROOT . '/core/lib/admin.lib.php';
   require_once '../class/utils/elaskaauditservice.class.php';
   
   // Permissions
   if (!$user->admin && !$user->rights->elaska->audit->view) {
       accessforbidden();
   }
   
   // Paramètres
   $action = GETPOST('action', 'alpha');
   $page = GETPOST('page', 'int');
   $limit = GETPOST('limit', 'int') ?: $conf->liste_limit;
   $sortfield = GETPOST('sortfield', 'alpha');
   $sortorder = GETPOST('sortorder', 'alpha');
   
   if (empty($page) || $page == -1) {
       $page = 0;
   }
   $offset = $limit * $page;
   
   // Filtres
   $filters = array();
   if (GETPOST('type', 'alpha')) $filters['type'] = GETPOST('type', 'alpha');
   if (GETPOST('action_filter', 'alpha')) $filters['action'] = GETPOST('action_filter', 'alpha');
   if (GETPOST('user_id', 'int') > 0) $filters['user_id'] = GETPOST('user_id', 'int');
   if (GETPOST('date_from', 'alpha')) $filters['date_from'] = dol_stringtotime(GETPOST('date_from', 'alpha'));
   if (GETPOST('date_to', 'alpha')) $filters['date_to'] = dol_stringtotime(GETPOST('date_to', 'alpha') . ' 23:59:59');
   if (GETPOST('entity_type', 'alpha')) $filters['entity_type'] = GETPOST('entity_type', 'alpha');
   if (GETPOST('entity_id', 'int') > 0) $filters['entity_id'] = GETPOST('entity_id', 'int');
   if (GETPOST('severity_min', 'int') > 0) $filters['severity_min'] = GETPOST('severity_min', 'int');
   if (GETPOST('search_text', 'alpha')) $filters['search_text'] = GETPOST('search_text', 'alpha');
   if (GETPOST('ip', 'alpha')) $filters['ip'] = GETPOST('ip', 'alpha');
   
   // Service d'audit
   $auditService = new ElaskaAuditService($db);
   
   // Actions
   if ($action == 'export_csv') {
       // Exporter les résultats au format CSV
       // [...]
   } elseif ($action == 'export_pdf') {
       // Exporter les résultats au format PDF
       // [...]
   } elseif ($action == 'view_details') {
       // Afficher les détails d'une entrée d'audit
       $auditId = GETPOST('audit_id', 'int');
       
       // Récupérer l'entrée d'audit
       $auditEntries = $auditService->search(array('id' => $auditId), 1);
       $auditEntry = !empty($auditEntries) ? $auditEntries[0] : null;
       
       // Affichage en modal ou redirection vers page détaillée
       if ($auditEntry) {
           // [...] Code pour afficher les détails
       }
   }
   
   // Récupération des données d'audit
   $auditEntries = $auditService->search($filters, $limit, $offset);
   
   // Affichage de la page
   $title = $langs->trans("AuditLog");
   
   llxHeader('', $title);
   
   print load_fiche_titre($title, '', 'title_setup');
   
   // Formulaire de filtrage
   print '<form method="GET" action="'.$_SERVER["PHP_SELF"].'" name="formfilter" class="formfilter">';
   print '<div class="div-table-responsive">';
   print '<table class="tagtable liste">';
   
   print '<tr class="liste_titre_filter">';
   
   // Type
   print '<td>';
   print '<select name="type" class="flat">';
   print '<option value="">'.$langs->trans("All").'</option>';
   print '<option value="auth" '.(GETPOST('type') === 'auth' ? 'selected' : '').'>'.$langs->trans("Authentication").'</option>';
   print '<option value="data_access" '.(GETPOST('type') === 'data_access' ? 'selected' : '').'>'.$langs->trans("DataAccess").'</option>';
   print '<option value="data_modification" '.(GETPOST('type') === 'data_modification' ? 'selected' : '').'>'.$langs->trans("DataModification").'</option>';
   print '<option value="admin" '.(GETPOST('type') === 'admin' ? 'selected' : '').'>'.$langs->trans("AdminAction").'</option>';
   print '<option value="security_alert" '.(GETPOST('type') === 'security_alert' ? 'selected' : '').'>'.$langs->trans("SecurityAlert").'</option>';
   print '</select>';
   print '</td>';
   
   // Action
   print '<td>';
   print '<input type="text" class="flat" name="action_filter" value="'.GETPOST('action_filter').'" size="10">';
   print '</td>';
   
   // User
   print '<td>';
   print $form->select_dolusers(GETPOST('user_id'), 'user_id', 1, null, 0, '', '', 0, 0, 0, '', 0, '', 'maxwidth300');
   print '</td>';
   
   // Date
   print '<td>';
   print '<div class="nowraponall">';
   print $form->selectDate(GETPOST('date_from') ? GETPOST('date_from') : -1, 'date_from', 0, 0, 1, 'formfilter', 1, 0, 1);
   print ' ~ ';
   print $form->selectDate(GETPOST('date_to') ? GETPOST('date_to') : -1, 'date_to', 0, 0, 1, 'formfilter', 1, 0, 1);
   print '</div>';
   print '</td>';
   
   // IP
   print '<td>';
   print '<input type="text" class="flat" name="ip" value="'.GETPOST('ip').'" size="10">';
   print '</td>';
   
   // Entity type/id
   print '<td>';
   print '<input type="text" class="flat" name="entity_type" value="'.GETPOST('entity_type').'" size="10">';
   print '</td>';
   
   // Severity
   print '<td>';
   print '<select name="severity_min" class="flat">';
   print '<option value="">'.$langs->trans("All").'</option>';
   for ($i = 1; $i <= 5; $i++) {
       print '<option value="'.$i.'" '.(GETPOST('severity_min') == $i ? 'selected' : '').'>'.$langs->trans("SeverityAtLeast").' '.$i.'</option>';
   }
   print '</select>';
   print '</td>';
   
   // Search text
   print '<td>';
   print '<input type="text" class="flat" name="search_text" value="'.GETPOST('search_text').'" placeholder="'.$langs->trans("Search").'" size="10">';
   print '</td>';
   
   // Buttons
   print '<td class="right">';
   print '<input type="submit" class="button" value="'.$langs->trans("Search").'">';
   print '</td>';
   
   print '</tr>';
   
   // Headers
   print '<tr class="liste_titre">';
   print_liste_field_titre($langs->trans("ID"), $_SERVER["PHP_SELF"], "a.rowid", "", $param, '', $sortfield, $sortorder);
   print_liste_field_titre($langs->trans("Type"), $_SERVER["PHP_SELF"], "a.audit_type", "", $param, '', $sortfield, $sortorder);
   print_liste_field_titre($langs->trans("Action"), $_SERVER["PHP_SELF"], "a.audit_action", "", $param, '', $sortfield, $sortorder);
   print_liste_field_titre($langs->trans("User"), $_SERVER["PHP_SELF"], "u.login", "", $param, '', $sortfield, $sortorder);
   print_liste_field_titre($langs->trans("Date"), $_SERVER["PHP_SELF"], "a.audit_date", "", $param, '', $sortfield, $sortorder, 'center ');
   print_liste_field_titre($langs->trans("IP"), $_SERVER["PHP_SELF"], "a.ip_address", "", $param, '', $sortfield, $sortorder);
   print_liste_field_titre($langs->trans("EntityType"), $_SERVER["PHP_SELF"], "a.entity_type", "", $param, '', $sortfield, $sortorder);
   print_liste_field_titre($langs->trans("Severity"), $_SERVER["PHP_SELF"], "a.severity", "", $param, '', $sortfield, $sortorder, 'center ');
   print_liste_field_titre('', $_SERVER["PHP_SELF"], "", '', '', '', $sortfield, $sortorder, 'maxwidthsearch ');
   print '</tr>';
   
   print '</table>';
   print '</div>';
   print '</form>';
   
   // Tableau des résultats
   print '<div class="div-table-responsive">';
   print '<table class="tagtable liste">';
   
   foreach ($auditEntries as $entry) {
       print '<tr class="oddeven">';
       
       // ID
       print '<td>'.$entry['id'].'</td>';
       
       // Type
       print '<td>';
       print $langs->trans('AuditType_'.$entry['type']);
       print '</td>';
       
       // Action
       print '<td>';
       print $langs->trans('AuditAction_'.$entry['action']);
       print '</td>';
       
       // User
       print '<td>';
       if ($entry['user_id'] > 0) {
           print $entry['user_name'] ? $entry['user_name'] : $entry['user_login'];
       } else {
           print $langs->trans('Anonymous');
       }
       print '</td>';
       
       // Date
       print '<td class="center nowraponall">';
       print dol_print_date($entry['date'], 'dayhour', 'tzuser');
       print '</td>';
       
       // IP
       print '<td>'.$entry['ip_address'].'</td>';
       
       // Entity
       print '<td>';
       if ($entry['entity_type']) {
           print $entry['entity_type'];
           if ($entry['entity_id'] > 0) {
               print ' #'.$entry['entity_id'];
           }
       }
       print '</td>';
       
       // Severity
       print '<td class="center">';
       print getSeverityBadge($entry['severity']);
       print '</td>';
       
       // Actions
       print '<td class="right nowraponall">';
       print '<a href="'.$_SERVER["PHP_SELF"].'?action=view_details&audit_id='.$entry['id'].'" class="paddingrightonly">';
       print img_picto($langs->trans('Details'), 'info');
       print '</a>';
       print '</td>';
       
       print '</tr>';
   }
   
   if (empty($auditEntries)) {
       print '<tr><td colspan="9" class="opacitymedium">'.$langs->trans("NoRecords").'</td></tr>';
   }
   
   print '</table>';
   print '</div>';
   
   // Pagination
   // [...]
   
   // Boutons d'export
   print '<div class="tabsAction">';
   print '<a class="butAction" href="'.$_SERVER["PHP_SELF"].'?action=export_csv'.buildUrlParameters($filters).'">'.$langs->trans("ExportCSV").'</a>';
   print '<a class="butAction" href="'.$_SERVER["PHP_SELF"].'?action=export_pdf'.buildUrlParameters($filters).'">'.$langs->trans("ExportPDF").'</a>';
   print '</div>';
   
   // Fonction pour générer un badge de sévérité
   function getSeverityBadge($severity) {
       global $langs;
       
       $colors = array(
           1 => '#28a745', // Info - Vert
           2 => '#17a2b8', // Notice - Bleu
           3 => '#ffc107', // Warning - Jaune
           4 => '#fd7e14', // Error - Orange
           5 => '#dc3545'  // Critical - Rouge
       );
       
       $labels = array(
           1 => $langs->trans('SeverityInfo'),
           2 => $langs->trans('SeverityNotice'),
           3 => $langs->trans('SeverityWarning'),
           4 => $langs->trans('SeverityError'),
           5 => $langs->trans('SeverityCritical')
       );
       
       $color = isset($colors[$severity]) ? $colors[$severity] : '#6c757d';
       $label = isset($labels[$severity]) ? $labels[$severity] : $langs->trans('Unknown');
       
       return '<span class="badge" style="background-color: '.$color.';">'.$label.'</span>';
   }
   
   // Fonction pour construire les paramètres d'URL
   function buildUrlParameters($filters) {
       $params = '';
       
       foreach ($filters as $key => $value) {
           if (!empty($value)) {
               $params .= '&' . $key . '=' . urlencode($value);
           }
       }
       
       return $params;
   }
   
   llxFooter();
   ```

## 8. DOCUMENTATION TECHNIQUE

### 8.1. Guide d'installation

Le module eLaska-ESaiko nécessite une installation spécifique pour fonctionner correctement avec Dolibarr et les dépendances externes.

**Spécifications techniques:**

```markdown
# Guide d'Installation du Module eLaska-ESaiko

## Prérequis Système

### Configuration Minimale Requise
- Dolibarr ERP/CRM version 15.0.0 ou supérieure
- PHP 7.4 ou supérieur (PHP 8.0+ recommandé)
- Extension PHP : php-curl, php-gd, php-intl, php-zip, php-xml, php-mbstring
- MySQL 5.7 ou MariaDB 10.3 ou supérieur
- Serveur Web : Apache 2.4+ ou Nginx
- Espace disque : 500 Mo minimum pour l'installation
- Mémoire PHP : 256 Mo minimum (512 Mo recommandé)

### Droits d'accès et Permissions
- Accès en écriture aux dossiers:
  - `/custom`
  - `/documents`
  - `/conf`
- Permissions MySQL : CREATE TABLE, ALTER TABLE, CREATE INDEX, DROP

## Procédure d'Installation

### 1. Téléchargement du Module
```bash
cd /path/to/dolibarr
wget https://www.elaska-esaiko.com/downloads/module-elaska-esaiko-vX.Y.Z.zip
unzip module-elaska-esaiko-vX.Y.Z.zip -d ./htdocs/custom/
```

### 2. Installation des Dépendances
Le module utilise Composer pour gérer ses dépendances externes.

```bash
cd /path/to/dolibarr/htdocs/custom/elaska
composer install --no-dev
```

### 3. Configuration du Module
1. Connectez-vous à Dolibarr en tant qu'administrateur
2. Allez dans "Accueil" > "Configuration" > "Modules"
3. Recherchez "eLaska-ESaiko" dans la liste des modules
4. Cliquez sur "Activer"

### 4. Configuration de la Base de Données
Le module installera automatiquement les tables nécessaires lors de l'activation.
Vérifiez les logs pour vous assurer que toutes les tables ont été créées correctement.

### 5. Configuration du Portail Client
Pour installer le portail client, des étapes supplémentaires sont nécessaires:

#### 5.1. Prérequis pour le Portail
- Node.js 16.x ou supérieur
- NPM 7.x ou supérieur

#### 5.2. Installation des Dépendances du Portail
```bash
cd /path/to/dolibarr/htdocs/custom/elaska/portail
npm install
```

#### 5.3. Construction du Portail
```bash
npm run build
```

#### 5.4. Configuration du Serveur Web
Configurez votre serveur web (Apache/Nginx) pour diriger le chemin `/portail` vers le dossier build du portail client.

Exemple pour Apache (à ajouter dans votre configuration VirtualHost):
```apache
Alias /portail "/path/to/dolibarr/htdocs/custom/elaska/portail/build"
<Directory "/path/to/dolibarr/htdocs/custom/elaska/portail/build">
    Options -Indexes +FollowSymLinks
    AllowOverride All
    Require all granted
    
    # Pour le routage SPA
    RewriteEngine On
    RewriteBase /portail/
    RewriteRule ^index\.html$ - [L]
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteRule . /portail/index.html [L]
</Directory>
```

Exemple pour Nginx:
```nginx
location /portail {
    alias /path/to/dolibarr/htdocs/custom/elaska/portail/build;
    try_files $uri $uri/ /portail/index.html;
    index index.html;
}
```

### 6. Configuration de l'API
Pour que le portail client puisse communiquer avec Dolibarr, il faut configurer l'API:

#### 6.1. Activer l'API REST dans Dolibarr
1. Allez dans "Accueil" > "Configuration" > "Modules"
2. Activez le module "API REST"

#### 6.2. Générer une clé API pour le Module
1. Allez dans "Accueil" > "Configuration" > "Modules" > "eLaska-ESaiko" > "Configuration"
2. Dans l'onglet "API", cliquez sur "Générer une clé API"

### 7. Configuration du Chiffrement
Pour sécuriser les données sensibles:

1. Allez dans "Accueil" > "Configuration" > "Modules" > "eLaska-ESaiko" > "Configuration"
2. Dans l'onglet "Sécurité", suivez les instructions pour:
   - Générer une clé maître de chiffrement
   - Configurer les paramètres de sécurité du portail client

### 8. Configuration des Jobs Automatisés
Plusieurs tâches doivent être programmées pour le bon fonctionnement du module:

#### 8.1. Configuration Cron
Ajoutez les entrées suivantes à votre crontab:

```cron
# Synchronisation avec Google Calendar (toutes les 15 minutes)
*/15 * * * * php /path/to/dolibarr/htdocs/custom/elaska/cron/sync_calendar.php

# Traitement des notifications (toutes les 5 minutes)
*/5 * * * * php /path/to/dolibarr/htdocs/custom/elaska/cron/process_notifications.php

# Génération des factures d'abonnement (tous les jours à 1h du matin)
0 1 * * * php /path/to/dolibarr/htdocs/custom/elaska/cron/generate_subscription_invoices.php

# Alertes automatiques (tous les jours à 6h du matin)
0 6 * * * php /path/to/dolibarr/htdocs/custom/elaska/cron/daily_alerts.php

# Rotation des logs d'audit (une fois par semaine, le dimanche à 2h du matin)
0 2 * * 0 php /path/to/dolibarr/htdocs/custom/elaska/cron/rotate_audit_logs.php
```

## Vérification de l'Installation

### 1. Vérification du Module dans Dolibarr
- Connexion en admin
- Vérifier que le module apparaît dans "Modules activés"
- Vérifier l'absence d'erreurs dans les logs PHP et MySQL

### 2. Vérification du Portail Client
- Ouvrez `http://votre-serveur/portail` dans un navigateur
- Vous devriez voir la page de connexion du portail client
- Testez la connexion avec un compte client

### 3. Vérification de l'API
- Utilisez l'outil de test d'API depuis:
  "Accueil" > "Configuration" > "Modules" > "eLaska-ESaiko" > "Configuration" > "API" > "Tester l'API"

## Mise à jour du Module

### 1. Sauvegarde Préalable
- Exportez la base de données
- Sauvegardez le dossier `/custom/elaska`

### 2. Procédure de Mise à jour
```bash
cd /path/to/dolibarr
wget https://www.elaska-esaiko.com/downloads/module-elaska-esaiko-vX.Y.Z.zip
mv ./htdocs/custom/elaska ./htdocs/custom/elaska.bak
unzip module-elaska-esaiko-vX.Y.Z.zip -d ./htdocs/custom/
cd ./htdocs/custom/elaska
composer install --no-dev
```

### 3. Migration des Données
Après la mise à jour du module, connectez-vous à Dolibarr en tant qu'administrateur et suivez les instructions de migration si nécessaire.

## Résolution des Problèmes

### Problèmes Courants et Solutions

#### Erreur de connexion à la base de données
- Vérifiez les permissions de l'utilisateur MySQL
- Vérifiez que les tables ont été créées correctement

#### Erreur 404 sur le portail client
- Vérifiez la configuration du serveur web
- Assurez-vous que le build du portail a été effectué correctement

#### Problème de chiffrement
- Vérifiez que la clé maître est correctement configurée
- Vérifiez les extensions PHP requises

#### Problème avec l'API
- Vérifiez que le module API REST est actif
- Vérifiez la clé API générée

### Logs et Diagnostics
- Logs PHP: `/var/log/apache2/error.log` ou équivalent
- Logs Dolibarr: `htdocs/documents/dolibarr.log`
- Logs du module: `htdocs/documents/elaska/logs/`

### Support Technique
En cas de problème persistant, contactez le support technique:
- Email: support@elaska-esaiko.com
- Téléphone: +33 (0)1 23 45 67 89
- Portail client: https://support.elaska-esaiko.com
```

### 8.2. Structure de la base de données

Le module eLaska-ESaiko s'intègre à la base de données Dolibarr mais ajoute ses propres tables spécifiques.

**Spécifications techniques:**

```
# Structure de la Base de Données du Module eLaska-ESaiko

## Préfixes des Tables
- Toutes les tables du module utilisent le préfixe standard de Dolibarr (`llx_`) suivi du préfixe spécifique au module (`elaska_`)

## Diagramme Relationnel

```mermaid
erDiagram
    llx_societe ||--o{ llx_elaska_client_info : "est détaillé par"
    llx_elaska_client_info ||--o{ llx_elaska_objectif_vie : "possède"
    llx_elaska_client_info ||--o{ llx_elaska_contact : "possède"
    llx_elaska_dossier }|--|| llx_societe : "appartient à"
    llx_elaska_dossier ||--o{ llx_elaska_timeline : "possède"
    llx_elaska_timeline ||--o{ llx_elaska_timeline_etape : "composée de"
    llx_elaska_rdv }|--|| llx_societe : "concerne"
    llx_elaska_rdv }o--|| llx_user : "géré par"
    llx_elaska_communication }|--|| llx_societe : "concerne"
    llx_elaska_communication }o--|| llx_user : "envoyé par"
    llx_elaska_patrimoine }|--|| llx_societe : "appartient à"
    llx_elaska_patrimoine ||--o{ llx_elaska_patrimoine_actif : "composé de"
    llx_elaska_patrimoine ||--o{ llx_elaska_patrimoine_passif : "composé de"
    llx_elaska_abonnement }|--|| llx_societe : "souscrit par"
    llx_elaska_sinistre }|--|| llx_societe : "déclaré par"
    llx_elaska_recouvrement }|--|| llx_societe : "mandaté par"
    llx_elaska_recouvrement ||--o{ llx_elaska_demarche_recouvrement : "composé de"
```

## Description des Tables

### Tables relatives aux Clients

#### llx_elaska_client_info
Extensions des informations clients pour le module eLaska-ESaiko.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| fk_soc | int(11) | Lien vers llx_societe |
| type_client | varchar(20) | Type de client (particulier, entreprise, association, createur) |
| date_naissance | date | Date de naissance (particulier) |
| situation_familiale | varchar(20) | Situation familiale (célibataire, marié, etc.) |
| profession | varchar(100) | Profession (particulier) |
| revenu_foyer | double(24,8) | Revenu annuel du foyer |
| nombre_enfants | int(11) | Nombre d'enfants |
| statut_fiscal | varchar(50) | Statut fiscal (ex: imposable, non imposable) |
| reference_fiscale | varchar(50) | Numéro fiscal de référence |
| notes_confidentielles | text | Notes confidentielles (chiffrées) |
| mfa_enabled | tinyint(1) | Authentification à 2 facteurs activée |
| mfa_secret | varchar(255) | Secret pour 2FA (chiffré) |
| mfa_enabled_date | datetime | Date d'activation 2FA |
| login_attempts | int(11) | Tentatives de connexion échouées |
| login_last_attempt | datetime | Date dernière tentative |
| last_login_date | datetime | Date dernière connexion |

#### llx_elaska_objectif_vie
Objectifs de vie pour les clients particuliers.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| fk_soc | int(11) | Lien vers llx_societe |
| titre | varchar(255) | Titre de l'objectif |
| description | text | Description détaillée |
| categorie | varchar(50) | Catégorie (logement, retraite, etc.) |
| horizon_temporel | varchar(20) | Horizon (court, moyen, long) |
| priorite | int(11) | Niveau de priorité (1-5) |
| impact_financier | double(24,8) | Impact financier estimé |
| date_objectif | date | Date cible pour l'objectif |
| statut | varchar(20) | Statut (en_cours, atteint, abandonne) |
| date_creation | datetime | Date de création |

#### llx_elaska_contact
Contacts supplémentaires pour un client.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| fk_soc | int(11) | Lien vers llx_societe |
| nom | varchar(100) | Nom du contact |
| prenom | varchar(100) | Prénom du contact |
| type_contact | varchar(50) | Type (conjoint, enfant, notaire, etc.) |
| email | varchar(100) | Email |
| telephone | varchar(30) | Téléphone |
| notes | text | Notes diverses |

### Tables relatives aux Dossiers

#### llx_elaska_dossier
Table principale des dossiers clients.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| ref_elaska | varchar(50) | Référence unique |
| fk_soc | int(11) | Lien vers llx_societe |
| fk_user_responsable | int(11) | Conseiller responsable |
| type_dossier | varchar(50) | Type de dossier |
| libelle | varchar(255) | Libellé du dossier |
| description | text | Description détaillée |
| date_creation | datetime | Date de création |
| date_cloture | datetime | Date de clôture |
| date_echeance | date | Date d'échéance |
| statut | varchar(20) | Statut du dossier |
| priorite | int(11) | Niveau de priorité (1-3) |
| avancement | int(11) | Pourcentage d'avancement |
| confidentiel | tinyint(1) | Dossier confidentiel |
| note_interne | text | Notes internes |
| note_client | text | Notes visibles au client |
| fk_projet | int(11) | Lien projet Dolibarr |

#### llx_elaska_timeline
Timeline structurée d'un dossier.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| fk_dossier | int(11) | Lien vers llx_elaska_dossier |
| titre | varchar(255) | Titre de la timeline |
| description | text | Description |
| date_creation | datetime | Date de création |
| date_modification | datetime | Date dernière modification |

#### llx_elaska_timeline_etape
Étapes de la timeline d'un dossier.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| fk_timeline | int(11) | Lien vers llx_elaska_timeline |
| position | int(11) | Position dans la timeline |
| titre | varchar(255) | Titre de l'étape |
| description | text | Description |
| date_debut | datetime | Date de début |
| date_fin | datetime | Date de fin |
| statut_etape | varchar(20) | Statut (a_faire, en_cours, terminee) |
| fk_user_responsable | int(11) | Utilisateur responsable |
| jalon | tinyint(1) | Étape importante (jalon) |

### Tables relatives aux Communications

#### llx_elaska_communication
Communications avec les clients.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| ref_elaska | varchar(50) | Référence unique |
| type | varchar(20) | Type (email, message_portail, appel, etc.) |
| direction | varchar(10) | Direction (entrant, sortant) |
| sujet | varchar(255) | Sujet/titre |
| contenu | text | Contenu |
| fk_soc | int(11) | Client concerné |
| fk_dossier | int(11) | Dossier concerné (optionnel) |
| fk_user_expediteur | int(11) | Expéditeur (interne) |
| fk_user_destinataire | int(11) | Destinataire (interne) |
| expediteur_externe | varchar(255) | Expéditeur externe |
| destinataire_externe | varchar(255) | Destinataire externe |
| date_comm | datetime | Date de la communication |
| date_lecture | datetime | Date de lecture |
| statut | varchar(20) | Statut (brouillon, envoye, lu, etc.) |
| fk_comm_parent | int(11) | Communication parent (fil) |
| tags | varchar(255) | Tags/catégories (JSON) |
| confidentialite | int(11) | Niveau de confidentialité |
| infos_techniques | text | Informations techniques (JSON) |

### Tables relatives aux Rendez-vous

#### llx_elaska_rdv
Rendez-vous avec les clients.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| ref_elaska | varchar(50) | Référence unique |
| fk_soc | int(11) | Client concerné |
| fk_user_conseiller | int(11) | Conseiller |
| type_rdv | varchar(20) | Type (présentiel, téléphonique, visio) |
| motif | varchar(255) | Motif du RDV |
| note_client | text | Notes du client |
| note_interne | text | Notes internes |
| date_debut | datetime | Date et heure de début |
| date_fin | datetime | Date et heure de fin |
| duree | int(11) | Durée en minutes |
| lieu | varchar(255) | Lieu (si présentiel) |
| lien_visio | varchar(255) | Lien visio (si visio) |
| statut | varchar(20) | Statut (demande, confirme, annule, termine) |
| date_creation | datetime | Date de création |
| date_modification | datetime | Date dernière modification |
| fk_dossier | int(11) | Dossier lié (optionnel) |
| google_event_id | varchar(255) | ID événement Google Calendar |

#### llx_elaska_user_rdv_config
Configuration des disponibilités des conseillers pour les RDV.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| fk_user | int(11) | Utilisateur conseiller |
| jour_semaine | int(11) | Jour de la semaine (1-7) |
| heure_debut | time | Heure de début |
| heure_fin | time | Heure de fin |
| duree_creneau | int(11) | Durée des créneaux (minutes) |
| temps_tampon | int(11) | Temps tampon entre RDVs (minutes) |
| actif | tinyint(1) | Configuration active |

### Tables relatives au Patrimoine

#### llx_elaska_patrimoine
Fiches patrimoniales des clients.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| fk_soc | int(11) | Lien vers llx_societe |
| date_evaluation | date | Date de l'évaluation |
| valeur_totale_actifs | double(24,8) | Valeur totale des actifs |
| montant_total_passifs | double(24,8) | Montant total des passifs |
| valeur_nette | double(24,8) | Valeur nette (actifs - passifs) |
| commentaire | text | Commentaire général |
| statut | varchar(20) | Statut (brouillon, valide, archive) |
| date_creation | datetime | Date de création |
| fk_user_creation | int(11) | Utilisateur créateur |
| date_modification | datetime | Date dernière modification |

#### llx_elaska_patrimoine_actif
Actifs d'une fiche patrimoniale.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| fk_patrimoine | int(11) | Lien vers llx_elaska_patrimoine |
| type_actif | varchar(50) | Type d'actif (immobilier, financier, etc.) |
| libelle | varchar(255) | Libellé de l'actif |
| description | text | Description détaillée |
| valeur | double(24,8) | Valeur estimée |
| date_acquisition | date | Date d'acquisition |
| details_techniques | text | Détails techniques (JSON) |

#### llx_elaska_patrimoine_passif
Passifs d'une fiche patrimoniale.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| fk_patrimoine | int(11) | Lien vers llx_elaska_patrimoine |
| type_passif | varchar(50) | Type de passif (emprunt, crédit, etc.) |
| libelle | varchar(255) | Libellé du passif |
| description | text | Description détaillée |
| montant_initial | double(24,8) | Montant initial |
| montant_restant | double(24,8) | Montant restant dû |
| date_debut | date | Date de début |
| date_fin | date | Date d'échéance |
| taux_interet | double(24,8) | Taux d'intérêt |
| details_techniques | text | Détails techniques (JSON) |

### Tables relatives aux Abonnements

#### llx_elaska_abonnement
Abonnements et services récurrents.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| ref_elaska | varchar(50) | Référence unique |
| fk_soc | int(11) | Client souscripteur |
| fk_product | int(11) | Produit/Service lié |
| libelle | varchar(255) | Libellé de l'abonnement |
| description | text | Description |
| montant_ht | double(24,8) | Montant HT par période |
| tva | double(24,8) | Taux de TVA |
| periodicite | varchar(20) | Périodicité (mensuel, trimestriel, annuel) |
| date_debut | date | Date de début |
| date_fin | date | Date de fin ou NULL si indéterminé |
| date_prochaine_facture | date | Date prochaine facturation |
| statut | varchar(20) | Statut (actif, suspendu, resilie) |
| mode_paiement | varchar(50) | Mode de paiement |
| conditions | text | Conditions spécifiques |
| date_creation | datetime | Date de création |
| fk_user_creation | int(11) | Utilisateur créateur |

#### llx_elaska_abonnement_historique
Historique des événements relatifs aux abonnements.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| fk_abonnement | int(11) | Lien vers llx_elaska_abonnement |
| type_evenement | varchar(50) | Type d'événement |
| date_evenement | datetime | Date de l'événement |
| description | text | Description |
| fk_user | int(11) | Utilisateur responsable |
| fk_facture | int(11) | Facture associée le cas échéant |

### Tables relatives aux Sinistres

#### llx_elaska_sinistre
Suivi des sinistres pour les contrats d'assurance.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| ref_elaska | varchar(50) | Référence unique |
| fk_soc | int(11) | Client concerné |
| fk_contrat | int(11) | Contrat concerné |
| type_sinistre | varchar(50) | Type de sinistre |
| libelle | varchar(255) | Libellé du sinistre |
| description | text | Description détaillée |
| date_survenance | datetime | Date de survenance |
| date_declaration | datetime | Date de déclaration |
| lieu | varchar(255) | Lieu du sinistre |
| montant_estime | double(24,8) | Montant estimé |
| montant_indemnise | double(24,8) | Montant indemnisé |
| statut | varchar(20) | Statut du sinistre |
| ref_assureur | varchar(50) | Référence chez l'assureur |
| date_cloture | datetime | Date de clôture |
| fk_user_responsable | int(11) | Gestionnaire responsable |

#### llx_elaska_sinistre_etape
Étapes de gestion d'un sinistre.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| fk_sinistre | int(11) | Lien vers llx_elaska_sinistre |
| date_etape | datetime | Date de l'étape |
| type_etape | varchar(50) | Type d'étape |
| libelle | varchar(255) | Libellé |
| description | text | Description |
| fk_user | int(11) | Utilisateur responsable |
| documents | text | Documents associés (JSON) |

### Tables relatives au Recouvrement

#### llx_elaska_recouvrement
Dossiers de recouvrement.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| ref_elaska | varchar(50) | Référence unique |
| fk_soc | int(11) | Client mandant |
| debiteur_nom | varchar(255) | Nom du débiteur |
| debiteur_contact | text | Coordonnées du débiteur (JSON) |
| montant_creance | double(24,8) | Montant de la créance |
| date_echeance | date | Date d'échéance |
| libelle | varchar(255) | Libellé de la créance |
| description | text | Description détaillée |
| pieces_justificatives | text | Liste des pièces (JSON) |
| instructions | text | Instructions spécifiques |
| honoraires_fixes | double(24,8) | Honoraires fixes |
| honoraires_pourcentage | double(24,8) | % honoraires sur recouvrement |
| statut | varchar(20) | Statut du dossier |
| date_creation | datetime | Date de création |
| date_cloture | datetime | Date de clôture |
| fk_user_responsable | int(11) | Gestionnaire responsable |

#### llx_elaska_demarche_recouvrement
Démarches effectuées pour un dossier de recouvrement.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| fk_recouvrement | int(11) | Lien vers llx_elaska_recouvrement |
| date_demarche | datetime | Date de la démarche |
| type_demarche | varchar(50) | Type de démarche |
| description | text | Description |
| resultat | text | Résultat |
| cout | double(24,8) | Coût éventuel |
| fk_user | int(11) | Utilisateur qui a effectué la démarche |

### Tables relatives à la Sécurité et aux Personnalisations

#### llx_elaska_audit_log
Journal d'audit pour les actions sensibles.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| audit_type | varchar(50) | Type d'audit |
| audit_action | varchar(50) | Action auditée |
| fk_user | int(11) | Utilisateur concerné |
| audit_date | datetime | Date et heure |
| ip_address | varchar(50) | Adresse IP |
| user_agent | varchar(255) | User-Agent |
| session_id | varchar(255) | ID de session |
| details | text | Détails (JSON) |
| entity_type | varchar(50) | Type d'entité concernée |
| entity_id | int(11) | ID de l'entité concernée |
| severity | int(11) | Niveau de gravité (1-5) |

#### llx_elaska_consent_type
Types de consentement RGPD.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| code | varchar(50) | Code technique |
| libelle | varchar(255) | Libellé |
| description | text | Description |
| texte_consentement | text | Texte complet du consentement |
| version_texte | varchar(20) | Version du texte |
| position | int(11) | Position d'affichage |
| active | tinyint(1) | Type actif |

#### llx_elaska_consent_log
Journal des consentements RGPD.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| fk_soc | int(11) | Client concerné |
| fk_consent_type | int(11) | Type de consentement |
| statut_consentement | varchar(20) | Statut (accorde, refuse, retire) |
| date_consentement | datetime | Date du consentement |
| source_consentement | varchar(50) | Source (portail, backoffice, etc.) |
| version_texte | varchar(20) | Version du texte approuvé |
| adresse_ip | varchar(50) | Adresse IP |
| user_agent | varchar(255) | User-Agent |

#### llx_elaska_tag
Tags pour catégorisation flexible.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| label | varchar(255) | Libellé du tag |
| color | varchar(20) | Couleur (HEX) |
| type | varchar(50) | Type/catégorie du tag |
| active | tinyint(1) | Tag actif |

#### llx_elaska_tag_link
Association entre tags et entités.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| tag_id | int(11) | Lien vers llx_elaska_tag |
| entity_type | varchar(50) | Type d'entité |
| entity_id | int(11) | ID de l'entité |

#### llx_elaska_dynamic_field_def
Définitions de champs dynamiques.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| entity_type | varchar(50) | Type d'entité concernée |
| code | varchar(50) | Code technique |
| label | varchar(255) | Libellé |
| type | varchar(20) | Type de champ |
| position | int(11) | Position d'affichage |
| options | text | Options (JSON) |
| active | tinyint(1) | Définition active |

#### llx_elaska_dynamic_field_value
Valeurs des champs dynamiques.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| entity_type | varchar(50) | Type d'entité |
| entity_id | int(11) | ID de l'entité |
| field_id | int(11) | ID du champ (def) |
| value | text | Valeur |

### Tables pour le Portail Client

#### llx_elaska_login_history
Historique des connexions au portail client.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| fk_user | int(11) | Utilisateur |
| fk_soc | int(11) | Client |
| login_date | datetime | Date de connexion |
| ip_address | varchar(50) | Adresse IP |
| user_agent | varchar(255) | User-Agent |
| mfa_used | tinyint(1) | 2FA utilisée |

#### llx_elaska_notification
Notifications pour le portail client.

| Champ | Type | Description |
|-------|------|-------------|
| rowid | int(11) | ID primaire |
| fk_soc | int(11) | Client destinataire |
| type | varchar(50) | Type de notification |
| titre | varchar(255) | Titre |
| message | text | Message |
| url | varchar(255) | URL associée |
| date_creation | datetime | Date de création |
| date_lecture | datetime | Date de lecture |
| read | tinyint(1) | Lu ou non |
| importance | int(11) | Niveau d'importance |
| entity_type | varchar(50) | Type d'entité liée |
| entity_id | int(11) | ID de l'entité liée |
```

## Schémas de Migration

Pour chaque mise à jour majeure du module, des scripts de migration sont fournis pour assurer la transition en douceur des données et structures existantes.

### Migration v1.0.0 → v1.1.0
```sql
-- Ajout des champs pour RGPD
ALTER TABLE llx_elaska_client_info 
ADD COLUMN rgpd_option1 TINYINT(1) DEFAULT 0 AFTER notes_confidentielles,
ADD COLUMN rgpd_option2 TINYINT(1) DEFAULT 0 AFTER rgpd_option1,
ADD COLUMN rgpd_date_consentement DATETIME NULL AFTER rgpd_option2;

-- Nouvelle table pour les documents dynamiques
CREATE TABLE llx_elaska_modele_document (
  rowid INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  titre VARCHAR(255) NOT NULL,
  description TEXT,
  type_document VARCHAR(50) NOT NULL,
  contenu_html LONGTEXT,
  variables JSON,
  actif TINYINT(1) DEFAULT 1,
  date_creation DATETIME NOT NULL,
  fk_user_creation INT(11),
  date_modification DATETIME,
  KEY idx_elaska_modele_document_type (type_document),
  KEY idx_elaska_modele_document_actif (actif)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
```

### Migration v1.1.0 → v2.0.0
```sql
-- Migration complète vers le système de consentements RGPD
CREATE TABLE llx_elaska_consent_type (
  rowid INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  code VARCHAR(50) NOT NULL,
  libelle VARCHAR(255) NOT NULL,
  description TEXT,
  texte_consentement TEXT,
  version_texte VARCHAR(20) NOT NULL,
  position INT(11) DEFAULT 0,
  active TINYINT(1) DEFAULT 1,
  UNIQUE KEY uk_elaska_consent_type_code (code)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Migration des données RGPD existantes
INSERT INTO llx_elaska_consent_type (code, libelle, description, texte_consentement, version_texte, position, active)
VALUES 
('marketing_email', 'Communications marketing par email', 'Consentement pour recevoir des emails à caractère commercial ou promotionnel', 'Je consens à recevoir des communications marketing par email de la part d\'eLaska-ESaiko...', '1.0', 1, 1),
('marketing_sms', 'Communications marketing par SMS', 'Consentement pour recevoir des SMS à caractère commercial ou promotionnel', 'Je consens à recevoir des communications marketing par SMS de la part d\'eLaska-ESaiko...', '1.0', 2, 1),
('data_processing', 'Traitement des données personnelles', 'Consentement pour le traitement des données personnelles selon notre politique de confidentialité', 'Je consens au traitement de mes données personnelles par eLaska-ESaiko...', '1.0', 0, 1);

-- Création du journal des consentements
CREATE TABLE llx_elaska_consent_log (
  rowid INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  fk_soc INT(11) NOT NULL,
  fk_consent_type INT(11) NOT NULL,
  statut_consentement VARCHAR(20) NOT NULL,
  date_consentement DATETIME NOT NULL,
  source_consentement VARCHAR(50) NOT NULL,
  version_texte VARCHAR(20) NOT NULL,
  adresse_ip VARCHAR(50),
  user_agent VARCHAR(255),
  KEY idx_elaska_consent_log_fk_soc (fk_soc),
  KEY idx_elaska_consent_log_fk_consent_type (fk_consent_type),
  CONSTRAINT fk_elaska_consent_log_soc FOREIGN KEY (fk_soc) REFERENCES llx_societe (rowid) ON DELETE CASCADE,
  CONSTRAINT fk_elaska_consent_log_consent_type FOREIGN KEY (fk_consent_type) REFERENCES llx_elaska_consent_type (rowid)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Migration des anciens consentements vers le nouveau système
-- Script à exécuter via PHP pour transférer les données de rgpd_option1, rgpd_option2...
```

### 8.3. Documentation technique des API

Le module eLaska-ESaiko expose des API REST pour l'intégration avec le portail client et des systèmes tiers.

**Spécifications techniques:**

```markdown
# Documentation Technique des API eLaska-ESaiko

## Introduction

Cette documentation décrit les API REST exposées par le module eLaska-ESaiko pour Dolibarr. Ces API permettent d'interagir avec les différentes fonctionnalités du module depuis des applications externes, notamment le portail client.

## Authentification

Toutes les requêtes API doivent être authentifiées. Deux méthodes d'authentification sont disponibles:

### Authentification par Token JWT (Portail Client)

```http
GET /api/elaska/v1/dossiers
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
```

### Authentification par API Key (Intégrations tierces)

```http
GET /api/elaska/v1/dossiers
DOLAPIKEY: YOUR_API_KEY
```

## Formats des Données

- Toutes les requêtes et réponses utilisent le format JSON.
- Les dates sont au format ISO 8601 (`YYYY-MM-DDThh:mm:ss+00:00`).
- Les listes paginées incluent des métadonnées de pagination.

## Points d'API Principaux

### Clients

#### Récupérer les informations d'un client

```http
GET /api/elaska/v1/clients/{id}
```

**Paramètres:**
- `id` (obligatoire): ID du client

**Réponse:**
```json
{
  "id": 123,
  "ref": "CLIENT123",
  "name": "Dupont Entreprises",
  "type": "entreprise",
  "contact": {
    "email": "contact@dupont.fr",
    "phone": "+33123456789",
    "address": "123 rue de Paris, 75000 Paris"
  },
  "metadata": {
    "created_at": "2023-01-15T10:30:00+00:00",
    "updated_at": "2023-05-20T14:45:00+00:00"
  }
}
```

#### Mettre à jour les informations d'un client

```http
PUT /api/elaska/v1/clients/{id}
```

**Corps de la requête:**
```json
{
  "contact": {
    "email": "nouveau@dupont.fr",
    "phone": "+33987654321"
  }
}
```

**Réponse:**
```json
{
  "success": true,
  "message": "Client mis à jour avec succès",
  "data": {
    "id": 123,
    "ref": "CLIENT123",
    "contact": {
      "email": "nouveau@dupont.fr",
      "phone": "+33987654321",
      "address": "123 rue de Paris, 75000 Paris"
    }
  }
}
```

### Dossiers

#### Lister les dossiers d'un client

```http
GET /api/elaska/v1/dossiers
```

**Paramètres:**
- `client_id` (obligatoire): ID du client
- `status` (optionnel): Filtrer par statut (actif, clos, tous)
- `page` (optionnel): Numéro de page, défaut: 1
- `limit` (optionnel): Nombre d'éléments par page, défaut: 20
- `sort` (optionnel): Champ de tri, défaut: date_creation
- `order` (optionnel): Ordre de tri (asc, desc), défaut: desc

**Réponse:**
```json
{
  "data": [
    {
      "id": 456,
      "ref": "DOS-2023-0123",
      "title": "Audit fiscal annuel",
      "status": "en_cours",
      "priority": 2,
      "progress": 65,
      "created_at": "2023-03-10T09:15:00+00:00",
      "deadline": "2023-06-30",
      "responsible": {
        "id": 7,
        "name": "Marie Dubois"
      }
    },
    {
      "id": 457,
      "ref": "DOS-2023-0124",
      "title": "Optimisation fiscale",
      "status": "en_attente",
      "priority": 1,
      "progress": 25,
      "created_at": "2023-03-15T11:20:00+00:00",
      "deadline": "2023-07-15",
      "responsible": {
        "id": 7,
        "name": "Marie Dubois"
      }
    }
  ],
  "pagination": {
    "total_items": 12,
    "total_pages": 1,
    "current_page": 1,
    "items_per_page": 20
  }
}
```

#### Récupérer les détails d'un dossier

```http
GET /api/elaska/v1/dossiers/{id}
```

**Paramètres:**
- `id` (obligatoire): ID du dossier

**Réponse:**
```json
{
  "id": 456,
  "ref": "DOS-2023-0123",
  "title": "Audit fiscal annuel",
  "description": "Audit fiscal complet pour l'exercice 2022 incluant...",
  "status": "en_cours",
  "priority": 2,
  "progress": 65,
  "created_at": "2023-03-10T09:15:00+00:00",
  "deadline": "2023-06-30",
  "closed_at": null,
  "responsible": {
    "id": 7,
    "name": "Marie Dubois",
    "email": "m.dubois@elaska.fr",
    "phone": "+33123456788"
  },
  "client": {
    "id": 123,
    "name": "Dupont Entreprises"
  },
  "metadata": {
    "type": "fiscal",
    "confidential": false,
    "has_timeline": true,
    "has_documents": true
  }
}
```

#### Récupérer la timeline d'un dossier

```http
GET /api/elaska/v1/dossiers/{id}/timeline
```

**Paramètres:**
- `id` (obligatoire): ID du dossier

**Réponse:**
```json
{
  "dossier_id": 456,
  "ref": "DOS-2023-0123",
  "title": "Audit fiscal annuel",
  "type_dossier": "fiscal",
  "steps": [
    {
      "id": 1001,
      "title": "Collecte des documents",
      "description": "Collecte des documents comptables et fiscaux",
      "start_date": "2023-03-15T00:00:00+00:00",
      "end_date": "2023-03-25T00:00:00+00:00",
      "status": "completed",
      "position": 1,
      "is_milestone": false,
      "responsible": {
        "id": 7,
        "name": "Marie Dubois"
      }
    },
    {
      "id": 1002,
      "title": "Analyse préliminaire",
      "description": "Examen des déclarations et recherche d'optimisations",
      "start_date": "2023-03-26T00:00:00+00:00",
      "end_date": "2023-04-15T00:00:00+00:00",
      "status": "completed",
      "position": 2,
      "is_milestone": false,
      "responsible": {
        "id": 7,
        "name": "Marie Dubois"
      }
    },
    {
      "id": 1003,
      "title": "Réunion de présentation",
      "description": "Présentation des premiers résultats",
      "start_date": "2023-04-20T10:00:00+00:00",
      "end_date": "2023-04-20T12:00:00+00:00",
      "status": "completed",
      "position": 3,
      "is_milestone": true,
      "responsible": {
        "id": 7,
        "name": "Marie Dubois"
      }
    },
    {
      "id": 1004,
      "title": "Élaboration des recommandations",
      "description": "Rédaction du rapport et des recommandations",
      "start_date": "2023-04-21T00:00:00+00:00",
      "end_date": "2023-05-15T00:00:00+00:00",
      "status": "in_progress",
      "position": 4,
      "is_milestone": false,
      "responsible": {
        "id": 8,
        "name": "Thomas Martin"
      }
    },
    {
      "id": 1005,
      "title": "Livraison rapport final",
      "description": "Présentation du rapport final et mise en oeuvre",
      "start_date": "2023-05-20T00:00:00+00:00",
      "end_date": "2023-06-15T00:00:00+00:00",
      "status": "pending",
      "position": 5,
      "is_milestone": true,
      "responsible": {
        "id": 7,
        "name": "Marie Dubois"
      }
    }
  ]
}
```

### Documents

#### Lister les documents d'un client

```http
GET /api/elaska/v1/documents
```

**Paramètres:**
- `client_id` (obligatoire): ID du client
- `dossier_id` (optionnel): ID du dossier
- `category` (optionnel): Catégorie de document
- `page` (optionnel): Numéro de page
- `limit` (optionnel): Nombre d'éléments par page

**Réponse:**
```json
{
  "data": [
    {
      "id": 12345,
      "ref": "DOC-2023-0987",
      "filename": "declaration_fiscale_2022.pdf",
      "title": "Déclaration fiscale 2022",
      "category": "fiscal",
      "description": "Déclaration d'impôts pour l'exercice 2022",
      "mime_type": "application/pdf",
      "file_size": 1240567,
      "created_at": "2023-02-15T10:30:00+00:00",
      "created_by": {
        "id": 7,
        "name": "Marie Dubois"
      },
      "dossier_id": 456,
      "is_confidential": false
    }
  ],
  "pagination": {
    "total_items": 35,
    "total_pages": 4,
    "current_page": 1,
    "items_per_page": 10
  }
}
```

#### Télécharger un document

```http
GET /api/elaska/v1/documents/{id}/download
```

**Paramètres:**
- `id` (obligatoire): ID du document

**Réponse:**
Le fichier binaire avec les headers HTTP appropriés pour le téléchargement.

#### Uploader un document

```http
POST /api/elaska/v1/documents/upload
Content-Type: multipart/form-data
```

**Paramètres:**
- `client_id` (obligatoire): ID du client
- `dossier_id` (optionnel): ID du dossier associé
- `category` (obligatoire): Catégorie du document
- `title` (obligatoire): Titre du document
- `description` (optionnel): Description
- `is_confidential` (optionnel): Document confidentiel (boolean)
- `file` (obligatoire): Fichier à téléverser

**Réponse:**
```json
{
  "success": true,
  "message": "Document téléversé avec succès",
  "data": {
    "id": 12346,
    "ref": "DOC-2023-0988",
    "filename": "facture_conseil_q1_2023.pdf",
    "title": "Facture conseil Q1 2023",
    "category": "facture",
    "file_size": 245678,
    "created_at": "2023-05-27T15:30:00+00:00"
  }
}
```

### Coffre-fort Sécurisé

#### Valider l'accès au coffre-fort

```http
POST /api/elaska/v1/secure-vault/validate
```

**Corps de la requête:**
```json
{
  "access_code": "123456"
}
```

**Réponse:**
```json
{
  "success": true,
  "message": "Accès au coffre-fort autorisé",
  "vault_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "expires_at": "2023-05-27T16:30:00+00:00"
}
```

#### Lister les documents du coffre-fort

```http
GET /api/elaska/v1/secure-vault/documents
Vault-Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
```

**Paramètres:**
- `client_id` (obligatoire): ID du client
- `page` (optionnel): Numéro de page
- `limit` (optionnel): Nombre d'éléments par page

**Réponse:**
```json
{
  "data": [
    {
      "id": 5001,
      "ref": "SVAULT-2023-0001",
      "filename": "contrat_confidentiel.pdf",
      "title": "Contrat confidentiel",
      "category": "contrat",
      "description": "Contrat avec clauses confidentielles",
      "mime_type": "application/pdf",
      "file_size": 345678,
      "created_at": "2023-01-10T11:45:00+00:00"
    }
  ],
  "pagination": {
    "total_items": 8,
    "total_pages": 1,
    "current_page": 1,
    "items_per_page": 10
  }
}
```

### Messagerie

#### Lister les messages d'un client

```http
GET /api/elaska/v1/messages
```

**Paramètres:**
- `client_id` (obligatoire): ID du client
- `dossier_id` (optionnel): Filtrer par dossier
- `unread_only` (optionnel): Seulement les messages non lus (boolean)
- `page` (optionnel): Numéro de page
- `limit` (optionnel): Nombre d'éléments par page

**Réponse:**
```json
{
  "data": [
    {
      "id": 7891,
      "subject": "Question concernant votre dossier fiscal",
      "content": "Bonjour Madame Dupont,\n\nJ'aurais besoin des documents suivants...",
      "direction": "entrant",
      "date": "2023-05-20T09:15:00+00:00",
      "read": false,
      "read_date": null,
      "from": {
        "id": 7,
        "name": "Marie Dubois",
        "type": "conseiller"
      },
      "to": {
        "id": 123,
        "name": "Dupont Entreprises",
        "type": "client"
      },
      "dossier_id": 456,
      "has_attachments": false
    }
  ],
  "pagination": {
    "total_items": 15,
    "total_pages": 2,
    "current_page": 1,
    "items_per_page": 10
  }
}
```

#### Envoyer un message

```http
POST /api/elaska/v1/messages
```

**Corps de la requête:**
```json
{
  "client_id": 123,
  "subject": "Réponse à votre demande de documents",
  "content": "Bonjour Madame Dubois,\n\nVeuillez trouver ci-joint les documents demandés...",
  "dossier_id": 456,
  "parent_id": 7891,
  "attachments": [
    {
      "name": "document_demandé.pdf",
      "content": "base64_encoded_content...",
      "mime_type": "application/pdf"
    }
  ]
}
```

**Réponse:**
```json
{
  "success": true,
  "message": "Message envoyé avec succès",
  "data": {
    "id": 7892,
    "subject": "Réponse à votre demande de documents",
    "date": "2023-05-27T15:45:00+00:00",
    "has_attachments": true
  }
}
```

#### Marquer un message comme lu

```http
PUT /api/elaska/v1/messages/{id}/read
```

**Paramètres:**
- `id` (obligatoire): ID du message

**Réponse:**
```json
{
  "success": true,
  "message": "Message marqué comme lu",
  "data": {
    "id": 7891,
    "read": true,
    "read_date": "2023-05-27T15:50:00+00:00"
  }
}
```

### Rendez-vous

#### Lister les disponibilités d'un conseiller

```http
GET /api/elaska/v1/appointments/availability/{conseiller_id}
```

**Paramètres:**
- `conseiller_id` (obligatoire): ID du conseiller
- `start_date` (obligatoire): Date de début (YYYY-MM-DD)
- `end_date` (obligatoire): Date de fin (YYYY-MM-DD)

**Réponse:**
```json
{
  "conseiller_id": 7,
  "conseiller_name": "Marie Dubois",
  "start_date": "2023-06-01",
  "end_date": "2023-06-07",
  "available_dates": [
    "2023-06-01",
    "2023-06-02",
    "2023-06-05",
    "2023-06-06",
    "2023-06-07"
  ],
  "slots": [
    {
      "start": "2023-06-01T09:00:00+00:00",
      "end": "2023-06-01T09:30:00+00:00",
      "duration": 30
    },
    {
      "start": "2023-06-01T09:45:00+00:00",
      "end": "2023-06-01T10:15:00+00:00",
      "duration": 30
    },
    {
      "start": "2023-06-01T10:30:00+00:00",
      "end": "2023-06-01T11:00:00+00:00",
      "duration": 30
    },
    {
      "start": "2023-06-01T11:15:00+00:00",
      "end": "2023-06-01T11:45:00+00:00",
      "duration": 30
    },
    {
      "start": "2023-06-01T14:00:00+00:00",
      "end": "2023-06-01T14:30:00+00:00",
      "duration": 30
    }
  ]
}
```

#### Créer un rendez-vous

```http
POST /api/elaska/v1/appointments
```

**Corps de la requête:**
```json
{
  "client_id": 123,
  "conseiller_id": 7,
  "start_time": "2023-06-01T09:00:00+00:00",
  "end_time": "2023-06-01T09:30:00+00:00",
  "type": "visio",
  "motif": "Présentation du bilan fiscal",
  "note": "J'aimerais discuter des optimisations possibles pour l'année prochaine",
  "dossier_id": 456
}
```

**Réponse:**
```json
{
  "success": true,
  "message": "Rendez-vous créé avec succès",
  "data": {
    "id": 3456,
    "ref": "RDV-2023-0789",
    "start_time": "2023-06-01T09:00:00+00:00",
    "end_time": "2023-06-01T09:30:00+00:00",
    "status": "confirme"
  }
}
```

#### Lister les rendez-vous d'un client

```http
GET /api/elaska/v1/appointments
```

**Paramètres:**
- `client_id` (obligatoire): ID du client
- `status` (optionnel): Filtrer par statut (confirme, annule, termine, tous)
- `from_date` (optionnel): Date de début
- `to_date` (optionnel): Date de fin

**Réponse:**
```json
{
  "data": [
    {
      "id": 3456,
      "ref": "RDV-2023-0789",
      "start_time": "2023-06-01T09:00:00+00:00",
      "end_time": "2023-06-01T09:30:00+00:00",
      "duration": 30,
      "type": "visio",
      "motif": "Présentation du bilan fiscal",
      "status": "confirme",
      "conseiller": {
        "id": 7,
        "name": "Marie Dubois"
      },
      "visio_link": "https://meet.elaska.fr/room/abc123",
      "dossier_id": 456
    }
  ],
  "pagination": {
    "total_items": 5,
    "total_pages": 1,
    "current_page": 1,
    "items_per_page": 10
  }
}
```

### Consentements RGPD

#### Récupérer les consentements d'un client

```http
GET /api/elaska/v1/rgpd/consents
```

**Paramètres:**
- `client_id` (obligatoire): ID du client

**Réponse:**
```json
{
  "client_id": 123,
  "consents": [
    {
      "type": "marketing_email",
      "label": "Communications marketing par email",
      "description": "Consentement pour recevoir des emails à caractère commercial ou promotionnel",
      "status": "accorde",
      "date": "2023-01-15T14:30:00+00:00",
      "source": "portail",
      "consentText": "Je consens à recevoir des communications marketing par email..."
    },
    {
      "type": "marketing_sms",
      "label": "Communications marketing par SMS",
      "description": "Consentement pour recevoir des SMS à caractère commercial ou promotionnel",
      "status": "refuse",
      "date": "2023-01-15T14:31:00+00:00",
      "source": "portail",
      "consentText": "Je consens à recevoir des communications marketing par SMS..."
    },
    {
      "type": "data_processing",
      "label": "Traitement des données personnelles",
      "description": "Consentement pour le traitement des données personnelles selon notre politique de confidentialité",
      "status": "accorde",
      "date": "2023-01-15T14:30:00+00:00",
      "source": "portail",
      "consentText": "Je consens au traitement de mes données personnelles..."
    }
  ]
}
```

#### Mettre à jour un consentement

```http
PUT /api/elaska/v1/rgpd/consents
```

**Corps de la requête:**
```json
{
  "client_id": 123,
  "consent_type": "marketing_sms",
  "status": "accorde",
  "source": "portail"
}
```

**Réponse:**
```json
{
  "success": true,
  "message": "Consentement mis à jour",
  "data": {
    "type": "marketing_sms",
    "status": "accorde",
    "date": "2023-05-27T16:00:00+00:00"
  }
}
```

### Notifications

#### Récupérer les notifications d'un client

```http
GET /api/elaska/v1/notifications
```

**Paramètres:**
- `client_id` (obligatoire): ID du client
- `unread_only` (optionnel): Seulement les notifications non lues (boolean)
- `page` (optionnel): Numéro de page
- `limit` (optionnel): Nombre d'éléments par page

**Réponse:**
```json
{
  "data": [
    {
      "id": 9876,
      "type": "message",
      "title": "Nouveau message reçu",
      "message": "Vous avez reçu un nouveau message de votre conseiller",
      "url": "/portail/messagerie/7891",
      "created_at": "2023-05-26T15:30:00+00:00",
      "read": false,
      "importance": 2,
      "entity_type": "message",
      "entity_id": 7891
    },
    {
      "id": 9875,
      "type": "dossier_update",
      "title": "Mise à jour de dossier",
      "message": "Votre dossier 'Audit fiscal annuel' a été mis à jour",
      "url": "/portail/dossiers/456",
      "created_at": "2023-05-25T10:15:00+00:00",
      "read": true,
      "read_at": "2023-05-25T11:20:00+00:00",
      "importance": 1,
      "entity_type": "dossier",
      "entity_id": 456
    }
  ],
  "pagination": {
    "total_items": 25,
    "total_pages": 3,
    "current_page": 1,
    "items_per_page": 10
  },
  "unread_count": 8
}
```

#### Marquer une notification comme lue

```http
PUT /api/elaska/v1/notifications/{id}/read
```

**Paramètres:**
- `id` (obligatoire): ID de la notification

**Réponse:**
```json
{
  "success": true,
  "message": "Notification marquée comme lue",
  "data": {
    "id": 9876,
    "read": true,
    "read_at": "2023-05-27T16:10:00+00:00"
  }
}
```

## Gestion des Erreurs

Toutes les API suivent des conventions de gestion d'erreur standardisées:

### Structure des erreurs

```json
{
  "error": true,
  "code": "ERROR_CODE",
  "message": "Description de l'erreur",
  "details": {
    "field": "champ_concerné",
    "reason": "raison_spécifique"
  }
}
```

### Codes d'erreur HTTP courants

| Code | Description | Cas d'utilisation |
|------|-------------|------------------|
| 400 | Bad Request | Paramètres manquants ou invalides |
| 401 | Unauthorized | Authentification manquante ou invalide |
| 403 | Forbidden | Authentification valide mais permissions insuffisantes |
| 404 | Not Found | Ressource non trouvée |
| 422 | Unprocessable Entity | Validation échouée |
| 429 | Too Many Requests | Limite de débit dépassée |
| 500 | Internal Server Error | Erreur interne du serveur |

### Exemples d'erreurs

#### Erreur d'authentification

```http
HTTP/1.1 401 Unauthorized
```
```json
{
  "error": true,
  "code": "AUTH_FAILED",
  "message": "Authentification non valide ou expirée"
}
```

#### Ressource non trouvée

```http
HTTP/1.1 404 Not Found
```
```json
{
  "error": true,
  "code": "RESOURCE_NOT_FOUND",
  "message": "Le dossier demandé n'existe pas",
  "details": {
    "resource_type": "dossier",
    "resource_id": "456"
  }
}
```

#### Validation échouée

```http
HTTP/1.1 422 Unprocessable Entity
```
```json
{
  "error": true,
  "code": "VALIDATION_FAILED",
  "message": "Les données fournies ne sont pas valides",
  "details": {
    "fields": {
      "subject": "Le sujet est obligatoire",
      "content": "Le contenu doit contenir au moins 10 caractères"
    }
  }
}
```

## Limites de débit (Rate Limiting)

Pour assurer la stabilité du service, les API sont soumises à des limites de débit:

- **API client standard**: 100 requêtes/minute
- **API portail client**: 60 requêtes/minute par utilisateur
- **API coffre-fort sécurisé**: 30 requêtes/minute par utilisateur

Les en-têtes suivants sont inclus dans chaque réponse pour informer sur la limite de débit:

```
X-RateLimit-Limit: 100
X-RateLimit-Remaining: 95
X-RateLimit-Reset: 1622127600
```

En cas de dépassement, une erreur 429 est renvoyée avec le temps d'attente recommandé:

```http
HTTP/1.1 429 Too Many Requests
Retry-After: 30
```
```json
{
  "error": true,
  "code": "RATE_LIMIT_EXCEEDED",
  "message": "Trop de requêtes, veuillez réessayer dans 30 secondes",
  "details": {
    "retry_after_seconds": 30
  }
}
```

## Recommandations

1. **Mise en cache**: Utilisez les en-têtes HTTP de cache pour optimiser les performances.
2. **Pagination**: Utilisez toujours la pagination pour les listes de ressources.
3. **Champs sélectifs**: Pour les grands objets, utilisez le paramètre `fields` pour limiter la taille des réponses.
4. **Compression**: Activez la compression gzip pour réduire la taille des réponses.
5. **Authentification**: Ne stockez jamais les tokens JWT côté serveur, ils sont conçus pour être vérifiés sans état.
```

## 9. MISES À JOUR ET ÉVOLUTIONS

### 9.1. Feuille de route

Le module eLaska-ESaiko suivra un plan de développement sur les prochaines versions pour enrichir les fonctionnalités et améliorer les performances.

**Spécifications techniques:**

```markdown
# Feuille de Route eLaska-ESaiko

## Versionnement

Le module eLaska-ESaiko suit une stratégie de versionnement sémantique (SemVer):

- **Versions majeures (X.0.0)**: Changements incompatibles avec les versions précédentes
- **Versions mineures (0.X.0)**: Nouvelles fonctionnalités rétrocompatibles
- **Versions correctives (0.0.X)**: Corrections de bugs sans ajout de fonctionnalités

La compatibilité des versions majeures avec Dolibarr:
- **v1.x**: Compatible avec Dolibarr 15.0.x - 16.0.x
- **v2.x**: Compatible avec Dolibarr 16.0.x - 17.0.x
- **v3.x**: Compatible avec Dolibarr 17.0.x - 18.0.x

## Version Actuelle: v1.0.0 (Mai 2023)

### Fonctionnalités Clés
- Gestion des dossiers clients multi-types
- Timelines interactives et modulaires
- Portail client React avec interface moderne
- Système de messagerie interne avec notifications
- Coffre-fort numérique sécurisé
- Module dédié aux objectifs de vie (particuliers)
- Module dédié aux subventions (associations)
- Module parcours création (créateurs d'entreprise)

## v1.1.0 (Prévu: Q3 2023)

### Nouvelles Fonctionnalités
- **Signature électronique**: Intégration avec DocuSign et Yousign pour la signature de documents
- **Tableaux de bord personnalisables**: Widgets configurables sur le portail client
- **Application mobile**: Version hybride (iOS/Android) du portail client
- **Intégration CRM**: Synchronisation avancée avec les fonctions CRM de Dolibarr

### Améliorations
- **Performance du portail client**: Optimisations React et mise en cache avancée
- **Personnalisation des workflows**: Interface graphique pour la création de workflows
- **Notifications push**: Support des notifications push sur navigateurs et mobile
- **Sécurité renforcée**: Options d'authentification forte supplémentaires

### Corrections Techniques
- Optimisation des requêtes SQL pour grands volumes de données
- Refactorisation du système de chargement des modules dynamiques
- Correction des problèmes d'affichage sur certains navigateurs mobiles

## v1.2.0 (Prévu: Q1 2024)

### Nouvelles Fonctionnalités
- **Module Diagnostic 360°**: Outil d'analyse complète de situation client
- **Intelligence Artificielle**: Assistant IA pour l'analyse des documents clients
- **Scoring clients**: Système automatisé d'évaluation de l'état des dossiers
- **Chat en direct**: Support du chat en direct dans le portail client

### Améliorations
- **Interface d'administration**: Nouvel outil de configuration centralisé
- **Rapports et statistiques**: Tableaux de bord analytiques avancés
- **Automatisation accrue**: Règles de workflow plus puissantes
- **Connecteurs externes**: Intégration avec plus de services tiers

## v2.0.0 (Prévu: Q3 2024)

### Changements Majeurs
- **Architecture restructurée**: Passage à une architecture microservices
- **API GraphQL**: Ajout d'une API GraphQL pour plus de flexibilité
- **UX repensée**: Refonte complète de l'interface utilisateur
- **Multi-entités avancé**: Support amélioré des structures multi-entités

### Nouvelles Fonctionnalités
- **Moteur de règles métier**: Interface de programmation visuelle des règles
- **Analyses prédictives**: Modèles d'IA pour prévisions business
- **Centre de connaissances**: Base documentaire structurée pour clients
- **Module questionnaires**: Création de formulaires et questionnaires interactifs

### Améliorations Techniques
- **Performances**: Refactorisation complète pour optimisation
- **Sécurité**: Conformité avec les normes les plus récentes
- **Architecture**: Passage à une architecture modulaire plus avancée
- **Tests**: Extension de la couverture des tests automatisés

## v3.0.0 (Prévu: 2025)

### Vision à Long Terme
- **Plateforme étendue**: Transformation en plateforme complète de services financiers
- **IA générative**: Assistant conversationnel pour clients et gestionnaires
- **Automatisation cognitive**: Détection intelligente d'opportunités business
- **Hub d'intégration**: Écosystème ouvert avec marketplace d'extensions

### Technologies Explorées
- **Blockchain**: Sécurisation des transactions et documents sensibles
- **Edge Computing**: Optimisation des performances pour les clients internationaux
- **Analytics temps réel**: Traitement temps réel des données financières
- **Réalité augmentée**: Visualisation avancée des données financières

## Priorisation et Méthodologie

### Critères de Priorisation
1. **Valeur client**: Impact direct sur l'expérience utilisateur
2. **Efficacité opérationnelle**: Gains de productivité pour les utilisateurs
3. **Alignement stratégique**: Cohérence avec la vision produit
4. **Faisabilité technique**: Complexité vs ressources disponibles
5. **Exigences réglementaires**: Conformité aux évolutions législatives

### Méthodologie de Développement
- **Sprints de 3 semaines**: Cycles de développement courts et itératifs
- **Releases trimestrielles**: Déploiement régulier des nouvelles versions
- **Bêta-testeurs**: Programme de bêta-testing avec clients partenaires
- **Feedback continu**: Mécanismes de collecte et intégration du feedback

### Engagement Qualité
- **Tests automatisés**: Couverture minimale de 80% du code
- **Revue de code**: Processus systématique de revue par les pairs
- **Documentation**: Documentation technique et utilisateur maintenue à jour
- **Performance**: Benchmarks réguliers et optimisations

## Suggestions et Contributions

Nous encourageons nos utilisateurs et partenaires à contribuer à cette feuille de route:

- **Suggestions de fonctionnalités**: Formulaire dédié sur notre site web
- **Signalement de bugs**: Système de tickets intégré au portail support
- **Contributions directes**: Pull requests possibles sur notre dépôt GitHub
- **Programme partenaires**: Possibilités d'intégration et de co-développement

Pour soumettre vos idées ou participer au développement:
- Email: roadmap@elaska-esaiko.com
- Portail développeurs: https://dev.elaska-esaiko.com
```

### 9.2. Procédure de mise à jour

Le module eLaska-ESaiko implémente un système de mise à jour structuré pour assurer la continuité de service et la sécurité des données.

**Spécifications techniques:**

```php
/**
 * Classe de gestion des mises à jour du module
 */
class ElaskaUpdateManager
{
    /**
     * @var DoliDB Database handler
     */
    private $db;
    
    /**
     * @var string Module version actuelle
     */
    private $currentVersion;
    
    /**
     * @var string Module version cible
     */
    private $targetVersion;
    
    /**
     * @var array Étapes de mise à jour
     */
    private $updateSteps = array();
    
    /**
     * @var array Journal des opérations de mise à jour
     */
    private $updateLog = array();
    
    /**
     * Constructor
     *
     * @param DoliDB $db Database handler
     * @param string $currentVersion Version actuelle du module
     * @param string $targetVersion Version cible du module
     */
    public function __construct($db, $currentVersion, $targetVersion)
    {
        $this->db = $db;
        $this->currentVersion = $currentVersion;
        $this->targetVersion = $targetVersion;
        
        $this->loadUpdateSteps();
    }
    
    /**
     * Charge les étapes de mise à jour nécessaires
     */
    private function loadUpdateSteps()
    {
        // Déterminer le chemin de mise à jour
        $path = $this->getUpdatePath();
        
        // Structures nécessaires pour toutes les versions
        $requiredSteps = array(
            'check_requirements',
            'backup_database',
            'update_tables',
            'migrate_data',
            'update_version'
        );
        
        // Charger la configuration de mise à jour
        $updateConfig = $this->loadUpdateConfig($path);
        
        // Initialiser les étapes de mise à jour
        foreach ($requiredSteps as $step) {
            $this->updateSteps[$step] = array(
                'name' => $step,
                'status' => 'pending',
                'message' => '',
                'startTime' => null,
                'endTime' => null
            );
        }
        
        // Ajouter les étapes spécifiques à cette mise à jour
        if (!empty($updateConfig['specific_steps'])) {
            foreach ($updateConfig['specific_steps'] as $specificStep) {
                $this->updateSteps[$specificStep['name']] = array(
                    'name' => $specificStep['name'],
                    'status' => 'pending',
                    'message' => '',
                    'startTime' => null,
                    'endTime' => null,
                    'specific' => true,
                    'details' => $specificStep
                );
            }
        }
    }
    
    /**
     * Détermine le chemin de mise à jour
     *
     * @return string Chemin de mise à jour (ex: 'v1.0.0_to_v1.1.0')
     */
    private function getUpdatePath()
    {
        return 'v' . $this->currentVersion . '_to_v' . $this->targetVersion;
    }
    
    /**
     * Charge la configuration de mise à jour
     *
     * @param string $path Chemin de mise à jour
     * @return array Configuration de mise à jour
     */
    private function loadUpdateConfig($path)
    {
        $configFile = __DIR__ . '/../update/' . $path . '/config.php';
        
        if (file_exists($configFile)) {
            include $configFile;
            
            if (isset($updateConfig) && is_array($updateConfig)) {
                return $updateConfig;
            }
        }
        
        return array();
    }
    
    /**
     * Vérifie les prérequis pour la mise à jour
     *
     * @return bool True si les prérequis sont satisfaits
     */
    public function checkRequirements()
    {
        $this->startStep('check_requirements');
        
        try {
            // Vérifier la version de PHP
            if (version_compare(PHP_VERSION, '7.4.0', '<')) {
                throw new Exception("Version PHP minimale requise: 7.4.0. Version actuelle: " . PHP_VERSION);
            }
            
            // Vérifier la version de MySQL
            $sql = "SELECT VERSION() as version";
            $resql = $this->db->query($sql);
            if ($resql) {
                $obj = $this->db->fetch_object($resql);
                $mysqlVersion = $obj->version;
                
                if (version_compare($mysqlVersion, '5.7.0', '<')) {
                    throw new Exception("Version MySQL minimale requise: 5.7.0. Version actuelle: " . $mysqlVersion);
                }
            }
            
            // Vérifier les extensions PHP requises
            $requiredExtensions = array('curl', 'gd', 'intl', 'zip', 'xml', 'mbstring');
            foreach ($requiredExtensions as $ext) {
                if (!extension_loaded($ext)) {
                    throw new Exception("Extension PHP requise non disponible: " . $ext);
                }
            }
            
            // Vérifier les droits d'écriture
         ```php
                $writableDirs = array(
                    DOL_DOCUMENT_ROOT . '/custom/elaska',
                    DOL_DOCUMENT_ROOT . '/custom/elaska/temp',
                    DOL_DOCUMENT_ROOT . '/documents/elaska'
                );
                
                foreach ($writableDirs as $dir) {
                    if (!is_writable($dir)) {
                        throw new Exception("Répertoire non accessible en écriture: " . $dir);
                    }
                }
                
                // Vérifier l'espace disque
                $requiredSpace = 500 * 1024 * 1024; // 500 Mo
                $availableSpace = disk_free_space(DOL_DOCUMENT_ROOT);
                
                if ($availableSpace < $requiredSpace) {
                    throw new Exception("Espace disque insuffisant. Requis: 500 Mo, Disponible: " . round($availableSpace / (1024 * 1024), 2) . " Mo");
                }
                
                // Vérifier les droits de base de données
                $requiredPermissions = array(
                    'CREATE TABLE' => "CREATE TABLE IF NOT EXISTS `llx_elaska_test_perm` (id int(11) NOT NULL) ENGINE=InnoDB",
                    'ALTER TABLE' => "ALTER TABLE `llx_elaska_test_perm` ADD COLUMN test_col int(11)",
                    'CREATE INDEX' => "ALTER TABLE `llx_elaska_test_perm` ADD INDEX idx_test (id)",
                    'DROP' => "DROP TABLE `llx_elaska_test_perm`"
                );
                
                foreach ($requiredPermissions as $permission => $sql) {
                    $resql = $this->db->query($sql);
                    if (!$resql) {
                        throw new Exception("Permission SQL insuffisante: " . $permission . ". Erreur: " . $this->db->lasterror());
                    }
                }
                
                $this->completeStep('check_requirements', true, "Tous les prérequis sont satisfaits");
                return true;
            } catch (Exception $e) {
                $this->completeStep('check_requirements', false, "Erreur: " . $e->getMessage());
                return false;
            }
    }
    
    /**
     * Effectue une sauvegarde de la base de données
     *
     * @return bool True si la sauvegarde a réussi
     */
    public function backupDatabase()
    {
        $this->startStep('backup_database');
        
        try {
            $backupDir = DOL_DOCUMENT_ROOT . '/documents/elaska/backups';
            
            // Créer le répertoire de sauvegarde s'il n'existe pas
            if (!file_exists($backupDir)) {
                if (!mkdir($backupDir, 0755, true)) {
                    throw new Exception("Impossible de créer le répertoire de sauvegarde");
                }
            }
            
            // Générer un nom de fichier unique
            $backupFile = $backupDir . '/elaska_backup_' . $this->currentVersion . '_to_' . 
                          $this->targetVersion . '_' . date('Y-m-d_H-i-s') . '.sql';
            
            // Exporter tables concernées
            $tables = $this->getModuleTables();
            $backupContent = "-- eLaska-ESaiko Module Backup\n";
            $backupContent .= "-- From version " . $this->currentVersion . " to " . $this->targetVersion . "\n";
            $backupContent .= "-- Date: " . date('Y-m-d H:i:s') . "\n\n";
            
            foreach ($tables as $table) {
                // Structure
                $sql = "SHOW CREATE TABLE " . $table;
                $resql = $this->db->query($sql);
                
                if ($resql && $this->db->num_rows($resql) > 0) {
                    $obj = $this->db->fetch_array($resql);
                    $createTable = $obj['Create Table'];
                    $backupContent .= $createTable . ";\n\n";
                    
                    // Données
                    $sql = "SELECT * FROM " . $table;
                    $resql = $this->db->query($sql);
                    
                    if ($resql && $this->db->num_rows($resql) > 0) {
                        $num = $this->db->num_rows($resql);
                        
                        if ($num > 0) {
                            $backupContent .= "INSERT INTO " . $table . " VALUES ";
                            $i = 0;
                            
                            while ($obj = $this->db->fetch_array($resql)) {
                                $values = array();
                                
                                foreach ($obj as $value) {
                                    if ($value === null) {
                                        $values[] = "NULL";
                                    } else {
                                        $values[] = "'" . $this->db->escape($value) . "'";
                                    }
                                }
                                
                                $backupContent .= "(" . implode(", ", $values) . ")";
                                
                                if ($i < $num - 1) {
                                    $backupContent .= ",\n";
                                } else {
                                    $backupContent .= ";\n\n";
                                }
                                
                                $i++;
                            }
                        }
                    }
                }
            }
            
            // Écrire le fichier de sauvegarde
            if (file_put_contents($backupFile, $backupContent) === false) {
                throw new Exception("Impossible d'écrire le fichier de sauvegarde");
            }
            
            $this->completeStep('backup_database', true, "Sauvegarde de la base de données réussie: " . basename($backupFile));
            return true;
        } catch (Exception $e) {
            $this->completeStep('backup_database', false, "Erreur: " . $e->getMessage());
            return false;
        }
    }
    
    /**
     * Récupère la liste des tables du module
     *
     * @return array Liste des tables du module
     */
    private function getModuleTables()
    {
        $tables = array();
        
        $sql = "SHOW TABLES LIKE 'llx_elaska_%'";
        $resql = $this->db->query($sql);
        
        if ($resql) {
            while ($obj = $this->db->fetch_array($resql)) {
                $tables[] = $obj[0];
            }
        }
        
        return $tables;
    }
    
    /**
     * Met à jour la structure des tables
     *
     * @return bool True si la mise à jour a réussi
     */
    public function updateTables()
    {
        $this->startStep('update_tables');
        
        try {
            $updatePath = $this->getUpdatePath();
            $sqlFile = __DIR__ . '/../update/' . $updatePath . '/tables.sql';
            
            if (file_exists($sqlFile)) {
                $sqlContent = file_get_contents($sqlFile);
                $sqlQueries = explode(';', $sqlContent);
                
                foreach ($sqlQueries as $sql) {
                    $sql = trim($sql);
                    
                    if (!empty($sql)) {
                        $resql = $this->db->query($sql);
                        
                        if (!$resql) {
                            throw new Exception("Erreur lors de l'exécution de la requête SQL: " . $sql . ". Erreur: " . $this->db->lasterror());
                        }
                    }
                }
                
                $this->completeStep('update_tables', true, "Mise à jour des tables réussie");
            } else {
                $this->completeStep('update_tables', true, "Aucune mise à jour de tables nécessaire");
            }
            
            return true;
        } catch (Exception $e) {
            $this->completeStep('update_tables', false, "Erreur: " . $e->getMessage());
            return false;
        }
    }
    
    /**
     * Migre les données
     *
     * @return bool True si la migration a réussi
     */
    public function migrateData()
    {
        $this->startStep('migrate_data');
        
        try {
            $updatePath = $this->getUpdatePath();
            $migrationFile = __DIR__ . '/../update/' . $updatePath . '/migrate.php';
            
            if (file_exists($migrationFile)) {
                include $migrationFile;
                
                if (function_exists('elaska_migrate_data')) {
                    $result = elaska_migrate_data($this->db, $this);
                    
                    if ($result !== true) {
                        throw new Exception("Échec de la migration des données: " . $result);
                    }
                    
                    $this->completeStep('migrate_data', true, "Migration des données réussie");
                } else {
                    throw new Exception("Fonction de migration non trouvée");
                }
            } else {
                $this->completeStep('migrate_data', true, "Aucune migration de données nécessaire");
            }
            
            return true;
        } catch (Exception $e) {
            $this->completeStep('migrate_data', false, "Erreur: " . $e->getMessage());
            return false;
        }
    }
    
    /**
     * Met à jour la version du module
     *
     * @return bool True si la mise à jour a réussi
     */
    public function updateVersion()
    {
        $this->startStep('update_version');
        
        try {
            global $conf;
            
            // Mettre à jour la version dans la base de données
            dolibarr_set_const($this->db, 'ELASKA_MODULE_VERSION', $this->targetVersion, 'chaine', 0, '', $conf->entity);
            
            // Mettre à jour le fichier de version
            $versionFile = __DIR__ . '/../core/version.php';
            $versionContent = "<?php\n";
            $versionContent .= "// Version du module eLaska-ESaiko\n";
            $versionContent .= "\$module_version = '" . $this->targetVersion . "';\n";
            $versionContent .= "\$module_version_date = '" . date('Y-m-d') . "';\n";
            
            if (file_put_contents($versionFile, $versionContent) === false) {
                throw new Exception("Impossible d'écrire le fichier de version");
            }
            
            $this->completeStep('update_version', true, "Version mise à jour: " . $this->targetVersion);
            return true;
        } catch (Exception $e) {
            $this->completeStep('update_version', false, "Erreur: " . $e->getMessage());
            return false;
        }
    }
    
    /**
     * Exécute les étapes spécifiques à cette mise à jour
     *
     * @param string $stepName Nom de l'étape
     * @return bool True si l'étape a réussi
     */
    public function executeSpecificStep($stepName)
    {
        if (!isset($this->updateSteps[$stepName]) || empty($this->updateSteps[$stepName]['specific'])) {
            return false;
        }
        
        $this->startStep($stepName);
        
        try {
            $step = $this->updateSteps[$stepName];
            $updatePath = $this->getUpdatePath();
            $stepFile = __DIR__ . '/../update/' . $updatePath . '/' . $stepName . '.php';
            
            if (file_exists($stepFile)) {
                include $stepFile;
                
                $functionName = 'elaska_update_' . $stepName;
                
                if (function_exists($functionName)) {
                    $result = $functionName($this->db, $this, $step['details']);
                    
                    if ($result !== true) {
                        throw new Exception("Échec de l'étape spécifique: " . $result);
                    }
                    
                    $this->completeStep($stepName, true, "Étape spécifique réussie");
                } else {
                    throw new Exception("Fonction spécifique non trouvée: " . $functionName);
                }
            } else {
                throw new Exception("Fichier d'étape spécifique non trouvé: " . $stepFile);
            }
            
            return true;
        } catch (Exception $e) {
            $this->completeStep($stepName, false, "Erreur: " . $e->getMessage());
            return false;
        }
    }
    
    /**
     * Exécute toute la procédure de mise à jour
     *
     * @return array Résultats de la mise à jour
     */
    public function runUpdate()
    {
        $result = array(
            'success' => true,
            'steps' => array(),
            'log' => array()
        );
        
        // Vérifier que la version cible est supérieure à la version actuelle
        if (version_compare($this->targetVersion, $this->currentVersion, '<=')) {
            $result['success'] = false;
            $result['error'] = "La version cible (" . $this->targetVersion . ") doit être supérieure à la version actuelle (" . $this->currentVersion . ")";
            return $result;
        }
        
        // Étapes requises
        if (!$this->checkRequirements()) {
            $result['success'] = false;
            $result['error'] = "Prérequis non satisfaits";
            $result['steps'] = $this->getStepsStatus();
            $result['log'] = $this->updateLog;
            return $result;
        }
        
        if (!$this->backupDatabase()) {
            $result['success'] = false;
            $result['error'] = "Échec de la sauvegarde de la base de données";
            $result['steps'] = $this->getStepsStatus();
            $result['log'] = $this->updateLog;
            return $result;
        }
        
        // Étapes spécifiques
        foreach ($this->updateSteps as $stepName => $step) {
            if (!empty($step['specific'])) {
                if (!$this->executeSpecificStep($stepName)) {
                    $result['success'] = false;
                    $result['error'] = "Échec de l'étape spécifique: " . $stepName;
                    $result['steps'] = $this->getStepsStatus();
                    $result['log'] = $this->updateLog;
                    return $result;
                }
            }
        }
        
        // Étapes finales
        if (!$this->updateTables()) {
            $result['success'] = false;
            $result['error'] = "Échec de la mise à jour des tables";
            $result['steps'] = $this->getStepsStatus();
            $result['log'] = $this->updateLog;
            return $result;
        }
        
        if (!$this->migrateData()) {
            $result['success'] = false;
            $result['error'] = "Échec de la migration des données";
            $result['steps'] = $this->getStepsStatus();
            $result['log'] = $this->updateLog;
            return $result;
        }
        
        if (!$this->updateVersion()) {
            $result['success'] = false;
            $result['error'] = "Échec de la mise à jour de version";
            $result['steps'] = $this->getStepsStatus();
            $result['log'] = $this->updateLog;
            return $result;
        }
        
        $result['steps'] = $this->getStepsStatus();
        $result['log'] = $this->updateLog;
        $result['message'] = "Mise à jour de la version " . $this->currentVersion . " vers la version " . $this->targetVersion . " réussie";
        
        return $result;
    }
    
    /**
     * Démarre une étape de mise à jour
     *
     * @param string $stepName Nom de l'étape
     */
    private function startStep($stepName)
    {
        if (isset($this->updateSteps[$stepName])) {
            $this->updateSteps[$stepName]['status'] = 'running';
            $this->updateSteps[$stepName]['startTime'] = time();
            
            $this->log("Démarrage de l'étape: " . $stepName);
        }
    }
    
    /**
     * Termine une étape de mise à jour
     *
     * @param string $stepName Nom de l'étape
     * @param bool $success Succès ou échec
     * @param string $message Message de résultat
     */
    private function completeStep($stepName, $success, $message)
    {
        if (isset($this->updateSteps[$stepName])) {
            $this->updateSteps[$stepName]['status'] = $success ? 'completed' : 'failed';
            $this->updateSteps[$stepName]['endTime'] = time();
            $this->updateSteps[$stepName]['message'] = $message;
            
            $this->log(($success ? "Succès" : "Échec") . " de l'étape " . $stepName . ": " . $message);
        }
    }
    
    /**
     * Récupère le statut de toutes les étapes
     *
     * @return array Statut des étapes
     */
    public function getStepsStatus()
    {
        return $this->updateSteps;
    }
    
    /**
     * Ajoute une entrée au journal de mise à jour
     *
     * @param string $message Message à journaliser
     */
    public function log($message)
    {
        $this->updateLog[] = array(
            'time' => date('Y-m-d H:i:s'),
            'message' => $message
        );
    }
}
```

### 9.3. Script d'auto-diagnostic

Le module eLaska-ESaiko inclut un système d'auto-diagnostic pour détecter et résoudre les problèmes courants.

**Spécifications techniques:**

```php
/**
 * Classe de diagnostic automatique du module
 */
class ElaskaDiagnostics
{
    /**
     * @var DoliDB Database handler
     */
    private $db;
    
    /**
     * @var array Résultats des diagnostics
     */
    private $results = array();
    
    /**
     * @var array Problèmes détectés
     */
    private $issues = array();
    
    /**
     * Constructor
     *
     * @param DoliDB $db Database handler
     */
    public function __construct($db)
    {
        $this->db = $db;
    }
    
    /**
     * Exécute tous les diagnostics
     *
     * @return array Résultats des diagnostics
     */
    public function runAllDiagnostics()
    {
        $this->checkDatabaseStructure();
        $this->checkFilePermissions();
        $this->checkConfiguration();
        $this->checkAPIs();
        $this->checkSecuritySettings();
        $this->checkPerformance();
        
        return array(
            'results' => $this->results,
            'issues' => $this->issues,
            'summary' => $this->getSummary()
        );
    }
    
    /**
     * Vérifie la structure de la base de données
     */
    public function checkDatabaseStructure()
    {
        $category = 'database';
        $this->initCategory($category, "Structure de la base de données");
        
        // 1. Vérifier que toutes les tables nécessaires existent
        $requiredTables = array(
            'llx_elaska_dossier',
            'llx_elaska_client_info',
            'llx_elaska_timeline',
            'llx_elaska_timeline_etape',
            'llx_elaska_objectif_vie',
            'llx_elaska_patrimoine',
            'llx_elaska_rdv',
            'llx_elaska_communication',
            'llx_elaska_tag',
            'llx_elaska_audit_log'
            // etc.
        );
        
        $missingTables = array();
        foreach ($requiredTables as $table) {
            $sql = "SHOW TABLES LIKE '" . $table . "'";
            $resql = $this->db->query($sql);
            
            if (!$resql || $this->db->num_rows($resql) == 0) {
                $missingTables[] = $table;
            }
        }
        
        if (empty($missingTables)) {
            $this->addResult($category, 'tables_check', 'success', "Toutes les tables requises existent");
        } else {
            $this->addResult($category, 'tables_check', 'error', "Tables manquantes: " . implode(', ', $missingTables));
            $this->addIssue('database', 'missing_tables', "Tables manquantes", "Des tables nécessaires au module sont manquantes", 'high', $this->getFixDatabaseTablesInstructions($missingTables));
        }
        
        // 2. Vérifier les index critiques
        $criticalIndexes = array(
            'llx_elaska_dossier' => array('idx_elaska_dossier_fk_soc'),
            'llx_elaska_communication' => array('idx_elaska_communication_fk_soc', 'idx_elaska_communication_date_comm'),
            'llx_elaska_audit_log' => array('idx_elaska_audit_log_audit_date')
        );
        
        $missingIndexes = array();
        foreach ($criticalIndexes as $table => $indexes) {
            foreach ($indexes as $index) {
                $sql = "SHOW INDEX FROM " . $table . " WHERE Key_name = '" . $index . "'";
                $resql = $this->db->query($sql);
                
                if (!$resql || $this->db->num_rows($resql) == 0) {
                    if (!isset($missingIndexes[$table])) {
                        $missingIndexes[$table] = array();
                    }
                    $missingIndexes[$table][] = $index;
                }
            }
        }
        
        if (empty($missingIndexes)) {
            $this->addResult($category, 'indexes_check', 'success', "Tous les index critiques existent");
        } else {
            $issues = array();
            foreach ($missingIndexes as $table => $indexes) {
                $issues[] = $table . ': ' . implode(', ', $indexes);
            }
            
            $this->addResult($category, 'indexes_check', 'warning', "Index manquants: " . implode('; ', $issues));
            $this->addIssue('database', 'missing_indexes', "Index manquants", "Des index critiques pour la performance sont manquants", 'medium', $this->getFixDatabaseIndexesInstructions($missingIndexes));
        }
        
        // 3. Vérifier l'intégrité des données
        $this->checkDataIntegrity();
    }
    
    /**
     * Vérifie l'intégrité des données
     */
    private function checkDataIntegrity()
    {
        $category = 'database';
        
        // 1. Dossiers sans client valide
        $sql = "SELECT COUNT(*) as count FROM llx_elaska_dossier d";
        $sql .= " LEFT JOIN llx_societe s ON d.fk_soc = s.rowid";
        $sql .= " WHERE d.fk_soc IS NOT NULL AND s.rowid IS NULL";
        
        $resql = $this->db->query($sql);
        if ($resql && ($obj = $this->db->fetch_object($resql))) {
            if ($obj->count == 0) {
                $this->addResult($category, 'orphan_dossiers', 'success', "Aucun dossier orphelin détecté");
            } else {
                $this->addResult($category, 'orphan_dossiers', 'warning', "Dossiers orphelins détectés: " . $obj->count);
                $this->addIssue('database', 'orphan_dossiers', "Dossiers orphelins", "Des dossiers sont liés à des clients qui n'existent plus", 'medium', $this->getFixOrphanDossiersInstructions());
            }
        }
        
        // 2. Étapes de timeline sans timeline valide
        $sql = "SELECT COUNT(*) as count FROM llx_elaska_timeline_etape e";
        $sql .= " LEFT JOIN llx_elaska_timeline t ON e.fk_timeline = t.rowid";
        $sql .= " WHERE e.fk_timeline IS NOT NULL AND t.rowid IS NULL";
        
        $resql = $this->db->query($sql);
        if ($resql && ($obj = $this->db->fetch_object($resql))) {
            if ($obj->count == 0) {
                $this->addResult($category, 'orphan_timeline_steps', 'success', "Aucune étape de timeline orpheline détectée");
            } else {
                $this->addResult($category, 'orphan_timeline_steps', 'warning', "Étapes de timeline orphelines détectées: " . $obj->count);
                $this->addIssue('database', 'orphan_timeline_steps', "Étapes orphelines", "Des étapes de timeline sont liées à des timelines qui n'existent plus", 'low', $this->getFixOrphanTimelineStepsInstructions());
            }
        }
        
        // 3. Incohérences utilisateurs/conseillers
        $sql = "SELECT COUNT(*) as count FROM llx_elaska_dossier d";
        $sql .= " LEFT JOIN llx_user u ON d.fk_user_responsable = u.rowid";
        $sql .= " WHERE d.fk_user_responsable IS NOT NULL AND u.rowid IS NULL";
        
        $resql = $this->db->query($sql);
        if ($resql && ($obj = $this->db->fetch_object($resql))) {
            if ($obj->count == 0) {
                $this->addResult($category, 'invalid_responsable', 'success', "Aucun responsable de dossier invalide détecté");
            } else {
                $this->addResult($category, 'invalid_responsable', 'error', "Dossiers avec responsables invalides détectés: " . $obj->count);
                $this->addIssue('database', 'invalid_responsable', "Responsables invalides", "Des dossiers sont assignés à des utilisateurs qui n'existent plus", 'high', $this->getFixInvalidResponsableInstructions());
            }
        }
    }
    
    /**
     * Vérifie les permissions des fichiers
     */
    public function checkFilePermissions()
    {
        $category = 'filesystem';
        $this->initCategory($category, "Permissions des fichiers");
        
        // Répertoires critiques qui doivent être accessibles en écriture
        $criticalDirs = array(
            DOL_DOCUMENT_ROOT . '/custom/elaska/temp',
            DOL_DOCUMENT_ROOT . '/documents/elaska',
            DOL_DOCUMENT_ROOT . '/documents/elaska/backups',
            DOL_DOCUMENT_ROOT . '/documents/elaska/vault',
            DOL_DOCUMENT_ROOT . '/documents/elaska/exports'
        );
        
        $notWritable = array();
        foreach ($criticalDirs as $dir) {
            if (!file_exists($dir)) {
                // Essayer de créer le répertoire
                if (!@mkdir($dir, 0755, true)) {
                    $notWritable[] = $dir . " (n'existe pas et ne peut pas être créé)";
                }
            } elseif (!is_writable($dir)) {
                $notWritable[] = $dir;
            }
        }
        
        if (empty($notWritable)) {
            $this->addResult($category, 'dir_permissions', 'success', "Tous les répertoires critiques sont accessibles en écriture");
        } else {
            $this->addResult($category, 'dir_permissions', 'error', "Répertoires non accessibles en écriture: " . implode(', ', $notWritable));
            $this->addIssue('filesystem', 'dir_permissions', "Permissions insuffisantes", "Certains répertoires critiques ne sont pas accessibles en écriture", 'high', $this->getFixFilePermissionsInstructions($notWritable));
        }
        
        // Vérifier les fichiers de configuration
        $configFile = DOL_DOCUMENT_ROOT . '/custom/elaska/config/elaska.config.php';
        if (!file_exists($configFile)) {
            $this->addResult($category, 'config_file', 'error', "Fichier de configuration manquant: " . $configFile);
            $this->addIssue('filesystem', 'config_file', "Configuration manquante", "Le fichier de configuration principal est manquant", 'critical', $this->getFixConfigFileInstructions());
        } else {
            $this->addResult($category, 'config_file', 'success', "Fichier de configuration trouvé");
        }
        
        // Vérifier l'intégrité des fichiers du module
        $this->checkFileIntegrity();
    }
    
    /**
     * Vérifie l'intégrité des fichiers du module
     */
    private function checkFileIntegrity()
    {
        $category = 'filesystem';
        
        // Fichiers critiques qui doivent exister
        $criticalFiles = array(
            DOL_DOCUMENT_ROOT . '/custom/elaska/core/modules/modElaska.class.php',
            DOL_DOCUMENT_ROOT . '/custom/elaska/class/api/rest.class.php',
            DOL_DOCUMENT_ROOT . '/custom/elaska/portail/build/index.html'
        );
        
        $missingFiles = array();
        foreach ($criticalFiles as $file) {
            if (!file_exists($file)) {
                $missingFiles[] = $file;
            }
        }
        
        if (empty($missingFiles)) {
            $this->addResult($category, 'file_integrity', 'success', "Tous les fichiers critiques sont présents");
        } else {
            $this->addResult($category, 'file_integrity', 'error', "Fichiers critiques manquants: " . implode(', ', $missingFiles));
            $this->addIssue('filesystem', 'file_integrity', "Fichiers manquants", "Des fichiers critiques du module sont manquants", 'critical', $this->getFixMissingFilesInstructions($missingFiles));
        }
        
        // Vérifier la présence du build du portail client
        $portalIndexFile = DOL_DOCUMENT_ROOT . '/custom/elaska/portail/build/index.html';
        if (file_exists($portalIndexFile)) {
            // Vérifier la date du fichier pour voir s'il est récent
            $portalBuildTime = filemtime($portalIndexFile);
            $portalAge = time() - $portalBuildTime;
            
            if ($portalAge > (180 * 86400)) { // Plus de 6 mois
                $this->addResult($category, 'portal_build', 'warning', "Le build du portail client est ancien (plus de 6 mois)");
                $this->addIssue('filesystem', 'portal_build', "Portail obsolète", "Le build du portail client est ancien et pourrait nécessiter une mise à jour", 'medium', $this->getFixPortalBuildInstructions());
            } else {
                $this->addResult($category, 'portal_build', 'success', "Le build du portail client est à jour");
            }
        } else {
            $this->addResult($category, 'portal_build', 'error', "Le build du portail client est manquant");
            $this->addIssue('filesystem', 'portal_build', "Portail manquant", "Le build du portail client est manquant", 'critical', $this->getFixPortalBuildInstructions());
        }
    }
    
    /**
     * Vérifie la configuration du module
     */
    public function checkConfiguration()
    {
        $category = 'configuration';
        $this->initCategory($category, "Configuration du module");
        
        global $conf;
        
        // 1. Vérifier les constantes obligatoires
        $requiredConstants = array(
            'ELASKA_MODULE_VERSION',
            'ELASKA_API_KEY',
            'ELASKA_JWT_SECRET_KEY'
        );
        
        $missingConstants = array();
        foreach ($requiredConstants as $constant) {
            if (empty($conf->global->$constant)) {
                $missingConstants[] = $constant;
            }
        }
        
        if (empty($missingConstants)) {
            $this->addResult($category, 'required_constants', 'success', "Toutes les constantes requises sont définies");
        } else {
            $this->addResult($category, 'required_constants', 'error', "Constantes manquantes: " . implode(', ', $missingConstants));
            $this->addIssue('configuration', 'missing_constants', "Constantes manquantes", "Des constantes de configuration essentielles sont manquantes", 'high', $this->getFixMissingConstantsInstructions($missingConstants));
        }
        
        // 2. Vérifier la configuration de sécurité
        if (empty($conf->global->ELASKA_ENCRYPTION_MASTER_KEY)) {
            $this->addResult($category, 'encryption_config', 'error', "Clé de chiffrement maître non configurée");
            $this->addIssue('configuration', 'missing_encryption_key', "Clé de chiffrement manquante", "La clé maître de chiffrement n'est pas configurée", 'critical', $this->getFixEncryptionKeyInstructions());
        } else {
            $this->addResult($category, 'encryption_config', 'success', "Clé de chiffrement maître configurée");
        }
        
        // 3. Vérifier la configuration du portail client
        $portalConfigFile = DOL_DOCUMENT_ROOT . '/custom/elaska/portail/.env';
        if (!file_exists($portalConfigFile)) {
            $this->addResult($category, 'portal_config', 'error', "Configuration du portail client manquante");
            $this->addIssue('configuration', 'missing_portal_config', "Configuration du portail manquante", "Le fichier de configuration du portail client est manquant", 'high', $this->getFixPortalConfigInstructions());
        } else {
            $this->addResult($category, 'portal_config', 'success', "Configuration du portail client trouvée");
        }
        
        // 4. Vérifier la configuration des droits
        $this->checkPermissionsConfiguration();
    }
    
    /**
     * Vérifie la configuration des droits
     */
    private function checkPermissionsConfiguration()
    {
        $category = 'configuration';
        
        // Vérifier si les droits du module sont correctement définis
        $sql = "SELECT COUNT(*) as count FROM llx_rights_def WHERE module = 'elaska'";
        $resql = $this->db->query($sql);
        
        if ($resql && ($obj = $this->db->fetch_object($resql))) {
            if ($obj->count > 0) {
                $this->addResult($category, 'rights_config', 'success', "Droits du module correctement définis (" . $obj->count . " droits)");
            } else {
                $this->addResult($category, 'rights_config', 'error', "Droits du module non définis");
                $this->addIssue('configuration', 'missing_rights', "Droits non définis", "Les définitions de droits du module sont manquantes", 'high', $this->getFixMissingRightsInstructions());
            }
        }
        
        // Vérifier si au moins un utilisateur a des droits sur le module
        $sql = "SELECT COUNT(DISTINCT fk_user) as count FROM llx_user_rights ur";
        $sql .= " JOIN llx_rights_def rd ON ur.fk_id = rd.id";
        $sql .= " WHERE rd.module = 'elaska'";
        
        $resql = $this->db->query($sql);
        if ($resql && ($obj = $this->db->fetch_object($resql))) {
            if ($obj->count > 0) {
                $this->addResult($category, 'user_rights', 'success', "Des utilisateurs ont des droits sur le module (" . $obj->count . " utilisateurs)");
            } else {
                $this->addResult($category, 'user_rights', 'warning', "Aucun utilisateur n'a de droits sur le module");
                $this->addIssue('configuration', 'no_user_rights', "Aucun droit utilisateur", "Aucun utilisateur n'a de droits configurés pour le module", 'medium', $this->getFixNoUserRightsInstructions());
            }
        }
    }
    
    /**
     * Vérifie les APIs
     */
    public function checkAPIs()
    {
        $category = 'api';
        $this->initCategory($category, "API et connectivité");
        
        // Vérifier que le module API REST de Dolibarr est activé
        global $conf;
        if (empty($conf->api->enabled)) {
            $this->addResult($category, 'dolibarr_api', 'error', "Le module API REST de Dolibarr n'est pas activé");
            $this->addIssue('api', 'dolibarr_api_disabled', "API Dolibarr désactivée", "Le module API REST de Dolibarr doit être activé pour que le portail client fonctionne", 'critical', $this->getFixDolibarrApiInstructions());
        } else {
            $this->addResult($category, 'dolibarr_api', 'success', "Le module API REST de Dolibarr est activé");
        }
        
        // Vérifier la connectivité avec Google Calendar si configurée
        if (!empty($conf->global->ELASKA_GOOGLE_CLIENT_ID)) {
            $this->checkGoogleCalendarSetup();
        } else {
            $this->addResult($category, 'google_calendar', 'info', "L'intégration Google Calendar n'est pas configurée");
        }
    }
    
    /**
     * Vérifie la configuration de Google Calendar
     */
    private function checkGoogleCalendarSetup()
    {
        $category = 'api';
        global $conf;
        
        // Vérifier que toutes les constantes nécessaires sont définies
        $requiredGoogleConstants = array(
            'ELASKA_GOOGLE_CLIENT_ID',
            'ELASKA_GOOGLE_CLIENT_SECRET',
            'ELASKA_GOOGLE_REDIRECT_URI'
        );
        
        $missingConstants = array();
        foreach ($requiredGoogleConstants as $constant) {
            if (empty($conf->global->$constant)) {
                $missingConstants[] = $constant;
            }
        }
        
        if (empty($missingConstants)) {
            $this->addResult($category, 'google_calendar_config', 'success', "Configuration Google Calendar complète");
        } else {
            $this->addResult($category, 'google_calendar_config', 'warning', "Configuration Google Calendar incomplète: " . implode(', ', $missingConstants));
            $this->addIssue('api', 'incomplete_google_config', "Config Google incomplète", "La configuration d'intégration Google Calendar est incomplète", 'medium', $this->getFixGoogleCalendarConfigInstructions($missingConstants));
        }
        
        // Vérifier si des utilisateurs ont une connexion Google configurée
        $sql = "SELECT COUNT(*) as count FROM llx_elaska_user_config WHERE google_refresh_token IS NOT NULL AND google_refresh_token != ''";
        $resql = $this->db->query($sql);
        
        if ($resql && ($obj = $this->db->fetch_object($resql))) {
            if ($obj->count > 0) {
                $this->addResult($category, 'google_calendar_users', 'success', "Des utilisateurs ont une connexion Google Calendar configurée (" . $obj->count . " utilisateurs)");
            } else {
                $this->addResult($category, 'google_calendar_users', 'warning', "Aucun utilisateur n'a de connexion Google Calendar configurée");
                $this->addIssue('api', 'no_google_users', "Pas de connexion Google", "Aucun utilisateur n'a configuré sa connexion Google Calendar", 'medium', $this->getFixGoogleCalendarUsersInstructions());
            }
        }
    }
    
    /**
     * Vérifie les paramètres de sécurité
     */
    public function checkSecuritySettings()
    {
        $category = 'security';
        $this->initCategory($category, "Paramètres de sécurité");
        
        global $conf;
        
        // 1. Vérifier la force du JWT secret
        if (!empty($conf->global->ELASKA_JWT_SECRET_KEY)) {
            $jwtSecret = $conf->global->ELASKA_JWT_SECRET_KEY;
            $jwtSecretLength = strlen($jwtSecret);
            
            if ($jwtSecretLength < 32) {
                $this->addResult($category, 'jwt_secret_strength', 'error', "La clé JWT est trop courte (" . $jwtSecretLength . " caractères)");
                $this->addIssue('security', 'weak_jwt_secret', "Clé JWT faible", "La clé JWT est trop courte et pourrait être vulnérable", 'high', $this->getFixJwtSecretInstructions());
            } elseif ($jwtSecretLength < 64) {
                $this->addResult($category, 'jwt_secret_strength', 'warning', "La clé JWT pourrait être plus forte (" . $jwtSecretLength . " caractères)");
                $this->addIssue('security', 'medium_jwt_secret', "Clé JWT moyenne", "La clé JWT pourrait être renforcée", 'medium', $this->getFixJwtSecretInstructions());
            } else {
                $this->addResult($category, 'jwt_secret_strength', 'success', "La clé JWT est suffisamment forte");
            }
        }
        
        // 2. Vérifier la rotation des logs d'audit
        $sql = "SELECT COUNT(*) as count FROM llx_elaska_audit_log";
        $resql = $this->db->query($sql);
        
        if ($resql && ($obj = $this->db->fetch_object($resql))) {
            if ($obj->count > 1000000) {
                $this->addResult($category, 'audit_log_size', 'error', "Table d'audit très volumineuse (" . number_format($obj->count) . " entrées)");
                $this->addIssue('security', 'large_audit_log', "Logs d'audit volumineux", "La table des logs d'audit est très volumineuse et pourrait affecter les performances", 'high', $this->getFixAuditLogSizeInstructions());
            } elseif ($obj->count > 500000) {
                $this->addResult($category, 'audit_log_size', 'warning', "Table d'audit volumineuse (" . number_format($obj->count) . " entrées)");
                $this->addIssue('security', 'medium_audit_log', "Logs d'audit importants", "La table des logs d'audit est volumineuse", 'medium', $this->getFixAuditLogSizeInstructions());
            } else {
                $this->addResult($category, 'audit_log_size', 'success', "Taille de la table d'audit acceptable (" . number_format($obj->count) . " entrées)");
            }
        }
        
        // 3. Vérifier la configuration MFA (authentification à deux facteurs)
        $sql = "SELECT COUNT(*) as total, SUM(CASE WHEN mfa_enabled = 1 THEN 1 ELSE 0 END) as mfa_enabled";
        $sql .= " FROM llx_elaska_client_info";
        $resql = $this->db->query($sql);
        
        if ($resql && ($obj = $this->db->fetch_object($resql))) {
            if ($obj->total > 0) {
                $mfaRatio = ($obj->mfa_enabled / $obj->total) * 100;
                
                if ($mfaRatio < 10) {
                    $this->addResult($category, 'mfa_adoption', 'error', "Faible adoption de la MFA (" . round($mfaRatio, 1) . "%)");
                    $this->addIssue('security', 'low_mfa_adoption', "MFA peu utilisée", "Très peu de clients utilisent l'authentification à deux facteurs", 'high', $this->getFixMfaAdoptionInstructions());
                } elseif ($mfaRatio < 50) {
                    $this->addResult($category, 'mfa_adoption', 'warning', "Adoption moyenne de la MFA (" . round($mfaRatio, 1) . "%)");
                    $this->addIssue('security', 'medium_mfa_adoption', "MFA adoption moyenne", "Moins de la moitié des clients utilisent l'authentification à deux facteurs", 'medium', $this->getFixMfaAdoptionInstructions());
                } else {
                    $this->addResult($category, 'mfa_adoption', 'success', "Bonne adoption de la MFA (" . round($mfaRatio, 1) . "%)");
                }
            } else {
                $this->addResult($category, 'mfa_adoption', 'info', "Aucun client dans le système pour évaluer l'adoption de la MFA");
            }
        }
    }
    
    /**
     * Vérifie les performances du module
     */
    public function checkPerformance()
    {
        $category = 'performance';
        $this->initCategory($category, "Performance");
        
        // 1. Vérifier la taille des tables principales
        $this->checkTableSizes();
        
        // 2. Vérifier les index manquants pour des requêtes courantes
        $this->checkQueryPerformance();
        
        // 3. Vérifier la configuration du cache
        $this->checkCacheConfiguration();
    }
    
    /**
     * Vérifie la taille des tables principales
     */
    private function checkTableSizes()
    {
        $category = 'performance';
        
        $sql = "SELECT TABLE_NAME, data_length + index_length as size,";
        $sql .= " ROUND((data_length + index_length) / 1024 / 1024, 2) as size_mb";
        $sql .= " FROM information_schema.TABLES";
        $sql .= " WHERE table_schema = DATABASE()";
        $sql .= " AND TABLE_NAME LIKE 'llx_elaska_%'";
        $sql .= " ORDER BY size DESC";
        
        $resql = $this->db->query($sql);
        if ($resql) {
            $largeTablesCount = 0;
            $largeTablesList = array();
            
            while ($obj = $this->db->fetch_object($resql)) {
                if ($obj->size_mb > 100) {
                    $largeTablesCount++;
                    $largeTablesList[] = $obj->TABLE_NAME . ' (' . $obj->size_mb . ' MB)';
                }
            }
            
            if ($largeTablesCount > 0) {
                $this->addResult($category, 'large_tables', 'warning', "Tables volumineuses détectées: " . implode(', ', $largeTablesList));
                $this->addIssue('performance', 'large_tables', "Tables volumineuses", "Certaines tables sont très volumineuses et pourraient nécessiter une optimisation", 'medium', $this->getFixLargeTablesInstructions($largeTablesList));
            } else {
                $this->addResult($category, 'large_tables', 'success', "Aucune table excessivement volumineuse détectée");
            }
        }
    }
    
    /**
     * Vérifie les performances des requêtes
     */
    private function checkQueryPerformance()
    {
        $category = 'performance';
        
        // Vérifier si les requêtes lentes sont activées dans MySQL
        $sql = "SHOW VARIABLES LIKE 'slow_query_log'";
        $resql = $this->db->query($sql);
        
        if ($resql && ($obj = $this->db->fetch_object($resql))) {
            if ($obj->Value == 'ON') {
                $this->addResult($category, 'slow_query_log', 'success', "Le log des requêtes lentes est activé dans MySQL");
            } else {
                $this->addResult($category, 'slow_query_log', 'info', "Le log des requêtes lentes n'est pas activé dans MySQL");
            }
        }
        
        // Vérifier si certaines requêtes connues comme lentes sont optimisées
        $knownSlowQueries = array(
            array(
                'description' => "Recherche dans les communications",
                'sql' => "EXPLAIN SELECT * FROM llx_elaska_communication WHERE contenu LIKE '%search_term%'",
                'check' => "type != 'ALL' OR rows < 1000"
            ),
            array(
                'description' => "Jointure timeline et étapes",
                'sql' => "EXPLAIN SELECT * FROM llx_elaska_timeline t JOIN llx_elaska_timeline_etape e ON t.rowid = e.fk_timeline WHERE t.fk_dossier = 1",
                'check' => "type != 'ALL'"
            )
        );
        
        $slowQueriesFound = false;
        foreach ($knownSlowQueries as $query) {
            $resql = $this->db->query($query['sql']);
            
            if ($resql) {
                $obj = $this->db->fetch_object($resql);
                
                // Évaluer la condition de performance
                $condition = $query['check'];
                $conditionMet = false;
                
                // Analyse basique - dans un cas réel, cela serait plus sophistiqué
                if (strpos($condition, "type != 'ALL'") !== false) {
                    $conditionMet = ($obj->type != 'ALL');
                } elseif (strpos($condition, "rows <") !== false) {
                    $rows = (int)preg_replace('/.*rows < (\d+).*/', '$1', $condition);
                    $conditionMet = ($obj->rows < $rows);
                }
                
                if (!$conditionMet) {
                    $slowQueriesFound = true;
                    $this->addResult($category, 'slow_query_' . md5($query['description']), 'warning', "Requête potentiellement lente: " . $query['description']);
                }
            }
        }
        
        if (!$slowQueriesFound) {
            $this->addResult($category, 'query_performance', 'success', "Aucune requête lente connue détectée");
        } else {
            $this->addIssue('performance', 'slow_queries', "Requêtes lentes", "Certaines requêtes pourraient être optimisées", 'medium', $this->getFixSlowQueriesInstructions());
        }
    }
    
    /**
     * Vérifie la configuration du cache
     */
    private function checkCacheConfiguration()
    {
        $category = 'performance';
        global $conf;
        
        // Vérifier la configuration du cache pour le portail
        $cacheConfigFile = DOL_DOCUMENT_ROOT . '/custom/elaska/portail/.env.production';
        if (file_exists($cacheConfigFile)) {
            $cacheConfig = file_get_contents($cacheConfigFile);
            
            if (strpos($cacheConfig, 'REACT_APP_ENABLE_CACHE=true') !== false) {
                $this->addResult($category, 'portal_cache', 'success', "Cache du portail activé");
            } else {
                $this->addResult($category, 'portal_cache', 'warning', "Cache du portail non activé");
                $this->addIssue('performance', 'portal_cache_disabled', "Cache du portail désactivé", "Le cache du portail client n'est pas activé", 'medium', $this->getFixPortalCacheInstructions());
            }
        }
        
        // Vérifier la configuration du cache API
        if (!empty($conf->global->ELASKA_API_CACHE_TTL) && $conf->global->ELASKA_API_CACHE_TTL > 0) {
            $this->addResult($category, 'api_cache', 'success', "Cache API activé (TTL: " . $conf->global->ELASKA_API_CACHE_TTL . "s)");
        } else {
            $this->addResult($category, 'api_cache', 'warning', "Cache API non configuré ou désactivé");
            $this->addIssue('performance', 'api_cache_disabled', "Cache API désactivé", "Le cache des API n'est pas activé", 'medium', $this->getFixApiCacheInstructions());
        }
    }
    
    /**
     * Initialise une catégorie de diagnostics
     *
     * @param string $category Identifiant de la catégorie
     * @param string $label Libellé de la catégorie
     */
    private function initCategory($category, $label)
    {
        if (!isset($this->results[$category])) {
            $this->results[$category] = array(
                'label' => $label,
                'checks' => array()
            );
        }
    }
    
    /**
     * Ajoute un résultat de diagnostic
     *
     * @param string $category Catégorie du diagnostic
     * @param string $check Identifiant du contrôle
     * @param string $status Statut (success, warning, error, info)
     * @param string $message Message de résultat
     */
    private function addResult($category, $check, $status, $message)
    {
        $this->results[$category]['checks'][$check] = array(
            'status' => $status,
            'message' => $message,
            'timestamp' => time()
        );
    }
    
    /**
     * Ajoute un problème détecté
     *
     * @param string $category Catégorie du problème
     * @param string $code Code du problème
     * @param string $title Titre du problème
     * @param string $description Description du problème
     * @param string $severity Gravité (low, medium, high, critical)
     * @param array $fix Instructions pour résoudre le problème
     */
    private function addIssue($category, $code, $title, $description, $severity, $fix)
    {
        $this->issues[] = array(
            'category' => $category,
            'code' => $code,
            'title' => $title,
            'description' => $description,
            'severity' => $severity,
            'fix' => $fix,
            'detected_at' => time()
        );
    }
    
    /**
     * Génère un résumé des diagnostics
     *
     * @return array Résumé des diagnostics
     */
    private function getSummary()
    {
        $summary = array(
            'total_checks' => 0,
            'success' => 0,
            'warning' => 0,
            'error' => 0,
            'info' => 0,
            'issues' => array(
                'total' => count($this->issues),
                'by_severity' => array(
                    'critical' => 0,
                    'high' => 0,
                    'medium' => 0,
                    'low' => 0
                )
            ),
            'timestamp' => time(),
            'version' => $this->getModuleVersion()
        );
        
        // Comptabiliser les résultats
        foreach ($this->results as $category) {
            foreach ($category['checks'] as $check) {
                $summary['total_checks']++;
                $summary[$check['status']]++;
            }
        }
        
        // Comptabiliser les problèmes par gravité
        foreach ($this->issues as $issue) {
            $summary['issues']['by_severity'][$issue['severity']]++;
        }
        
        return $summary;
    }
    
    /**
     * Récupère la version actuelle du module
     *
     * @return string Version du module
     */
    private function getModuleVersion()
    {
        global $conf;
        
        if (!empty($conf->global->ELASKA_MODULE_VERSION)) {
            return $conf->global->ELASKA_MODULE_VERSION;
        } else {
            // Essayer de lire depuis le fichier de version
            $versionFile = DOL_DOCUMENT_ROOT . '/custom/elaska/core/version.php';
            
            if (file_exists($versionFile)) {
                include $versionFile;
                
                if (isset($module_version)) {
                    return $module_version;
                }
            }
        }
        
        return 'unknown';
    }
    
    /**
     * Instructions pour résoudre les tables manquantes
     *
     * @param array $missingTables Liste des tables manquantes
     * @return array Instructions
     */
    private function getFixDatabaseTablesInstructions($missingTables)
    {
        return array(
            'title' => 'Recréer les tables manquantes',
            'steps' => array(
                'Assurez-vous d\'avoir une sauvegarde récente de la base de données',
                'Allez dans "Configuration" > "Modules" > "eLaska-ESaiko"',
                'Cliquez sur "Désactiver" puis "Activer" pour réinstaller les tables manquantes',
                'Si cela ne fonctionne pas, exécutez le script de réparation:',
                '- Connectez-vous en SSH au serveur',
                '- Exécutez: php ' . DOL_DOCUMENT_ROOT . '/custom/elaska/scripts/repair_tables.php'
            ),
            'automated_fix' => true,
            'automated_fix_url' => DOL_URL_ROOT . '/custom/elaska/admin/repair.php?action=repair_tables&token=' . newToken()
        );
    }
    
    // Autres méthodes getFixXxxInstructions() similaires...
}
```

## Conclusion

Le module eLaska-ESaiko est conçu comme une solution complète et intégrée pour la gestion des clients, offrant une expérience utilisateur moderne tant pour les professionnels que pour leurs clients. L'architecture modulaire et évolutive permet d'adapter la solution aux besoins spécifiques des différents métiers tout en maintenant la cohérence et la sécurité des données.

L'approche centrée sur le client, combinée à des outils collaboratifs puissants et à un portail client intuitif, font d'eLaska-ESaiko un outil différenciant pour les cabinets souhaitant moderniser leur relation client.

Dans un cadre technique, le soin apporté à l'intégrité des données, à la sécurité et à la performance garantit une solution stable et pérenne, capable d'évoluer avec les besoins métier et les avancées technologiques.
                
